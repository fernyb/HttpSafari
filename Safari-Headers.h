/*
 *     Generated by class-dump 3.3.2 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2010 by Steve Nygard.
 */

#pragma mark Named Structures

struct AccessibilityObject {
    void **_field1;
    struct RetainPtr<VoiceOverInfo> _field2;
    struct Vector<Safari::AccessibilityAction, 0ul> _field3;
};

struct AddressBookEntry {
    void **_field1;
    int _field2;
    _Bool _field3;
    struct RetainPtr<ABPerson> _field4;
};

struct AddressBookEntryViewController {
    int _field1;
    struct RefPtr<Safari::AddressBookEntry> _field2;
    struct RefPtr<Safari::FormAutoFiller> _field3;
    struct SDOMHTMLInputElement _field4;
    struct RefPtr<Safari::AddressBookValueSpecifier> _field5;
    struct RefPtr<Safari::AddressBookPropertyController> _field6;
    struct Vector<Safari::SDOMElement, 0ul> _field7;
    struct Vector<WTF::RefPtr<Safari::AddressBookPropertyController>, 0ul> _field8;
    struct RetainPtr<AddressBookEntryView> _field9;
    struct RetainPtr<NSTextField> _field10;
    struct RetainPtr<NSButton> _field11;
};

struct AddressBookPropertyController {
    int _field1;
    struct Vector<Safari::AddressBookPropertyController::ElementData, 0ul> _field2;
    struct RefPtr<Safari::AddressBookValueSpecifier> _field3;
    struct RefPtr<Safari::AddressBookEntry> _field4;
    struct SString _field5;
};

struct AddressBookValueSpecifier;

struct AlignedBuffer<256ul, 8ul> {
    char buffer[256];
};

struct AlignedBuffer<32ul, 8ul> {
    char _field1[32];
};

struct ArticleFinderJSController;

struct BackForwardItemPersistentState;

struct BlackButtonLayer;

struct Bookmark {
    void **_field1;
    int _field2;
    struct Bookmark *_field3;
    struct BookmarkGroup *_field4;
    struct SString _field5;
    struct SString _field6;
    struct SString _field7;
    int _field8;
    int _field9;
    WebBookmark *_field10;
};

struct BookmarkGroup {
    _Bool _field1;
    struct SString _field2;
    struct SString _field3;
    _Bool _field4;
    struct HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::Bookmark>, 0ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::Bookmark>, 0ul>*>> _field5;
    struct HashMap<Safari::SString, WTF::RefPtr<Safari::Bookmark>, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::RefPtr<Safari::Bookmark>>> _field6;
    _Bool _field7;
    _Bool _field8;
    struct RetainPtr<WebBookmarkGroup> _field9;
    struct RetainPtr<WebBookmark> _field10;
};

struct BookmarksController {
    void **_field1;
    void **_field2;
    struct OwnPtr<Safari::BookmarkGroup> _field3;
    struct HashMap<Safari::SString, WTF::RefPtr<Safari::Bookmark>, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::RefPtr<Safari::Bookmark>>> _field4;
    long long _field5;
    struct FileTime _field6;
    struct SNotifier<Safari::BookmarksController> _field7;
    struct Vector<Safari::SString, 0ul> _field8;
    struct STimer<Safari::BookmarksController> _field9;
    struct OwnPtr<Safari::OffscreenSnapshotFetcher> _field10;
    struct RefPtr<Safari::Bookmark> _field11;
    struct RefPtr<Safari::Bookmark> _field12;
};

struct BrowserTabPersistentState {
    int _field1;
    struct Vector<Safari::BackForwardItemPersistentState, 0ul> _field2;
    unsigned long long _field3;
    _Bool _field4;
};

struct BrowserWindowPersistentState;

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGImage;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct ClipFinder;

struct ClippedNode {
    int _field1;
    struct CGRect _field2;
    struct SDOMNode _field3;
};

struct CoalescedAsynchronousWriter;

struct CompletionListGenerator;

struct CompletionListItem {
    void **_field1;
    int _field2;
    _Bool _field3;
};

struct CoreAnimationLayer {
    void **_field1;
    int _field2;
    void **_field3;
    struct RetainPtr<VoiceOverInfo> _field4;
    struct Vector<Safari::AccessibilityAction, 0ul> _field5;
    struct RetainPtr<_CACFLayer*> _field6;
    struct Vector<WTF::RefPtr<Safari::CoreAnimationLayer>, 0ul> _field7;
    struct RefPtr<Safari::CoreAnimationLayer> _field8;
    struct SString _field9;
    int _field10;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
};

struct ElementData;

struct EventReceiver;

struct EventSendingLayer {
    void **_field1;
    int _field2;
    void **_field3;
    struct RetainPtr<VoiceOverInfo> _field4;
    struct Vector<Safari::AccessibilityAction, 0ul> _field5;
    struct RetainPtr<_CACFLayer*> _field6;
    struct Vector<WTF::RefPtr<Safari::CoreAnimationLayer>, 0ul> _field7;
    struct RefPtr<Safari::CoreAnimationLayer> _field8;
    struct SString _field9;
    int _field10;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    void **_field11;
    _Bool _field12;
    struct RefPtr<Safari::EventReceiver> _field13;
    struct RefPtr<Safari::EventReceiver> _field14;
    struct RefPtr<Safari::EventReceiver> _field15;
    struct Vector<WTF::RefPtr<Safari::EventReceiver>, 0ul> _field16;
};

struct Extension;

struct ExtensionBar {
    void **_field1;
    struct RetainPtr<objc_object*> _field2;
    void **_field3;
    struct RetainPtr<objc_object*> _field4;
    void **_field5;
    struct RetainPtr<objc_object*> _field6;
    void **_field7;
    struct RetainPtr<objc_object*> _field8;
    struct Extension *_field9;
    struct SWebView _field10;
    _Bool _field11;
    void **_field12;
    int _field13;
    struct HashMap<Safari::SString, unsigned int, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<unsigned int>> _field14;
    struct HashMap<Safari::Extension*, WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*, WTF::PtrHash<Safari::Extension*>, WTF::HashTraits<Safari::Extension*>, WTF::HashTraits<WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*>> _field15;
    struct Vector<Safari::FiringEventIterator, 1ul> _field16;
    _Bool _field17;
    struct ExtensionBarClient *_field18;
    struct SString _field19;
    struct SString _field20;
    _Bool _field21;
    struct RetainPtr<ExtensionBarBackground> _field22;
};

struct ExtensionBarClient;

struct ExtensionBuilderController {
    void **_field1;
    struct Vector<OpaqueJSValue*, 0ul> _field2;
    struct OpaqueJSValue *_field3;
    struct OpaqueJSContext *_field4;
    void **_field5;
    struct RetainPtr<objc_object*> _field6;
    struct OpaqueJSValue *_field7;
    void **_field8;
    struct RetainPtr<objc_object*> _field9;
    void **_field10;
    struct RetainPtr<objc_object*> _field11;
    struct SWebView _field12;
    _Bool _field13;
    struct Vector<WTF::RefPtr<Safari::SignatureCreator>, 0ul> _field14;
    struct SNotifier<Safari::ExtensionBuilderController> _field15;
    struct SMutableArray _field16;
    struct RetainPtr<NSWindow> _field17;
    struct RetainPtr<ExtensionBuilderControllerWrapper> _field18;
};

struct ExtensionContextMenuItem {
    void **_field1;
    int _field2;
    struct HashMap<Safari::SString, unsigned int, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<unsigned int>> _field3;
    struct HashMap<Safari::Extension*, WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*, WTF::PtrHash<Safari::Extension*>, WTF::HashTraits<Safari::Extension*>, WTF::HashTraits<WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*>> _field4;
    struct Vector<Safari::FiringEventIterator, 1ul> _field5;
    _Bool _field6;
    struct Extension *_field7;
    struct SWebView _field8;
    struct SString _field9;
    struct SString _field10;
    struct SString _field11;
    _Bool _field12;
    struct SWebSerializedJSValue _field13;
};

struct ExtensionToolbarClientObjCAdapter {
    void **_field1;
    void **_field2;
    id _field3;
};

struct ExtensionToolbarItem {
    void **_field1;
    int _field2;
    struct HashMap<Safari::SString, unsigned int, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<unsigned int>> _field3;
    struct HashMap<Safari::Extension*, WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*, WTF::PtrHash<Safari::Extension*>, WTF::HashTraits<Safari::Extension*>, WTF::HashTraits<WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*>> _field4;
    struct Vector<Safari::FiringEventIterator, 1ul> _field5;
    _Bool _field6;
    struct ExtensionToolbarItemClient *_field7;
    struct Extension *_field8;
    struct SString _field9;
    struct SString _field10;
    struct SString _field11;
    struct SString _field12;
    struct SString _field13;
    unsigned long long _field14;
    struct SURL _field15;
    _Bool _field16;
    id _field17;
};

struct ExtensionToolbarItemClient;

struct ExtensionsView;

struct ExtensionsViewController;

struct FileHandle {
    struct RetainPtr<NSFileHandle> m_fileHandle;
};

struct FileTime {
    long long m_seconds;
    long long m_nanoseconds;
};

struct FiringEventIterator;

struct FlowAnimationManager;

struct FlowCaptionLayer;

struct FlowDataSource;

struct FlowDataSourceMac;

struct FlowRootLayer {
    void **_field1;
    int _field2;
    void **_field3;
    struct RetainPtr<VoiceOverInfo> _field4;
    struct Vector<Safari::AccessibilityAction, 0ul> _field5;
    struct RetainPtr<_CACFLayer*> _field6;
    struct Vector<WTF::RefPtr<Safari::CoreAnimationLayer>, 0ul> _field7;
    struct RefPtr<Safari::CoreAnimationLayer> _field8;
    struct SString _field9;
    int _field10;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    void **_field11;
    _Bool _field12;
    struct RefPtr<Safari::EventReceiver> _field13;
    struct RefPtr<Safari::EventReceiver> _field14;
    struct RefPtr<Safari::EventReceiver> _field15;
    struct Vector<WTF::RefPtr<Safari::EventReceiver>, 0ul> _field16;
    void **_field17;
    void **_field18;
    struct FlowViewController *_field19;
    struct RefPtr<Safari::CoreAnimationLayer> _field20;
    struct RefPtr<Safari::TopSitesWindowBorderLayer> _field21;
    struct RefPtr<Safari::FlowCaptionLayer> _field22;
    struct RefPtr<Safari::FlowScrollerLayer> _field23;
    struct RefPtr<Safari::FlowSplitViewResizerLayer> _field24;
    struct RefPtr<Safari::BlackButtonLayer> _field25;
    struct RefPtr<Safari::CoreAnimationLayer> _field26;
    struct RefPtr<Safari::CoreAnimationLayer> _field27;
    struct RefPtr<Safari::CoreAnimationLayer> _field28;
    struct Vector<WTF::RefPtr<Safari::FlowItemCell>, 0ul> _field29;
    struct STimer<Safari::FlowRootLayer> _field30;
    unsigned int _field31;
    struct OwnPtr<Safari::FlowAnimationManager> _field32;
    struct RefPtr<Safari::FlowScrollingAnimation> _field33;
    double _field34;
    double _field35;
    double _field36;
    double _field37;
    double _field38;
    _Bool _field39;
};

struct FlowScrollerLayer;

struct FlowScrollingAnimation;

struct FlowSplitViewResizerLayer;

struct FlowViewController {
    int _field1;
    struct FlowDataSource *_field2;
    struct FlowViewControllerClient *_field3;
    struct RefPtr<Safari::FlowRootLayer> _field4;
    struct Vector<WTF::RefPtr<Safari::FlowItem>, 0ul> _field5;
    unsigned long long _field6;
    int _field7;
    _Bool _field8;
};

struct FlowViewControllerClient;

struct FlowViewControllerClientMac;

struct FormAutoFiller;

struct FormCompletionController {
    void **_field1;
    int _field2;
    struct RetainPtr<CompletionControllerObjCAdapter> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct Vector<WTF::RefPtr<Safari::CompletionListItem>, 0ul> _field7;
    struct SString _field8;
    struct STimer<Safari::CompletionController> {
        void **_field1;
        unsigned long long _field2;
        _Bool _field3;
        struct CompletionController *_field4;
        CDStruct_d65495c1 _field5;
    } _field9;
    struct STimer<Safari::CompletionController> {
        void **_field1;
        unsigned long long _field2;
        _Bool _field3;
        struct CompletionController *_field4;
        CDStruct_d65495c1 _field5;
    } _field10;
    struct STimer<Safari::CompletionController> {
        void **_field1;
        unsigned long long _field2;
        _Bool _field3;
        struct CompletionController *_field4;
        CDStruct_d65495c1 _field5;
    } _field11;
    double _field12;
    unsigned long long _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    struct SString _field21;
    _Bool _field22;
    struct SDOMElement _field23;
    struct SDOMHTMLInputElement _field24;
    struct RefPtr<Safari::AddressBookEntryViewController> _field25;
    struct SWebFrame _field26;
};

struct GlobalHistoryItem {
    int _field1;
    struct SURL _field2;
    struct SString _field3;
    struct SString _field4;
    struct SString _field5;
    struct SString _field6;
    double _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    struct OwnPtr<WTF::Vector<Safari::SString, 0ul>> _field12;
    struct Vector<int, 0ul> _field13;
    struct Vector<int, 0ul> _field14;
    struct RetainPtr<GlobalHistoryItemObjC> _field15;
};

struct HashMap<Safari::Extension*, WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*, WTF::PtrHash<Safari::Extension*>, WTF::HashTraits<Safari::Extension*>, WTF::HashTraits<WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*>> {
    struct HashTable<Safari::Extension*, std::pair<Safari::Extension*, WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*>, WTF::PairFirstExtractor<std::pair<Safari::Extension*, WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*>>, WTF::PtrHash<Safari::Extension*>, WTF::PairHashTraits<WTF::HashTraits<Safari::Extension*>, WTF::HashTraits<WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*>>, WTF::HashTraits<Safari::Extension*>> _field1;
};

struct HashMap<Safari::SString, WTF::RefPtr<Safari::Bookmark>, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::RefPtr<Safari::Bookmark>>> {
    struct HashTable<Safari::SString, std::pair<Safari::SString, WTF::RefPtr<Safari::Bookmark>>, WTF::PairFirstExtractor<std::pair<Safari::SString, WTF::RefPtr<Safari::Bookmark>>>, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::PairHashTraits<WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::RefPtr<Safari::Bookmark>>>, WTF::HashTraits<Safari::SString>> m_impl;
};

struct HashMap<Safari::SString, WTF::RefPtr<Safari::OffscreenSnapshotRequest>, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::RefPtr<Safari::OffscreenSnapshotRequest>>> {
    struct HashTable<Safari::SString, std::pair<Safari::SString, WTF::RefPtr<Safari::OffscreenSnapshotRequest>>, WTF::PairFirstExtractor<std::pair<Safari::SString, WTF::RefPtr<Safari::OffscreenSnapshotRequest>>>, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::PairHashTraits<WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::RefPtr<Safari::OffscreenSnapshotRequest>>>, WTF::HashTraits<Safari::SString>> m_impl;
};

struct HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::Bookmark>, 0ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::Bookmark>, 0ul>*>> {
    struct HashTable<Safari::SString, std::pair<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::Bookmark>, 0ul>*>, WTF::PairFirstExtractor<std::pair<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::Bookmark>, 0ul>*>>, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::PairHashTraits<WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::Bookmark>, 0ul>*>>, WTF::HashTraits<Safari::SString>> m_impl;
};

struct HashMap<Safari::SString, const void*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<const void*>>;

struct HashMap<Safari::SString, unsigned int, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<unsigned int>> {
    struct HashTable<Safari::SString, std::pair<Safari::SString, unsigned int>, WTF::PairFirstExtractor<std::pair<Safari::SString, unsigned int>>, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::PairHashTraits<WTF::HashTraits<Safari::SString>, WTF::HashTraits<unsigned int>>, WTF::HashTraits<Safari::SString>> _field1;
};

struct HashMap<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::BookmarksController, const Safari::SNotification&>, WTF::PairHash<Safari::SString, const void*>, WTF::HashTraits<std::pair<Safari::SString, const void*>>, WTF::HashTraits<std::mem_fun1_t<void, Safari::BookmarksController, const Safari::SNotification&>>> {
    struct HashTable<std::pair<Safari::SString, const void*>, std::pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::BookmarksController, const Safari::SNotification&>>, WTF::PairFirstExtractor<std::pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::BookmarksController, const Safari::SNotification&>>>, WTF::PairHash<Safari::SString, const void*>, WTF::PairHashTraits<WTF::HashTraits<std::pair<Safari::SString, const void*>>, WTF::HashTraits<std::mem_fun1_t<void, Safari::BookmarksController, const Safari::SNotification&>>>, WTF::HashTraits<std::pair<Safari::SString, const void*>>> m_impl;
};

struct HashMap<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::ExtensionBuilderController, const Safari::SNotification&>, WTF::PairHash<Safari::SString, const void*>, WTF::HashTraits<std::pair<Safari::SString, const void*>>, WTF::HashTraits<std::mem_fun1_t<void, Safari::ExtensionBuilderController, const Safari::SNotification&>>> {
    struct HashTable<std::pair<Safari::SString, const void*>, std::pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::ExtensionBuilderController, const Safari::SNotification&>>, WTF::PairFirstExtractor<std::pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::ExtensionBuilderController, const Safari::SNotification&>>>, WTF::PairHash<Safari::SString, const void*>, WTF::PairHashTraits<WTF::HashTraits<std::pair<Safari::SString, const void*>>, WTF::HashTraits<std::mem_fun1_t<void, Safari::ExtensionBuilderController, const Safari::SNotification&>>>, WTF::HashTraits<std::pair<Safari::SString, const void*>>> m_impl;
};

struct HashMap<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::OffscreenSnapshotFetcher, const Safari::SNotification&>, WTF::PairHash<Safari::SString, const void*>, WTF::HashTraits<std::pair<Safari::SString, const void*>>, WTF::HashTraits<std::mem_fun1_t<void, Safari::OffscreenSnapshotFetcher, const Safari::SNotification&>>> {
    struct HashTable<std::pair<Safari::SString, const void*>, std::pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::OffscreenSnapshotFetcher, const Safari::SNotification&>>, WTF::PairFirstExtractor<std::pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::OffscreenSnapshotFetcher, const Safari::SNotification&>>>, WTF::PairHash<Safari::SString, const void*>, WTF::PairHashTraits<WTF::HashTraits<std::pair<Safari::SString, const void*>>, WTF::HashTraits<std::mem_fun1_t<void, Safari::OffscreenSnapshotFetcher, const Safari::SNotification&>>>, WTF::HashTraits<std::pair<Safari::SString, const void*>>> m_impl;
};

struct HashMap<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::TopSitesViewController, const Safari::SNotification&>, WTF::PairHash<Safari::SString, const void*>, WTF::HashTraits<std::pair<Safari::SString, const void*>>, WTF::HashTraits<std::mem_fun1_t<void, Safari::TopSitesViewController, const Safari::SNotification&>>> {
    struct HashTable<std::pair<Safari::SString, const void*>, std::pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::TopSitesViewController, const Safari::SNotification&>>, WTF::PairFirstExtractor<std::pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::TopSitesViewController, const Safari::SNotification&>>>, WTF::PairHash<Safari::SString, const void*>, WTF::PairHashTraits<WTF::HashTraits<std::pair<Safari::SString, const void*>>, WTF::HashTraits<std::mem_fun1_t<void, Safari::TopSitesViewController, const Safari::SNotification&>>>, WTF::HashTraits<std::pair<Safari::SString, const void*>>> m_impl;
};

struct HashMap<unsigned int, WTF::RefPtr<Safari::OffscreenSnapshotRequest>, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::RefPtr<Safari::OffscreenSnapshotRequest>>> {
    struct HashTable<unsigned int, std::pair<unsigned int, WTF::RefPtr<Safari::OffscreenSnapshotRequest>>, WTF::PairFirstExtractor<std::pair<unsigned int, WTF::RefPtr<Safari::OffscreenSnapshotRequest>>>, WTF::IntHash<unsigned int>, WTF::PairHashTraits<WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::RefPtr<Safari::OffscreenSnapshotRequest>>>, WTF::HashTraits<unsigned int>> m_impl;
};

struct HashMap<unsigned int, std::pair<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, unsigned int>, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<std::pair<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, unsigned int>>> {
    struct HashTable<unsigned int, std::pair<unsigned int, std::pair<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, unsigned int>>, WTF::PairFirstExtractor<std::pair<unsigned int, std::pair<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, unsigned int>>>, WTF::IntHash<unsigned int>, WTF::PairHashTraits<WTF::HashTraits<unsigned int>, WTF::HashTraits<std::pair<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, unsigned int>>>, WTF::HashTraits<unsigned int>> m_impl;
};

struct HashSet<Safari::SString, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>> {
    struct HashTable<Safari::SString, Safari::SString, WTF::IdentityExtractor<Safari::SString>, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<Safari::SString>> m_impl;
};

struct HashSet<WTF::RefPtr<Safari::GlobalHistoryItem>, WTF::PtrHash<WTF::RefPtr<Safari::GlobalHistoryItem>>, WTF::HashTraits<WTF::RefPtr<Safari::GlobalHistoryItem>>> {
    struct HashTable<WTF::RefPtr<Safari::GlobalHistoryItem>, WTF::RefPtr<Safari::GlobalHistoryItem>, WTF::IdentityExtractor<WTF::RefPtr<Safari::GlobalHistoryItem>>, WTF::PtrHash<WTF::RefPtr<Safari::GlobalHistoryItem>>, WTF::HashTraits<WTF::RefPtr<Safari::GlobalHistoryItem>>, WTF::HashTraits<WTF::RefPtr<Safari::GlobalHistoryItem>>> _field1;
};

struct HashTable<Safari::Extension*, std::pair<Safari::Extension*, WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*>, WTF::PairFirstExtractor<std::pair<Safari::Extension*, WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*>>, WTF::PtrHash<Safari::Extension*>, WTF::PairHashTraits<WTF::HashTraits<Safari::Extension*>, WTF::HashTraits<WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*>>, WTF::HashTraits<Safari::Extension*>> {
    struct pair<Safari::Extension*, WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*> *_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
};

struct HashTable<Safari::SString, Safari::SString, WTF::IdentityExtractor<Safari::SString>, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<Safari::SString>> {
    struct SString *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<Safari::SString, std::pair<Safari::SString, WTF::RefPtr<Safari::Bookmark>>, WTF::PairFirstExtractor<std::pair<Safari::SString, WTF::RefPtr<Safari::Bookmark>>>, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::PairHashTraits<WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::RefPtr<Safari::Bookmark>>>, WTF::HashTraits<Safari::SString>> {
    struct pair<Safari::SString, WTF::RefPtr<Safari::Bookmark>> *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<Safari::SString, std::pair<Safari::SString, WTF::RefPtr<Safari::OffscreenSnapshotRequest>>, WTF::PairFirstExtractor<std::pair<Safari::SString, WTF::RefPtr<Safari::OffscreenSnapshotRequest>>>, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::PairHashTraits<WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::RefPtr<Safari::OffscreenSnapshotRequest>>>, WTF::HashTraits<Safari::SString>> {
    struct pair<Safari::SString, WTF::RefPtr<Safari::OffscreenSnapshotRequest>> *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<Safari::SString, std::pair<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::Bookmark>, 0ul>*>, WTF::PairFirstExtractor<std::pair<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::Bookmark>, 0ul>*>>, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::PairHashTraits<WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::Bookmark>, 0ul>*>>, WTF::HashTraits<Safari::SString>> {
    struct pair<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::Bookmark>, 0ul>*> *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<Safari::SString, std::pair<Safari::SString, unsigned int>, WTF::PairFirstExtractor<std::pair<Safari::SString, unsigned int>>, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::PairHashTraits<WTF::HashTraits<Safari::SString>, WTF::HashTraits<unsigned int>>, WTF::HashTraits<Safari::SString>> {
    struct pair<Safari::SString, unsigned int> *_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
};

struct HashTable<WTF::RefPtr<Safari::GlobalHistoryItem>, WTF::RefPtr<Safari::GlobalHistoryItem>, WTF::IdentityExtractor<WTF::RefPtr<Safari::GlobalHistoryItem>>, WTF::PtrHash<WTF::RefPtr<Safari::GlobalHistoryItem>>, WTF::HashTraits<WTF::RefPtr<Safari::GlobalHistoryItem>>, WTF::HashTraits<WTF::RefPtr<Safari::GlobalHistoryItem>>> {
    struct RefPtr<Safari::GlobalHistoryItem> *_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
};

struct HashTable<std::pair<Safari::SString, const void*>, std::pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::BookmarksController, const Safari::SNotification&>>, WTF::PairFirstExtractor<std::pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::BookmarksController, const Safari::SNotification&>>>, WTF::PairHash<Safari::SString, const void*>, WTF::PairHashTraits<WTF::HashTraits<std::pair<Safari::SString, const void*>>, WTF::HashTraits<std::mem_fun1_t<void, Safari::BookmarksController, const Safari::SNotification&>>>, WTF::HashTraits<std::pair<Safari::SString, const void*>>> {
    struct pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::BookmarksController, const Safari::SNotification&>> *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<std::pair<Safari::SString, const void*>, std::pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::ExtensionBuilderController, const Safari::SNotification&>>, WTF::PairFirstExtractor<std::pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::ExtensionBuilderController, const Safari::SNotification&>>>, WTF::PairHash<Safari::SString, const void*>, WTF::PairHashTraits<WTF::HashTraits<std::pair<Safari::SString, const void*>>, WTF::HashTraits<std::mem_fun1_t<void, Safari::ExtensionBuilderController, const Safari::SNotification&>>>, WTF::HashTraits<std::pair<Safari::SString, const void*>>> {
    struct pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::ExtensionBuilderController, const Safari::SNotification&>> *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<std::pair<Safari::SString, const void*>, std::pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::OffscreenSnapshotFetcher, const Safari::SNotification&>>, WTF::PairFirstExtractor<std::pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::OffscreenSnapshotFetcher, const Safari::SNotification&>>>, WTF::PairHash<Safari::SString, const void*>, WTF::PairHashTraits<WTF::HashTraits<std::pair<Safari::SString, const void*>>, WTF::HashTraits<std::mem_fun1_t<void, Safari::OffscreenSnapshotFetcher, const Safari::SNotification&>>>, WTF::HashTraits<std::pair<Safari::SString, const void*>>> {
    struct pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::OffscreenSnapshotFetcher, const Safari::SNotification&>> *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<std::pair<Safari::SString, const void*>, std::pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::TopSitesViewController, const Safari::SNotification&>>, WTF::PairFirstExtractor<std::pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::TopSitesViewController, const Safari::SNotification&>>>, WTF::PairHash<Safari::SString, const void*>, WTF::PairHashTraits<WTF::HashTraits<std::pair<Safari::SString, const void*>>, WTF::HashTraits<std::mem_fun1_t<void, Safari::TopSitesViewController, const Safari::SNotification&>>>, WTF::HashTraits<std::pair<Safari::SString, const void*>>> {
    struct pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::TopSitesViewController, const Safari::SNotification&>> *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<unsigned int, std::pair<unsigned int, WTF::RefPtr<Safari::OffscreenSnapshotRequest>>, WTF::PairFirstExtractor<std::pair<unsigned int, WTF::RefPtr<Safari::OffscreenSnapshotRequest>>>, WTF::IntHash<unsigned int>, WTF::PairHashTraits<WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::RefPtr<Safari::OffscreenSnapshotRequest>>>, WTF::HashTraits<unsigned int>> {
    struct pair<unsigned int, WTF::RefPtr<Safari::OffscreenSnapshotRequest>> *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<unsigned int, std::pair<unsigned int, std::pair<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, unsigned int>>, WTF::PairFirstExtractor<std::pair<unsigned int, std::pair<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, unsigned int>>>, WTF::IntHash<unsigned int>, WTF::PairHashTraits<WTF::HashTraits<unsigned int>, WTF::HashTraits<std::pair<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, unsigned int>>>, WTF::HashTraits<unsigned int>> {
    struct pair<unsigned int, std::pair<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, unsigned int>> *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct MessageReceivingPort {
    struct MessageReceivingPortClient *_field1;
    struct Vector<unsigned char, 0ul> _field2;
    struct RetainPtr<MessageReceivingPortReader> _field3;
};

struct MessageReceivingPortClient;

struct OffscreenSnapshotFetcherClient;

struct OpaqueJSContext;

struct OpaqueJSValue;

struct OwnPtr<ClipFinder> {
    struct ClipFinder *m_ptr;
};

struct OwnPtr<Safari::ArticleFinderJSController> {
    struct ArticleFinderJSController *m_ptr;
};

struct OwnPtr<Safari::BookmarkGroup> {
    struct BookmarkGroup *m_ptr;
};

struct OwnPtr<Safari::BrowserWindowPersistentState> {
    struct BrowserWindowPersistentState *m_ptr;
};

struct OwnPtr<Safari::CoalescedAsynchronousWriter> {
    struct CoalescedAsynchronousWriter *m_ptr;
};

struct OwnPtr<Safari::CompletionListGenerator> {
    struct CompletionListGenerator *_field1;
};

struct OwnPtr<Safari::ExtensionToolbarClientObjCAdapter> {
    struct ExtensionToolbarClientObjCAdapter *m_ptr;
};

struct OwnPtr<Safari::ExtensionsView> {
    struct ExtensionsView *m_ptr;
};

struct OwnPtr<Safari::ExtensionsViewController> {
    struct ExtensionsViewController *m_ptr;
};

struct OwnPtr<Safari::FlowAnimationManager> {
    struct FlowAnimationManager *_field1;
};

struct OwnPtr<Safari::MessageReceivingPort> {
    struct MessageReceivingPort *m_ptr;
};

struct OwnPtr<Safari::OffscreenSnapshotFetcher> {
    struct OffscreenSnapshotFetcher *m_ptr;
};

struct OwnPtr<Safari::ReaderController> {
    struct ReaderController *m_ptr;
};

struct OwnPtr<Safari::ReaderJSController> {
    struct ReaderJSController *m_ptr;
};

struct OwnPtr<Safari::SObjCNotifier> {
    struct SObjCNotifier *m_ptr;
};

struct OwnPtr<Safari::TopSitesFlowDataSource> {
    struct TopSitesFlowDataSource *_field1;
};

struct OwnPtr<Safari::TopSitesFlowViewControllerClient> {
    struct TopSitesFlowViewControllerClient *_field1;
};

struct OwnPtr<Safari::URLCompletionController> {
    struct URLCompletionController *m_ptr;
};

struct OwnPtr<Safari::WebSearchCompletionController> {
    struct WebSearchCompletionController *m_ptr;
};

struct OwnPtr<WTF::Vector<Safari::SString, 0ul>> {
    struct Vector<Safari::SString, 0ul> *m_ptr;
};

struct PassOwnPtr<Safari::ReaderController> {
    struct ReaderController *_field1;
};

struct PassRefPtr<ClippedNode> {
    struct ClippedNode *_field1;
};

struct PassRefPtr<Safari::Bookmark> {
    struct Bookmark *_field1;
};

struct PassRefPtr<Safari::BrowserTabPersistentState> {
    struct BrowserTabPersistentState *_field1;
};

struct PassRefPtr<Safari::CompletionListItem> {
    struct CompletionListItem *_field1;
};

struct PassRefPtr<Safari::CoreAnimationLayer> {
    struct CoreAnimationLayer *_field1;
};

struct ProcessSerialNumber {
    unsigned int highLongOfPSN;
    unsigned int lowLongOfPSN;
};

struct ReaderController {
    struct SWebView _field1;
    struct SString _field2;
    _Bool _field3;
    _Bool _field4;
    struct OwnPtr<Safari::ArticleFinderJSController> _field5;
    struct SWebScriptWorld _field6;
    struct SString _field7;
    _Bool _field8;
    struct SWebView _field9;
    struct SWebView _field10;
    struct RetainPtr<ReaderOverlayController*> _field11;
};

struct ReaderJSController {
    void **_field1;
    struct Vector<OpaqueJSValue*, 0ul> _field2;
    struct OpaqueJSValue *_field3;
    struct OpaqueJSContext *_field4;
    struct SWebView _field5;
    struct ReaderController *_field6;
    struct OwnPtr<Safari::ArticleFinderJSController> _field7;
};

struct RefPtr<ClippedNode> {
    struct ClippedNode *m_ptr;
};

struct RefPtr<Safari::AddressBookEntry> {
    struct AddressBookEntry *m_ptr;
};

struct RefPtr<Safari::AddressBookEntryViewController> {
    struct AddressBookEntryViewController *_field1;
};

struct RefPtr<Safari::AddressBookPropertyController> {
    struct AddressBookPropertyController *m_ptr;
};

struct RefPtr<Safari::AddressBookValueSpecifier> {
    struct AddressBookValueSpecifier *m_ptr;
};

struct RefPtr<Safari::BlackButtonLayer> {
    struct BlackButtonLayer *_field1;
};

struct RefPtr<Safari::Bookmark> {
    struct Bookmark *m_ptr;
};

struct RefPtr<Safari::BrowserTabPersistentState> {
    struct BrowserTabPersistentState *m_ptr;
};

struct RefPtr<Safari::CompletionListItem> {
    struct CompletionListItem *m_ptr;
};

struct RefPtr<Safari::CoreAnimationLayer> {
    struct CoreAnimationLayer *m_ptr;
};

struct RefPtr<Safari::EventReceiver> {
    struct EventReceiver *_field1;
};

struct RefPtr<Safari::ExtensionBar>;

struct RefPtr<Safari::ExtensionContextMenuItem> {
    struct ExtensionContextMenuItem *m_ptr;
};

struct RefPtr<Safari::ExtensionToolbarItem> {
    struct ExtensionToolbarItem *m_ptr;
};

struct RefPtr<Safari::FlowCaptionLayer> {
    struct FlowCaptionLayer *_field1;
};

struct RefPtr<Safari::FlowDataSourceMac> {
    struct FlowDataSourceMac *m_ptr;
};

struct RefPtr<Safari::FlowItem>;

struct RefPtr<Safari::FlowItemCell>;

struct RefPtr<Safari::FlowRootLayer> {
    struct FlowRootLayer *_field1;
};

struct RefPtr<Safari::FlowScrollerLayer> {
    struct FlowScrollerLayer *_field1;
};

struct RefPtr<Safari::FlowScrollingAnimation> {
    struct FlowScrollingAnimation *_field1;
};

struct RefPtr<Safari::FlowSplitViewResizerLayer> {
    struct FlowSplitViewResizerLayer *_field1;
};

struct RefPtr<Safari::FlowViewController> {
    struct FlowViewController *m_ptr;
};

struct RefPtr<Safari::FlowViewControllerClientMac> {
    struct FlowViewControllerClientMac *m_ptr;
};

struct RefPtr<Safari::FormAutoFiller> {
    struct FormAutoFiller *m_ptr;
};

struct RefPtr<Safari::FormCompletionController> {
    struct FormCompletionController *m_ptr;
};

struct RefPtr<Safari::GlobalHistoryItem>;

struct RefPtr<Safari::OffscreenSnapshotRequest>;

struct RefPtr<Safari::SBrowserTab> {
    struct SBrowserTab *m_ptr;
};

struct RefPtr<Safari::SBrowserWebView> {
    struct SBrowserWebView *m_ptr;
};

struct RefPtr<Safari::SBrowserWindow> {
    struct SBrowserWindow *m_ptr;
};

struct RefPtr<Safari::SignatureCreator>;

struct RefPtr<Safari::Subscribable>;

struct RefPtr<Safari::TextLayer> {
    struct TextLayer *_field1;
};

struct RefPtr<Safari::TopSite> {
    struct TopSite *m_ptr;
};

struct RefPtr<Safari::TopSitesRootLayer> {
    struct TopSitesRootLayer *_field1;
};

struct RefPtr<Safari::TopSitesSwitcherControlLayer> {
    struct TopSitesSwitcherControlLayer *_field1;
};

struct RefPtr<Safari::TopSitesWindowBorderLayer> {
    struct TopSitesWindowBorderLayer *_field1;
};

struct RefPtr<Safari::WebPageProxy> {
    struct WebPageProxy *_field1;
};

struct RefPtr<SafeBrowsingLastUpdateObserver> {
    struct SafeBrowsingLastUpdateObserver *m_ptr;
};

struct RefPtr<SafeBrowsingObserverMac> {
    struct SafeBrowsingObserverMac *m_ptr;
};

struct RetainPtr<ABPerson> {
    id _field1;
};

struct RetainPtr<AddressBookEntryView> {
    AddressBookEntryView *m_ptr;
};

struct RetainPtr<BlackSearchFieldController> {
    BlackSearchFieldController *m_ptr;
};

struct RetainPtr<CGImage*> {
    struct CGImage *m_ptr;
};

struct RetainPtr<CompletionControllerObjCAdapter> {
    CompletionControllerObjCAdapter *m_ptr;
};

struct RetainPtr<DOMElement> {
    id _field1;
};

struct RetainPtr<DOMHTMLInputElement> {
    DOMHTMLInputElement *m_ptr;
};

struct RetainPtr<DOMNode> {
    id _field1;
};

struct RetainPtr<ExtensionBarBackground> {
    id _field1;
};

struct RetainPtr<ExtensionBuilderControllerWrapper> {
    ExtensionBuilderControllerWrapper *m_ptr;
};

struct RetainPtr<GlobalHistoryItemObjC> {
    GlobalHistoryItemObjC *m_ptr;
};

struct RetainPtr<InnerSearchFieldDelegate> {
    InnerSearchFieldDelegate *m_ptr;
};

struct RetainPtr<MessageReceivingPortReader> {
    MessageReceivingPortReader *m_ptr;
};

struct RetainPtr<NSAlert> {
    NSAlert *m_ptr;
};

struct RetainPtr<NSButton> {
    NSButton *m_ptr;
};

struct RetainPtr<NSDictionary> {
    id _field1;
};

struct RetainPtr<NSFileHandle> {
    NSFileHandle *m_ptr;
};

struct RetainPtr<NSString> {
    NSString *m_ptr;
};

struct RetainPtr<NSTextField> {
    NSTextField *m_ptr;
};

struct RetainPtr<NSURLRequest> {
    id _field1;
};

struct RetainPtr<NSWindow> {
    NSWindow *m_ptr;
};

struct RetainPtr<ReaderOverlayController*> {
    ReaderOverlayController *m_ptr;
};

struct RetainPtr<SnapshotFetcherTaskMonitor> {
    SnapshotFetcherTaskMonitor *m_ptr;
};

struct RetainPtr<SnapshotFetcherWebPreferencesObserver> {
    SnapshotFetcherWebPreferencesObserver *m_ptr;
};

struct RetainPtr<VoiceOverInfo> {
    VoiceOverInfo *m_ptr;
};

struct RetainPtr<WebBookmark> {
    WebBookmark *m_ptr;
};

struct RetainPtr<WebBookmarkGroup> {
    WebBookmarkGroup *m_ptr;
};

struct RetainPtr<WebFrame> {
    id _field1;
};

struct RetainPtr<WebScriptWorld> {
    WebScriptWorld *m_ptr;
};

struct RetainPtr<WebSerializedJSValue> {
    id _field1;
};

struct RetainPtr<WebView> {
    WebView *m_ptr;
};

struct RetainPtr<_CACFLayer*> {
    struct _CACFLayer *_field1;
};

struct RetainPtr<const __CFArray*> {
    struct __CFArray *m_ptr;
};

struct RetainPtr<const __CFString*> {
    struct __CFString *m_ptr;
};

struct RetainPtr<const __CFURL*> {
    struct __CFURL *m_ptr;
};

struct RetainPtr<objc_object*> {
    id m_ptr;
};

struct SAlertDialog {
    struct RetainPtr<NSAlert> _field1;
};

struct SBrowserTab {
    void **_field1;
    int _field2;
    struct HashMap<Safari::SString, unsigned int, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<unsigned int>> _field3;
    struct HashMap<Safari::Extension*, WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*, WTF::PtrHash<Safari::Extension*>, WTF::HashTraits<Safari::Extension*>, WTF::HashTraits<WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*>> _field4;
    struct Vector<Safari::FiringEventIterator, 1ul> _field5;
    _Bool _field6;
    id _field7;
    struct RefPtr<Safari::WebPageProxy> _field8;
};

struct SBrowserWebView {
    void **_field1;
    int _field2;
    id _field3;
};

struct SBrowserWindow {
    void **_field1;
    int _field2;
    struct HashMap<Safari::SString, unsigned int, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<unsigned int>> _field3;
    struct HashMap<Safari::Extension*, WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*, WTF::PtrHash<Safari::Extension*>, WTF::HashTraits<Safari::Extension*>, WTF::HashTraits<WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*>> _field4;
    struct Vector<Safari::FiringEventIterator, 1ul> _field5;
    _Bool _field6;
    id _field7;
};

struct SDOMElement {
    struct RetainPtr<DOMElement> _field1;
};

struct SDOMHTMLInputElement {
    struct RetainPtr<DOMHTMLInputElement> m_webKitObject;
};

struct SDOMNode {
    struct RetainPtr<DOMNode> _field1;
};

struct SMutableArray {
    struct RetainPtr<const __CFArray*> m_cfObject;
};

struct SNotification {
    struct SString _field1;
    void *_field2;
    struct HashMap<Safari::SString, const void*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<const void*>> *_field3;
};

struct SNotifier<Safari::BookmarksController> {
    void **_vptr$SNotificationObserver;
    struct BookmarksController *m_notifiedObject;
    struct HashMap<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::BookmarksController, const Safari::SNotification&>, WTF::PairHash<Safari::SString, const void*>, WTF::HashTraits<std::pair<Safari::SString, const void*>>, WTF::HashTraits<std::mem_fun1_t<void, Safari::BookmarksController, const Safari::SNotification&>>> m_notifications;
};

struct SNotifier<Safari::ExtensionBuilderController> {
    void **_vptr$SNotificationObserver;
    struct ExtensionBuilderController *m_notifiedObject;
    struct HashMap<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::ExtensionBuilderController, const Safari::SNotification&>, WTF::PairHash<Safari::SString, const void*>, WTF::HashTraits<std::pair<Safari::SString, const void*>>, WTF::HashTraits<std::mem_fun1_t<void, Safari::ExtensionBuilderController, const Safari::SNotification&>>> m_notifications;
};

struct SNotifier<Safari::OffscreenSnapshotFetcher> {
    void **_vptr$SNotificationObserver;
    struct OffscreenSnapshotFetcher *m_notifiedObject;
    struct HashMap<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::OffscreenSnapshotFetcher, const Safari::SNotification&>, WTF::PairHash<Safari::SString, const void*>, WTF::HashTraits<std::pair<Safari::SString, const void*>>, WTF::HashTraits<std::mem_fun1_t<void, Safari::OffscreenSnapshotFetcher, const Safari::SNotification&>>> m_notifications;
};

struct SNotifier<Safari::TopSitesViewController> {
    void **_vptr$SNotificationObserver;
    struct TopSitesViewController *m_notifiedObject;
    struct HashMap<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::TopSitesViewController, const Safari::SNotification&>, WTF::PairHash<Safari::SString, const void*>, WTF::HashTraits<std::pair<Safari::SString, const void*>>, WTF::HashTraits<std::mem_fun1_t<void, Safari::TopSitesViewController, const Safari::SNotification&>>> m_notifications;
};

struct SObjCNotifier;

struct SString {
    struct RetainPtr<const __CFString*> m_cfObject;
};

struct STimer<Safari::BookmarksController> {
    void **_vptr$STimerBase;
    unsigned long long m_ID;
    _Bool m_isRepeating;
    struct BookmarksController *m_object;
    CDStruct_48e28a24 m_function;
};

struct STimer<Safari::FlowRootLayer> {
    void **_field1;
    unsigned long long _field2;
    _Bool _field3;
    struct FlowRootLayer *_field4;
    CDStruct_d65495c1 _field5;
};

struct STimer<Safari::TopSitesViewLayer> {
    void **_field1;
    unsigned long long _field2;
    _Bool _field3;
    struct TopSitesViewLayer *_field4;
    CDStruct_d65495c1 _field5;
};

struct SURL {
    struct RetainPtr<const __CFURL*> m_cfObject;
};

struct SWebFrame {
    struct RetainPtr<WebFrame> _field1;
};

struct SWebFrameLoadDelegate {
    void **_field1;
    struct RetainPtr<objc_object*> _field2;
};

struct SWebHistoryDelegate {
    void **_field1;
    struct RetainPtr<objc_object*> _field2;
};

struct SWebNavigationAction {
    struct RetainPtr<NSDictionary> _field1;
};

struct SWebPolicyDelegate {
    void **_field1;
    struct RetainPtr<objc_object*> _field2;
};

struct SWebResourceLoadDelegate {
    void **_field1;
    struct RetainPtr<objc_object*> _field2;
};

struct SWebScriptWorld {
    struct RetainPtr<WebScriptWorld> m_webKitObject;
};

struct SWebSerializedJSValue {
    struct RetainPtr<WebSerializedJSValue> _field1;
};

struct SWebUIDelegate {
    void **_field1;
    struct RetainPtr<objc_object*> _field2;
};

struct SWebURLRequest {
    struct RetainPtr<NSURLRequest> _field1;
};

struct SWebView {
    struct RetainPtr<WebView> m_webKitObject;
};

struct SafeBrowsingLastUpdateObserver {
    void **_field1;
    int _field2;
    id _field3;
};

struct SafeBrowsingObserverMac;

struct SnippetEditorController {
    struct OpaqueJSContext *_field1;
    struct SWebView _field2;
    NSWindow *_field3;
    SnippetEditorDelegate *_field4;
};

struct TextLayer;

struct TopSite;

struct TopSitesFlowDataSource;

struct TopSitesFlowViewControllerClient;

struct TopSitesRootLayer;

struct TopSitesSearchField {
    struct TopSitesSearchFieldClient *_field1;
    NSView *_field2;
    struct RetainPtr<InnerSearchFieldDelegate> _field3;
    struct RetainPtr<BlackSearchFieldController> _field4;
};

struct TopSitesSearchFieldClient {
    void **_field1;
};

struct TopSitesSwitcherControlLayer;

struct TopSitesViewLayer {
    void **_field1;
    int _field2;
    void **_field3;
    struct RetainPtr<VoiceOverInfo> _field4;
    struct Vector<Safari::AccessibilityAction, 0ul> _field5;
    struct RetainPtr<_CACFLayer*> _field6;
    struct Vector<WTF::RefPtr<Safari::CoreAnimationLayer>, 0ul> _field7;
    struct RefPtr<Safari::CoreAnimationLayer> _field8;
    struct SString _field9;
    int _field10;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    void **_field11;
    _Bool _field12;
    struct RefPtr<Safari::EventReceiver> _field13;
    struct RefPtr<Safari::EventReceiver> _field14;
    struct RefPtr<Safari::EventReceiver> _field15;
    struct Vector<WTF::RefPtr<Safari::EventReceiver>, 0ul> _field16;
    void **_field17;
    id _field18;
    struct TopSitesViewController *_field19;
    struct RefPtr<Safari::CoreAnimationLayer> _field20;
    struct RefPtr<Safari::TopSitesRootLayer> _field21;
    struct RefPtr<Safari::FlowRootLayer> _field22;
    struct RefPtr<Safari::TopSitesSwitcherControlLayer> _field23;
    struct RefPtr<Safari::TextLayer> _field24;
    struct RefPtr<Safari::TopSitesWindowBorderLayer> _field25;
    struct RefPtr<Safari::CoreAnimationLayer> _field26;
    struct RefPtr<Safari::FlowViewController> _field27;
    struct OwnPtr<Safari::TopSitesFlowViewControllerClient> _field28;
    struct OwnPtr<Safari::TopSitesFlowDataSource> _field29;
    struct TopSitesSearchField _field30;
    _Bool _field31;
    _Bool _field32;
    _Bool _field33;
    _Bool _field34;
    struct STimer<Safari::TopSitesViewLayer> _field35;
    struct STimer<Safari::TopSitesViewLayer> _field36;
};

struct TopSitesWindowBorderLayer;

struct URLCompletionController {
    void **_field1;
    int _field2;
    struct RetainPtr<CompletionControllerObjCAdapter> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct Vector<WTF::RefPtr<Safari::CompletionListItem>, 0ul> _field7;
    struct SString _field8;
    struct STimer<Safari::CompletionController> {
        void **_field1;
        unsigned long long _field2;
        _Bool _field3;
        struct CompletionController *_field4;
        CDStruct_d65495c1 _field5;
    } _field9;
    struct STimer<Safari::CompletionController> {
        void **_field1;
        unsigned long long _field2;
        _Bool _field3;
        struct CompletionController *_field4;
        CDStruct_d65495c1 _field5;
    } _field10;
    struct STimer<Safari::CompletionController> {
        void **_field1;
        unsigned long long _field2;
        _Bool _field3;
        struct CompletionController *_field4;
        CDStruct_d65495c1 _field5;
    } _field11;
    double _field12;
    unsigned long long _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    void **_field21;
    struct OwnPtr<Safari::CompletionListGenerator> _field22;
    struct RetainPtr<NSTextField> _field23;
};

struct Vector<OpaqueJSValue*, 0ul> {
    unsigned long long m_size;
    struct VectorBuffer<OpaqueJSValue*, 0ul> m_buffer;
};

struct Vector<Safari::AccessibilityAction, 0ul> {
    unsigned long long m_size;
    struct VectorBuffer<Safari::AccessibilityAction, 0ul> m_buffer;
};

struct Vector<Safari::AddressBookPropertyController::ElementData, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<Safari::AddressBookPropertyController::ElementData, 0ul> _field2;
};

struct Vector<Safari::BackForwardItemPersistentState, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<Safari::BackForwardItemPersistentState, 0ul> _field2;
};

struct Vector<Safari::Bookmark*, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<Safari::Bookmark*, 0ul> _field2;
};

struct Vector<Safari::FiringEventIterator, 1ul> {
    unsigned long long _field1;
    struct VectorBuffer<Safari::FiringEventIterator, 1ul> _field2;
};

struct Vector<Safari::SDOMElement, 0ul> {
    unsigned long long m_size;
    struct VectorBuffer<Safari::SDOMElement, 0ul> m_buffer;
};

struct Vector<Safari::SString, 0ul> {
    unsigned long long m_size;
    struct VectorBuffer<Safari::SString, 0ul> m_buffer;
};

struct Vector<WTF::OwnPtr<Safari::BrowserWindowPersistentState>, 0ul> {
    unsigned long long m_size;
    struct VectorBuffer<WTF::OwnPtr<Safari::BrowserWindowPersistentState>, 0ul> m_buffer;
};

struct Vector<WTF::RefPtr<Safari::AddressBookPropertyController>, 0ul> {
    unsigned long long m_size;
    struct VectorBuffer<WTF::RefPtr<Safari::AddressBookPropertyController>, 0ul> m_buffer;
};

struct Vector<WTF::RefPtr<Safari::BrowserTabPersistentState>, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<WTF::RefPtr<Safari::BrowserTabPersistentState>, 0ul> _field2;
};

struct Vector<WTF::RefPtr<Safari::CompletionListItem>, 0ul> {
    unsigned long long m_size;
    struct VectorBuffer<WTF::RefPtr<Safari::CompletionListItem>, 0ul> m_buffer;
};

struct Vector<WTF::RefPtr<Safari::CoreAnimationLayer>, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<WTF::RefPtr<Safari::CoreAnimationLayer>, 0ul> _field2;
};

struct Vector<WTF::RefPtr<Safari::EventReceiver>, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<WTF::RefPtr<Safari::EventReceiver>, 0ul> _field2;
};

struct Vector<WTF::RefPtr<Safari::ExtensionBar>, 0ul> {
    unsigned long long m_size;
    struct VectorBuffer<WTF::RefPtr<Safari::ExtensionBar>, 0ul> m_buffer;
};

struct Vector<WTF::RefPtr<Safari::FlowItem>, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<WTF::RefPtr<Safari::FlowItem>, 0ul> _field2;
};

struct Vector<WTF::RefPtr<Safari::FlowItemCell>, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<WTF::RefPtr<Safari::FlowItemCell>, 0ul> _field2;
};

struct Vector<WTF::RefPtr<Safari::GlobalHistoryItem>, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<WTF::RefPtr<Safari::GlobalHistoryItem>, 0ul> _field2;
};

struct Vector<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, 32ul> {
    unsigned long long m_size;
    struct VectorBuffer<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, 32ul> m_buffer;
};

struct Vector<WTF::RefPtr<Safari::SignatureCreator>, 0ul> {
    unsigned long long m_size;
    struct VectorBuffer<WTF::RefPtr<Safari::SignatureCreator>, 0ul> m_buffer;
};

struct Vector<WTF::RefPtr<Safari::Subscribable>, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<WTF::RefPtr<Safari::Subscribable>, 0ul> _field2;
};

struct Vector<int, 0ul> {
    unsigned long long m_size;
    struct VectorBuffer<int, 0ul> m_buffer;
};

struct Vector<unsigned char, 0ul> {
    unsigned long long m_size;
    struct VectorBuffer<unsigned char, 0ul> m_buffer;
};

struct VectorBuffer<OpaqueJSValue*, 0ul> {
    struct OpaqueJSValue **m_buffer;
    unsigned long long m_capacity;
};

struct VectorBuffer<Safari::AccessibilityAction, 0ul> {
    int *m_buffer;
    unsigned long long m_capacity;
};

struct VectorBuffer<Safari::AddressBookPropertyController::ElementData, 0ul> {
    struct ElementData *_field1;
    unsigned long long _field2;
};

struct VectorBuffer<Safari::BackForwardItemPersistentState, 0ul> {
    struct BackForwardItemPersistentState *_field1;
    unsigned long long _field2;
};

struct VectorBuffer<Safari::Bookmark*, 0ul> {
    struct Bookmark **_field1;
    unsigned long long _field2;
};

struct VectorBuffer<Safari::FiringEventIterator, 1ul> {
    struct FiringEventIterator *_field1;
    unsigned long long _field2;
    struct AlignedBuffer<32ul, 8ul> _field3;
};

struct VectorBuffer<Safari::SDOMElement, 0ul> {
    struct SDOMElement *m_buffer;
    unsigned long long m_capacity;
};

struct VectorBuffer<Safari::SString, 0ul> {
    struct SString *m_buffer;
    unsigned long long m_capacity;
};

struct VectorBuffer<WTF::OwnPtr<Safari::BrowserWindowPersistentState>, 0ul> {
    struct OwnPtr<Safari::BrowserWindowPersistentState> *m_buffer;
    unsigned long long m_capacity;
};

struct VectorBuffer<WTF::RefPtr<Safari::AddressBookPropertyController>, 0ul> {
    struct RefPtr<Safari::AddressBookPropertyController> *m_buffer;
    unsigned long long m_capacity;
};

struct VectorBuffer<WTF::RefPtr<Safari::BrowserTabPersistentState>, 0ul> {
    struct RefPtr<Safari::BrowserTabPersistentState> *_field1;
    unsigned long long _field2;
};

struct VectorBuffer<WTF::RefPtr<Safari::CompletionListItem>, 0ul> {
    struct RefPtr<Safari::CompletionListItem> *m_buffer;
    unsigned long long m_capacity;
};

struct VectorBuffer<WTF::RefPtr<Safari::CoreAnimationLayer>, 0ul> {
    struct RefPtr<Safari::CoreAnimationLayer> *_field1;
    unsigned long long _field2;
};

struct VectorBuffer<WTF::RefPtr<Safari::EventReceiver>, 0ul> {
    struct RefPtr<Safari::EventReceiver> *_field1;
    unsigned long long _field2;
};

struct VectorBuffer<WTF::RefPtr<Safari::ExtensionBar>, 0ul> {
    struct RefPtr<Safari::ExtensionBar> *m_buffer;
    unsigned long long m_capacity;
};

struct VectorBuffer<WTF::RefPtr<Safari::FlowItem>, 0ul> {
    struct RefPtr<Safari::FlowItem> *_field1;
    unsigned long long _field2;
};

struct VectorBuffer<WTF::RefPtr<Safari::FlowItemCell>, 0ul> {
    struct RefPtr<Safari::FlowItemCell> *_field1;
    unsigned long long _field2;
};

struct VectorBuffer<WTF::RefPtr<Safari::GlobalHistoryItem>, 0ul> {
    struct RefPtr<Safari::GlobalHistoryItem> *_field1;
    unsigned long long _field2;
};

struct VectorBuffer<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, 32ul> {
    struct RefPtr<Safari::OffscreenSnapshotRequest> *m_buffer;
    unsigned long long m_capacity;
    struct AlignedBuffer<256ul, 8ul> m_inlineBuffer;
};

struct VectorBuffer<WTF::RefPtr<Safari::SignatureCreator>, 0ul> {
    struct RefPtr<Safari::SignatureCreator> *m_buffer;
    unsigned long long m_capacity;
};

struct VectorBuffer<WTF::RefPtr<Safari::Subscribable>, 0ul> {
    struct RefPtr<Safari::Subscribable> *_field1;
    unsigned long long _field2;
};

struct VectorBuffer<int, 0ul> {
    int *m_buffer;
    unsigned long long m_capacity;
};

struct VectorBuffer<unsigned char, 0ul> {
    char *m_buffer;
    unsigned long long m_capacity;
};

struct WebPageProxy;

struct WebSearchCompletionController {
    void **_field1;
    int _field2;
    struct RetainPtr<CompletionControllerObjCAdapter> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct Vector<WTF::RefPtr<Safari::CompletionListItem>, 0ul> _field7;
    struct SString _field8;
    struct STimer<Safari::CompletionController> {
        void **_field1;
        unsigned long long _field2;
        _Bool _field3;
        struct CompletionController *_field4;
        CDStruct_d65495c1 _field5;
    } _field9;
    struct STimer<Safari::CompletionController> {
        void **_field1;
        unsigned long long _field2;
        _Bool _field3;
        struct CompletionController *_field4;
        CDStruct_d65495c1 _field5;
    } _field10;
    struct STimer<Safari::CompletionController> {
        void **_field1;
        unsigned long long _field2;
        _Bool _field3;
        struct CompletionController *_field4;
        CDStruct_d65495c1 _field5;
    } _field11;
    double _field12;
    unsigned long long _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    void **_field21;
    struct OwnPtr<Safari::CompletionListGenerator> _field22;
    struct RetainPtr<NSTextField> _field23;
};

struct _CACFLayer;

struct _CAView;

struct _CGLContextObject {
    struct __GLIContextRec *_field1;
    struct __GLIFunctionDispatchRec {
        void *_field1;
        void *_field2;
        void *_field3;
        void *_field4;
        void *_field5;
        void *_field6;
        void *_field7;
        void *_field8;
        void *_field9;
        void *_field10;
        void *_field11;
        void *_field12;
        void *_field13;
        void *_field14;
        void *_field15;
        void *_field16;
        void *_field17;
        void *_field18;
        void *_field19;
        void *_field20;
        void *_field21;
        void *_field22;
        void *_field23;
        void *_field24;
        void *_field25;
        void *_field26;
        void *_field27;
        void *_field28;
        void *_field29;
        void *_field30;
        void *_field31;
        void *_field32;
        void *_field33;
        void *_field34;
        void *_field35;
        void *_field36;
        void *_field37;
        void *_field38;
        void *_field39;
        void *_field40;
        void *_field41;
        void *_field42;
        void *_field43;
        void *_field44;
        void *_field45;
        void *_field46;
        void *_field47;
        void *_field48;
        void *_field49;
        void *_field50;
        void *_field51;
        void *_field52;
        void *_field53;
        void *_field54;
        void *_field55;
        void *_field56;
        void *_field57;
        void *_field58;
        void *_field59;
        void *_field60;
        void *_field61;
        void *_field62;
        void *_field63;
        void *_field64;
        void *_field65;
        void *_field66;
        void *_field67;
        void *_field68;
        void *_field69;
        void *_field70;
        void *_field71;
        void *_field72;
        void *_field73;
        void *_field74;
        void *_field75;
        void *_field76;
        void *_field77;
        void *_field78;
        void *_field79;
        void *_field80;
        void *_field81;
        void *_field82;
        void *_field83;
        void *_field84;
        void *_field85;
        void *_field86;
        void *_field87;
        void *_field88;
        void *_field89;
        void *_field90;
        void *_field91;
        void *_field92;
        void *_field93;
        void *_field94;
        void *_field95;
        void *_field96;
        void *_field97;
        void *_field98;
        void *_field99;
        void *_field100;
        void *_field101;
        void *_field102;
        void *_field103;
        void *_field104;
        void *_field105;
        void *_field106;
        void *_field107;
        void *_field108;
        void *_field109;
        void *_field110;
        void *_field111;
        void *_field112;
        void *_field113;
        void *_field114;
        void *_field115;
        void *_field116;
        void *_field117;
        void *_field118;
        void *_field119;
        void *_field120;
        void *_field121;
        void *_field122;
        void *_field123;
        void *_field124;
        void *_field125;
        void *_field126;
        void *_field127;
        void *_field128;
        void *_field129;
        void *_field130;
        void *_field131;
        void *_field132;
        void *_field133;
        void *_field134;
        void *_field135;
        void *_field136;
        void *_field137;
        void *_field138;
        void *_field139;
        void *_field140;
        void *_field141;
        void *_field142;
        void *_field143;
        void *_field144;
        void *_field145;
        void *_field146;
        void *_field147;
        void *_field148;
        void *_field149;
        void *_field150;
        void *_field151;
        void *_field152;
        void *_field153;
        void *_field154;
        void *_field155;
        void *_field156;
        void *_field157;
        void *_field158;
        void *_field159;
        void *_field160;
        void *_field161;
        void *_field162;
        void *_field163;
        void *_field164;
        void *_field165;
        void *_field166;
        void *_field167;
        void *_field168;
        void *_field169;
        void *_field170;
        void *_field171;
        void *_field172;
        void *_field173;
        void *_field174;
        void *_field175;
        void *_field176;
        void *_field177;
        void *_field178;
        void *_field179;
        void *_field180;
        void *_field181;
        void *_field182;
        void *_field183;
        void *_field184;
        void *_field185;
        void *_field186;
        void *_field187;
        void *_field188;
        void *_field189;
        void *_field190;
        void *_field191;
        void *_field192;
        void *_field193;
        void *_field194;
        void *_field195;
        void *_field196;
        void *_field197;
        void *_field198;
        void *_field199;
        void *_field200;
        void *_field201;
        void *_field202;
        void *_field203;
        void *_field204;
        void *_field205;
        void *_field206;
        void *_field207;
        void *_field208;
        void *_field209;
        void *_field210;
        void *_field211;
        void *_field212;
        void *_field213;
        void *_field214;
        void *_field215;
        void *_field216;
        void *_field217;
        void *_field218;
        void *_field219;
        void *_field220;
        void *_field221;
        void *_field222;
        void *_field223;
        void *_field224;
        void *_field225;
        void *_field226;
        void *_field227;
        void *_field228;
        void *_field229;
        void *_field230;
        void *_field231;
        void *_field232;
        void *_field233;
        void *_field234;
        void *_field235;
        void *_field236;
        void *_field237;
        void *_field238;
        void *_field239;
        void *_field240;
        void *_field241;
        void *_field242;
        void *_field243;
        void *_field244;
        void *_field245;
        void *_field246;
        void *_field247;
        void *_field248;
        void *_field249;
        void *_field250;
        void *_field251;
        void *_field252;
        void *_field253;
        void *_field254;
        void *_field255;
        void *_field256;
        void *_field257;
        void *_field258;
        void *_field259;
        void *_field260;
        void *_field261;
        void *_field262;
        void *_field263;
        void *_field264;
        void *_field265;
        void *_field266;
        void *_field267;
        void *_field268;
        void *_field269;
        void *_field270;
        void *_field271;
        void *_field272;
        void *_field273;
        void *_field274;
        void *_field275;
        void *_field276;
        void *_field277;
        void *_field278;
        void *_field279;
        void *_field280;
        void *_field281;
        void *_field282;
        void *_field283;
        void *_field284;
        void *_field285;
        void *_field286;
        void *_field287;
        void *_field288;
        void *_field289;
        void *_field290;
        void *_field291;
        void *_field292;
        void *_field293;
        void *_field294;
        void *_field295;
        void *_field296;
        void *_field297;
        void *_field298;
        void *_field299;
        void *_field300;
        void *_field301;
        void *_field302;
        void *_field303;
        void *_field304;
        void *_field305;
        void *_field306;
        void *_field307;
        void *_field308;
        void *_field309;
        void *_field310;
        void *_field311;
        void *_field312;
        void *_field313;
        void *_field314;
        void *_field315;
        void *_field316;
        void *_field317;
        void *_field318;
        void *_field319;
        void *_field320;
        void *_field321;
        void *_field322;
        void *_field323;
        void *_field324;
        void *_field325;
        void *_field326;
        void *_field327;
        void *_field328;
        void *_field329;
        void *_field330;
        void *_field331;
        void *_field332;
        void *_field333;
        void *_field334;
        void *_field335;
        void *_field336;
        void *_field337;
        void *_field338;
        void *_field339;
        void *_field340;
        void *_field341;
        void *_field342;
        void *_field343;
        void *_field344;
        void *_field345;
        void *_field346;
        void *_field347;
        void *_field348;
        void *_field349;
        void *_field350;
        void *_field351;
        void *_field352;
        void *_field353;
        void *_field354;
        void *_field355;
        void *_field356;
        void *_field357;
        void *_field358;
        void *_field359;
        void *_field360;
        void *_field361;
        void *_field362;
        void *_field363;
        void *_field364;
        void *_field365;
        void *_field366;
        void *_field367;
        void *_field368;
        void *_field369;
        void *_field370;
        void *_field371;
        void *_field372;
        void *_field373;
        void *_field374;
        void *_field375;
        void *_field376;
        void *_field377;
        void *_field378;
        void *_field379;
        void *_field380;
        void *_field381;
        void *_field382;
        void *_field383;
        void *_field384;
        void *_field385;
        void *_field386;
        void *_field387;
        void *_field388;
        void *_field389;
        void *_field390;
        void *_field391;
        void *_field392;
        void *_field393;
        void *_field394;
        void *_field395;
        void *_field396;
        void *_field397;
        void *_field398;
        void *_field399;
        void *_field400;
        void *_field401;
        void *_field402;
        void *_field403;
        void *_field404;
        void *_field405;
        void *_field406;
        void *_field407;
        void *_field408;
        void *_field409;
        void *_field410;
        void *_field411;
        void *_field412;
        void *_field413;
        void *_field414;
        void *_field415;
        void *_field416;
        void *_field417;
        void *_field418;
        void *_field419;
        void *_field420;
        void *_field421;
        void *_field422;
        void *_field423;
        void *_field424;
        void *_field425;
        void *_field426;
        void *_field427;
        void *_field428;
        void *_field429;
        void *_field430;
        void *_field431;
        void *_field432;
        void *_field433;
        void *_field434;
        void *_field435;
        void *_field436;
        void *_field437;
        void *_field438;
        void *_field439;
        void *_field440;
        void *_field441;
        void *_field442;
        void *_field443;
        void *_field444;
        void *_field445;
        void *_field446;
        void *_field447;
        void *_field448;
        void *_field449;
        void *_field450;
        void *_field451;
        void *_field452;
        void *_field453;
        void *_field454;
        void *_field455;
        void *_field456;
        void *_field457;
        void *_field458;
        void *_field459;
        void *_field460;
        void *_field461;
        void *_field462;
        void *_field463;
        void *_field464;
        void *_field465;
        void *_field466;
        void *_field467;
        void *_field468;
        void *_field469;
        void *_field470;
        void *_field471;
        void *_field472;
        void *_field473;
        void *_field474;
        void *_field475;
        void *_field476;
        void *_field477;
        void *_field478;
        void *_field479;
        void *_field480;
        void *_field481;
        void *_field482;
        void *_field483;
        void *_field484;
        void *_field485;
        void *_field486;
        void *_field487;
        void *_field488;
        void *_field489;
        void *_field490;
        void *_field491;
        void *_field492;
        void *_field493;
        void *_field494;
        void *_field495;
        void *_field496;
        void *_field497;
        void *_field498;
        void *_field499;
        void *_field500;
        void *_field501;
        void *_field502;
        void *_field503;
        void *_field504;
        void *_field505;
        void *_field506;
        void *_field507;
        void *_field508;
        void *_field509;
        void *_field510;
        void *_field511;
        void *_field512;
        void *_field513;
        void *_field514;
        void *_field515;
        void *_field516;
        void *_field517;
        void *_field518;
        void *_field519;
        void *_field520;
        void *_field521;
        void *_field522;
        void *_field523;
        void *_field524;
        void *_field525;
        void *_field526;
        void *_field527;
        void *_field528;
        void *_field529;
        void *_field530;
        void *_field531;
        void *_field532;
        void *_field533;
        void *_field534;
        void *_field535;
        void *_field536;
        void *_field537;
        void *_field538;
        void *_field539;
        void *_field540;
        void *_field541;
        void *_field542;
        void *_field543;
        void *_field544;
        void *_field545;
        void *_field546;
        void *_field547;
        void *_field548;
        void *_field549;
        void *_field550;
        void *_field551;
        void *_field552;
        void *_field553;
        void *_field554;
        void *_field555;
        void *_field556;
        void *_field557;
        void *_field558;
        void *_field559;
        void *_field560;
        void *_field561;
        void *_field562;
        void *_field563;
        void *_field564;
        void *_field565;
        void *_field566;
        void *_field567;
        void *_field568;
        void *_field569;
        void *_field570;
        void *_field571;
        void *_field572;
        void *_field573;
        void *_field574;
        void *_field575;
        void *_field576;
        void *_field577;
        void *_field578;
        void *_field579;
        void *_field580;
        void *_field581;
        void *_field582;
        void *_field583;
        void *_field584;
        void *_field585;
        void *_field586;
        void *_field587;
        void *_field588;
        void *_field589;
        void *_field590;
        void *_field591;
        void *_field592;
        void *_field593;
        void *_field594;
        void *_field595;
        void *_field596;
        void *_field597;
        void *_field598;
        void *_field599;
        void *_field600;
        void *_field601;
        void *_field602;
        void *_field603;
        void *_field604;
        void *_field605;
        void *_field606;
        void *_field607;
        void *_field608;
        void *_field609;
        void *_field610;
        void *_field611;
        void *_field612;
        void *_field613;
        void *_field614;
        void *_field615;
        void *_field616;
        void *_field617;
        void *_field618;
        void *_field619;
        void *_field620;
        void *_field621;
        void *_field622;
        void *_field623;
        void *_field624;
        void *_field625;
        void *_field626;
        void *_field627;
        void *_field628;
        void *_field629;
        void *_field630;
        void *_field631;
        void *_field632;
        void *_field633;
        void *_field634;
        void *_field635;
        void *_field636;
        void *_field637;
        void *_field638;
        void *_field639;
        void *_field640;
        void *_field641;
        void *_field642;
        void *_field643;
        void *_field644;
        void *_field645;
        void *_field646;
        void *_field647;
        void *_field648;
        void *_field649;
        void *_field650;
        void *_field651;
        void *_field652;
        void *_field653;
        void *_field654;
        void *_field655;
        void *_field656;
        void *_field657;
        void *_field658;
        void *_field659;
        void *_field660;
        void *_field661;
        void *_field662;
        void *_field663;
        void *_field664;
        void *_field665;
        void *_field666;
        void *_field667;
        void *_field668;
        void *_field669;
        void *_field670;
        void *_field671;
        void *_field672;
        void *_field673;
        void *_field674;
        void *_field675;
        void *_field676;
        void *_field677;
        void *_field678;
        void *_field679;
        void *_field680;
        void *_field681;
        void *_field682;
        void *_field683;
        void *_field684;
        void *_field685;
        void *_field686;
        void *_field687;
        void *_field688;
        void *_field689;
        void *_field690;
        void *_field691;
        void *_field692;
        void *_field693;
        void *_field694;
        void *_field695;
        void *_field696;
        void *_field697;
        void *_field698;
        void *_field699;
        void *_field700;
        void *_field701;
        void *_field702;
        void *_field703;
        void *_field704;
        void *_field705;
        void *_field706;
        void *_field707;
        void *_field708;
        void *_field709;
        void *_field710;
        void *_field711;
        void *_field712;
        void *_field713;
        void *_field714;
        void *_field715;
        void *_field716;
        void *_field717;
        void *_field718;
        void *_field719;
        void *_field720;
        void *_field721;
        void *_field722;
        void *_field723;
        void *_field724;
        void *_field725;
        void *_field726;
        void *_field727;
        void *_field728;
        void *_field729;
        void *_field730;
        void *_field731;
        void *_field732;
        void *_field733;
        void *_field734;
        void *_field735;
        void *_field736;
        void *_field737;
        void *_field738;
        void *_field739;
        void *_field740;
        void *_field741;
        void *_field742;
        void *_field743;
        void *_field744;
        void *_field745;
        void *_field746;
        void *_field747;
        void *_field748;
        void *_field749;
        void *_field750;
        void *_field751;
        void *_field752;
        void *_field753;
        void *_field754;
        void *_field755;
        void *_field756;
        void *_field757;
        void *_field758;
        void *_field759;
        void *_field760;
    } _field2;
    struct _CGLPrivateObject *_field3;
    void *_field4;
};

struct _CGLPrivateObject;

struct _LKViewPrivate {
    struct _CAView *_field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    int _field5;
    int _field6;
    unsigned int :1;
    unsigned int :1;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct cssm_data {
    unsigned long long _field1;
    char *_field2;
};

struct pair<Safari::Extension*, WTF::HashMap<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::Vector<WTF::RefPtr<Safari::RegisteredEventListener>, 1ul>*>>*>;

struct pair<Safari::SString, WTF::RefPtr<Safari::Bookmark>>;

struct pair<Safari::SString, WTF::RefPtr<Safari::OffscreenSnapshotRequest>>;

struct pair<Safari::SString, WTF::Vector<WTF::RefPtr<Safari::Bookmark>, 0ul>*>;

struct pair<Safari::SString, unsigned int>;

struct pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::BookmarksController, const Safari::SNotification&>>;

struct pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::ExtensionBuilderController, const Safari::SNotification&>>;

struct pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::OffscreenSnapshotFetcher, const Safari::SNotification&>>;

struct pair<std::pair<Safari::SString, const void*>, std::mem_fun1_t<void, Safari::TopSitesViewController, const Safari::SNotification&>>;

struct pair<unsigned int, WTF::RefPtr<Safari::OffscreenSnapshotRequest>>;

struct pair<unsigned int, std::pair<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, unsigned int>>;

#if 0
// Names with conflicting types:
typedef struct ?<Safari::CompletionController> {
    void **_field1;
    unsigned long long _field2;
    _Bool _field3;
    struct CompletionController *_field4;
    CDStruct_d65495c1 _field5;
} STimer_f920707f;

typedef struct ?<Safari::CompletionController> {
    void **_vptr$STimerBase;
    unsigned long long m_ID;
    _Bool m_isRepeating;
    struct CompletionController *m_object;
    CDStruct_48e28a24 m_function;
} STimer_7d4eea56;

typedef struct ?<Safari::OffscreenSnapshotFetcher> {
    void **_field1;
    unsigned long long _field2;
    _Bool _field3;
    struct OffscreenSnapshotFetcher *_field4;
    CDStruct_d65495c1 _field5;
} STimer_9999e58a;

typedef struct ?<Safari::OffscreenSnapshotFetcher> {
    void **_vptr$STimerBase;
    unsigned long long m_ID;
    _Bool m_isRepeating;
    struct OffscreenSnapshotFetcher *m_object;
    CDStruct_48e28a24 m_function;
} STimer_63ba9b86;

typedef struct ?<Safari::TopSitesViewController> {
    void **_field1;
    unsigned long long _field2;
    _Bool _field3;
    struct TopSitesViewController *_field4;
    CDStruct_d65495c1 _field5;
} STimer_bfbbfafb;

typedef struct ?<Safari::TopSitesViewController> {
    void **_vptr$STimerBase;
    unsigned long long m_ID;
    _Bool m_isRepeating;
    struct TopSitesViewController *m_object;
    CDStruct_48e28a24 m_function;
} STimer_44605971;

typedef struct {
    void **_field1;
    id _field2;
    int _field3;
    struct TopSitesViewLayer *_field4;
    _Bool _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    struct SNotifier<Safari::TopSitesViewController> _field8;
    struct STimer<Safari::TopSitesViewController> {
        void **_field1;
        unsigned long long _field2;
        _Bool _field3;
        struct TopSitesViewController *_field4;
        CDStruct_d65495c1 _field5;
    } _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    struct STimer<Safari::TopSitesViewController> {
        void **_field1;
        unsigned long long _field2;
        _Bool _field3;
        struct TopSitesViewController *_field4;
        CDStruct_d65495c1 _field5;
    } _field13;
    struct RefPtr<Safari::TopSite> _field14;
    _Bool _field15;
    _Bool _field16;
    struct STimer<Safari::TopSitesViewController> {
        void **_field1;
        unsigned long long _field2;
        _Bool _field3;
        struct TopSitesViewController *_field4;
        CDStruct_d65495c1 _field5;
    } _field17;
    double _field18;
    struct SString _field19;
    _Bool _field20;
    unsigned long long _field21;
    unsigned long long _field22;
    struct RetainPtr<CGImage*> _field23;
} TopSitesViewController_1aeacc6d;

typedef struct {
    void **_field1;
    void **_field2;
    int _field3;
    struct OffscreenSnapshotFetcherClient *_field4;
    struct SNotifier<Safari::OffscreenSnapshotFetcher> _field5;
    struct Vector<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, 32ul> _field6;
    struct Vector<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, 32ul> _field7;
    struct HashMap<Safari::SString, WTF::RefPtr<Safari::OffscreenSnapshotRequest>, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::RefPtr<Safari::OffscreenSnapshotRequest>>> _field8;
    struct HashSet<Safari::SString, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>> _field9;
    struct HashMap<unsigned int, WTF::RefPtr<Safari::OffscreenSnapshotRequest>, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::RefPtr<Safari::OffscreenSnapshotRequest>>> _field10;
    struct HashMap<unsigned int, std::pair<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, unsigned int>, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<std::pair<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, unsigned int>>> _field11;
    struct OwnPtr<Safari::MessageReceivingPort> _field12;
    struct FileHandle _field13;
    struct STimer<Safari::OffscreenSnapshotFetcher> {
        void **_field1;
        unsigned long long _field2;
        _Bool _field3;
        struct OffscreenSnapshotFetcher *_field4;
        CDStruct_d65495c1 _field5;
    } _field14;
    _Bool _field15;
    _Bool _field16;
    struct RetainPtr<SnapshotFetcherTaskMonitor> _field17;
    struct RetainPtr<SnapshotFetcherWebPreferencesObserver> _field18;
} OffscreenSnapshotFetcher_ab566e0e;

typedef struct {
    void **_field1;
    void **_field2;
    int _field3;
    struct OffscreenSnapshotFetcherClient *_field4;
    struct SNotifier<Safari::OffscreenSnapshotFetcher> _field5;
    struct Vector<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, 32ul> _field6;
    struct Vector<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, 32ul> _field7;
    struct HashMap<Safari::SString, WTF::RefPtr<Safari::OffscreenSnapshotRequest>, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>, WTF::HashTraits<WTF::RefPtr<Safari::OffscreenSnapshotRequest>>> _field8;
    struct HashSet<Safari::SString, Safari::SCFObjectSubclassHash<Safari::SString>, WTF::HashTraits<Safari::SString>> _field9;
    struct HashMap<unsigned int, WTF::RefPtr<Safari::OffscreenSnapshotRequest>, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::RefPtr<Safari::OffscreenSnapshotRequest>>> _field10;
    struct HashMap<unsigned int, std::pair<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, unsigned int>, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<std::pair<WTF::RefPtr<Safari::OffscreenSnapshotRequest>, unsigned int>>> _field11;
    struct OwnPtr<Safari::MessageReceivingPort> _field12;
    struct FileHandle _field13;
    STimer_63ba9b86 _field14;
    _Bool _field15;
    _Bool _field16;
    struct RetainPtr<SnapshotFetcherTaskMonitor> _field17;
    struct RetainPtr<SnapshotFetcherWebPreferencesObserver> _field18;
} OffscreenSnapshotFetcher_c33c7276;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    long long *_field1;
} CDStruct_d65495c1;

typedef struct {
    void *__pfn;
    long long __delta;
} CDStruct_48e28a24;

typedef struct {
    int nodes;
    int bytes;
} CDStruct_81cc75c8;

typedef struct {
    unsigned int _field1;
    struct *_field2;
} CDStruct_166d2db6;

// Template types
typedef struct HashSet<WTF::RefPtr<Safari::GlobalHistoryItem>, WTF::PtrHash<WTF::RefPtr<Safari::GlobalHistoryItem>>, WTF::HashTraits<WTF::RefPtr<Safari::GlobalHistoryItem>>> {
    struct HashTable<WTF::RefPtr<Safari::GlobalHistoryItem>, WTF::RefPtr<Safari::GlobalHistoryItem>, WTF::IdentityExtractor<WTF::RefPtr<Safari::GlobalHistoryItem>>, WTF::PtrHash<WTF::RefPtr<Safari::GlobalHistoryItem>>, WTF::HashTraits<WTF::RefPtr<Safari::GlobalHistoryItem>>, WTF::HashTraits<WTF::RefPtr<Safari::GlobalHistoryItem>>> _field1;
} HashSet_07facf1c;

typedef struct PassOwnPtr<Safari::ReaderController> {
    struct ReaderController *_field1;
} PassOwnPtr_a3225cba;

typedef struct PassRefPtr<ClippedNode> {
    struct ClippedNode *_field1;
} PassRefPtr_b02e6e9c;

typedef struct PassRefPtr<Safari::Bookmark> {
    struct Bookmark *_field1;
} PassRefPtr_83ad4302;

typedef struct PassRefPtr<Safari::BrowserTabPersistentState> {
    struct BrowserTabPersistentState *_field1;
} PassRefPtr_84a5eb56;

typedef struct PassRefPtr<Safari::CompletionListItem> {
    struct CompletionListItem *_field1;
} PassRefPtr_46da3955;

typedef struct PassRefPtr<Safari::CoreAnimationLayer> {
    struct CoreAnimationLayer *_field1;
} PassRefPtr_0865e063;

typedef struct Vector<Safari::Bookmark*, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<Safari::Bookmark*, 0ul> _field2;
} Vector_3eff2a34;

typedef struct Vector<WTF::RefPtr<Safari::BrowserTabPersistentState>, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<WTF::RefPtr<Safari::BrowserTabPersistentState>, 0ul> _field2;
} Vector_55a9d292;

typedef struct Vector<WTF::RefPtr<Safari::ExtensionBar>, 0ul> {
    unsigned long long m_size;
    struct VectorBuffer<WTF::RefPtr<Safari::ExtensionBar>, 0ul> m_buffer;
} Vector_961780af;

typedef struct Vector<WTF::RefPtr<Safari::GlobalHistoryItem>, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<WTF::RefPtr<Safari::GlobalHistoryItem>, 0ul> _field2;
} Vector_be06175b;

typedef struct Vector<WTF::RefPtr<Safari::Subscribable>, 0ul> {
    unsigned long long _field1;
    struct VectorBuffer<WTF::RefPtr<Safari::Subscribable>, 0ul> _field2;
} Vector_53fd3c72;

#pragma mark -

/*
 * File: Safari
 * Arch: Intel x86-64 (x86_64)
 *
 *       Objective-C Garbage Collection: Unsupported
 */

@protocol Activity <NSObject>
- (id)title;
- (id)URL;
- (void)open;
- (void)download;
- (id)statusString;
- (int)stage;
- (int)displayOrder;
@end

@protocol ActivityWithChildren <Activity>
- (unsigned int)numberOfChildren;
- (id)childAtIndex:(unsigned int)arg1;
- (void)sortChildren;
@end

@protocol BarBackgroundDelegate <NSObject>

@optional
- (void)barBackgroundDidEndLiveResize:(id)arg1;
- (void)barBackgroundWillStartLiveResize:(id)arg1;
@end

@protocol BookmarkSource
- (void)refreshContents;
- (BOOL)canCopyContents;
- (BOOL)canDeleteContents;
- (BOOL)deleteContentItems:(id)arg1 withParentWindow:(id)arg2 undoManager:(id)arg3;
- (BOOL)contentItemCanBeSearchResult:(id)arg1;
- (BOOL)contentItemCanHaveChildren:(id)arg1;
- (id)child:(unsigned int)arg1 ofContentItem:(id)arg2;
- (unsigned int)numberOfChildrenOfContentItem:(id)arg1;
- (id)parentOfContentItem:(id)arg1;
- (void)didCollapseContentItem:(id)arg1;
- (void)didExpandContentItem:(id)arg1;
- (id)contentItemsToInitiallyExpand;
- (id)contentItemsToExpandOnReload;
- (id)bookmarkFromContentItem:(id)arg1;
- (BOOL)canGoToContentItem:(id)arg1;
- (void)goToContentItem:(id)arg1 tabLocation:(id)arg2;
- (void)goToContentItemInNewWindow:(id)arg1;
- (void)goToContentItemInNewTab:(id)arg1 tabLocation:(id)arg2;
- (void)goToChildrenOfContentItemInTabs:(id)arg1 tabLocation:(id)arg2;
- (id)bookmarksFromContentItems:(id)arg1;
- (id)bookmarkSourceImage;
- (id)addressStringForContentItem:(id)arg1;
- (id)titleStringForContentItem:(id)arg1;
- (id)imageForContentItem:(id)arg1;
- (BOOL)shouldShowRSSLabelForContentItem:(id)arg1;
- (BOOL)isFilteredFromOtherSources;
- (void)addBookmarkSourceMenu:(id)arg1 withTabLocation:(id)arg2;
- (id)tabLocationForMenu:(id)arg1;
- (void)removeBookmarkSourceMenu:(id)arg1;
- (id)bookmarkSourceMenuTitle;
@end

@protocol BrowserWindowDelegate <ExtendedWindowDelegate>
- (id)browserWindowTitleBarURL:(id)arg1;
- (void)browserWindow:(id)arg1 shouldGoToURL:(id)arg2;
@end

@protocol CancellableActivity <Activity>
- (void)cancel:(id)arg1;
@end

@protocol ExtendedWindowDelegate <NSWindowDelegate>

@optional
- (BOOL)window:(id)arg1 performKeyEquivalent:(id)arg2;
- (BOOL)window:(id)arg1 willHandleKeyEvent:(id)arg2;
- (BOOL)window:(id)arg1 willHandleMouseDownEvent:(id)arg2;
- (void)_safari_windowDidEndLiveResize;
@end

@protocol FileLockerDelegate
- (int)fileLocker:(id)arg1 actionForApparentlyAbandonedLock:(id)arg2 onAttempt:(int)arg3;
- (void)fileLocker:(id)arg1 lockWasStolen:(id)arg2;
@end

@protocol LockableFirstResponder
- (void)setFirstResponderIsLocked:(BOOL)arg1;
- (BOOL)firstResponderIsLocked;
@end

@protocol MorphingDragImageDropTarget <NSObject>
- (unsigned long long)morphingDragImage:(id)arg1 draggingEntered:(id)arg2;
- (unsigned long long)morphingDragImage:(id)arg1 draggingUpdated:(id)arg2;
- (void)morphingDragImage:(id)arg1 draggingExited:(id)arg2;
- (BOOL)morphingDragImage:(id)arg1 performDragOperation:(id)arg2;
@end

@protocol NSAnimationDelegate <NSObject>

@optional
- (BOOL)animationShouldStart:(id)arg1;
- (void)animationDidStop:(id)arg1;
- (void)animationDidEnd:(id)arg1;
- (float)animation:(id)arg1 valueForProgress:(float)arg2;
- (void)animation:(id)arg1 didReachProgressMark:(float)arg2;
@end

@protocol NSApplicationDelegate <NSObject>

@optional
- (unsigned long long)applicationShouldTerminate:(id)arg1;
- (BOOL)application:(id)arg1 openFile:(id)arg2;
- (void)application:(id)arg1 openFiles:(id)arg2;
- (BOOL)application:(id)arg1 openTempFile:(id)arg2;
- (BOOL)applicationShouldOpenUntitledFile:(id)arg1;
- (BOOL)applicationOpenUntitledFile:(id)arg1;
- (BOOL)application:(id)arg1 openFileWithoutUI:(id)arg2;
- (BOOL)application:(id)arg1 printFile:(id)arg2;
- (unsigned long long)application:(id)arg1 printFiles:(id)arg2 withSettings:(id)arg3 showPrintPanels:(BOOL)arg4;
- (BOOL)applicationShouldTerminateAfterLastWindowClosed:(id)arg1;
- (BOOL)applicationShouldHandleReopen:(id)arg1 hasVisibleWindows:(BOOL)arg2;
- (id)applicationDockMenu:(id)arg1;
- (id)application:(id)arg1 willPresentError:(id)arg2;
- (void)applicationWillFinishLaunching:(id)arg1;
- (void)applicationDidFinishLaunching:(id)arg1;
- (void)applicationWillHide:(id)arg1;
- (void)applicationDidHide:(id)arg1;
- (void)applicationWillUnhide:(id)arg1;
- (void)applicationDidUnhide:(id)arg1;
- (void)applicationWillBecomeActive:(id)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)applicationWillResignActive:(id)arg1;
- (void)applicationDidResignActive:(id)arg1;
- (void)applicationWillUpdate:(id)arg1;
- (void)applicationDidUpdate:(id)arg1;
- (void)applicationWillTerminate:(id)arg1;
- (void)applicationDidChangeScreenParameters:(id)arg1;
@end

@protocol NSComboBoxDataSource <NSObject>

@optional
- (long long)numberOfItemsInComboBox:(id)arg1;
- (id)comboBox:(id)arg1 objectValueForItemAtIndex:(long long)arg2;
- (unsigned long long)comboBox:(id)arg1 indexOfItemWithStringValue:(id)arg2;
- (id)comboBox:(id)arg1 completedString:(id)arg2;
@end

@protocol NSControlTextEditingDelegate <NSObject>

@optional
- (BOOL)control:(id)arg1 textShouldBeginEditing:(id)arg2;
- (BOOL)control:(id)arg1 textShouldEndEditing:(id)arg2;
- (BOOL)control:(id)arg1 didFailToFormatString:(id)arg2 errorDescription:(id)arg3;
- (void)control:(id)arg1 didFailToValidatePartialString:(id)arg2 errorDescription:(id)arg3;
- (BOOL)control:(id)arg1 isValidObject:(id)arg2;
- (BOOL)control:(id)arg1 textView:(id)arg2 doCommandBySelector:(SEL)arg3;
- (id)control:(id)arg1 textView:(id)arg2 completions:(id)arg3 forPartialWordRange:(struct _NSRange)arg4 indexOfSelectedItem:(long long *)arg5;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSDraggingInfo
- (id)draggingDestinationWindow;
- (unsigned long long)draggingSourceOperationMask;
- (struct CGPoint)draggingLocation;
- (struct CGPoint)draggedImageLocation;
- (id)draggedImage;
- (id)draggingPasteboard;
- (id)draggingSource;
- (long long)draggingSequenceNumber;
- (void)slideDraggedImageTo:(struct CGPoint)arg1;
- (id)namesOfPromisedFilesDroppedAtDestination:(id)arg1;
@end

@protocol NSFileManagerDelegate <NSObject>
@end

@protocol NSMenuDelegate <NSObject>

@optional
- (void)menuNeedsUpdate:(id)arg1;
- (long long)numberOfItemsInMenu:(id)arg1;
- (BOOL)menu:(id)arg1 updateItem:(id)arg2 atIndex:(long long)arg3 shouldCancel:(BOOL)arg4;
- (BOOL)menuHasKeyEquivalent:(id)arg1 forEvent:(id)arg2 target:(id *)arg3 action:(SEL *)arg4;
- (void)menuWillOpen:(id)arg1;
- (void)menuDidClose:(id)arg1;
- (void)menu:(id)arg1 willHighlightItem:(id)arg2;
- (struct CGRect)confinementRectForMenu:(id)arg1 onScreen:(id)arg2;
@end

@protocol NSNetServiceBrowserDelegate <NSObject>

@optional
- (void)netServiceBrowserWillSearch:(id)arg1;
- (void)netServiceBrowserDidStopSearch:(id)arg1;
- (void)netServiceBrowser:(id)arg1 didNotSearch:(id)arg2;
- (void)netServiceBrowser:(id)arg1 didFindDomain:(id)arg2 moreComing:(BOOL)arg3;
- (void)netServiceBrowser:(id)arg1 didFindService:(id)arg2 moreComing:(BOOL)arg3;
- (void)netServiceBrowser:(id)arg1 didRemoveDomain:(id)arg2 moreComing:(BOOL)arg3;
- (void)netServiceBrowser:(id)arg1 didRemoveService:(id)arg2 moreComing:(BOOL)arg3;
@end

@protocol NSNetServiceDelegate <NSObject>

@optional
- (void)netServiceWillPublish:(id)arg1;
- (void)netServiceDidPublish:(id)arg1;
- (void)netService:(id)arg1 didNotPublish:(id)arg2;
- (void)netServiceWillResolve:(id)arg1;
- (void)netServiceDidResolveAddress:(id)arg1;
- (void)netService:(id)arg1 didNotResolve:(id)arg2;
- (void)netServiceDidStop:(id)arg1;
- (void)netService:(id)arg1 didUpdateTXTRecordData:(id)arg2;
@end

@protocol NSObject
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (Class)superclass;
- (Class)class;
- (id)self;
- (struct _NSZone *)zone;
- (id)performSelector:(SEL)arg1;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (BOOL)isProxy;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)conformsToProtocol:(id)arg1;
- (BOOL)respondsToSelector:(SEL)arg1;
- (id)retain;
- (oneway void)release;
- (id)autorelease;
- (unsigned long long)retainCount;
- (id)description;
@end

@protocol NSOpenSavePanelDelegate <NSObject>

@optional
- (BOOL)panel:(id)arg1 shouldEnableURL:(id)arg2;
- (BOOL)panel:(id)arg1 validateURL:(id)arg2 error:(id *)arg3;
- (void)panel:(id)arg1 didChangeToDirectoryURL:(id)arg2;
- (id)panel:(id)arg1 userEnteredFilename:(id)arg2 confirmed:(BOOL)arg3;
- (void)panel:(id)arg1 willExpand:(BOOL)arg2;
- (void)panelSelectionDidChange:(id)arg1;
@end

@protocol NSOutlineViewDataSource <NSObject>

@optional
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (void)outlineView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 byItem:(id)arg4;
- (id)outlineView:(id)arg1 itemForPersistentObject:(id)arg2;
- (id)outlineView:(id)arg1 persistentObjectForItem:(id)arg2;
- (void)outlineView:(id)arg1 sortDescriptorsDidChange:(id)arg2;
- (BOOL)outlineView:(id)arg1 writeItems:(id)arg2 toPasteboard:(id)arg3;
- (unsigned long long)outlineView:(id)arg1 validateDrop:(id)arg2 proposedItem:(id)arg3 proposedChildIndex:(long long)arg4;
- (BOOL)outlineView:(id)arg1 acceptDrop:(id)arg2 item:(id)arg3 childIndex:(long long)arg4;
- (id)outlineView:(id)arg1 namesOfPromisedFilesDroppedAtDestination:(id)arg2 forDraggedItems:(id)arg3;
@end

@protocol NSPrintPanelAccessorizing
- (id)localizedSummaryItems;

@optional
- (id)keyPathsForValuesAffectingPreview;
@end

@protocol NSSplitViewDelegate <NSObject>

@optional
- (BOOL)splitView:(id)arg1 canCollapseSubview:(id)arg2;
- (BOOL)splitView:(id)arg1 shouldCollapseSubview:(id)arg2 forDoubleClickOnDividerAtIndex:(long long)arg3;
- (double)splitView:(id)arg1 constrainMinCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(id)arg1 constrainMaxCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(id)arg1 constrainSplitPosition:(double)arg2 ofSubviewAt:(long long)arg3;
- (void)splitView:(id)arg1 resizeSubviewsWithOldSize:(struct CGSize)arg2;
- (BOOL)splitView:(id)arg1 shouldAdjustSizeOfSubview:(id)arg2;
- (BOOL)splitView:(id)arg1 shouldHideDividerAtIndex:(long long)arg2;
- (struct CGRect)splitView:(id)arg1 effectiveRect:(struct CGRect)arg2 forDrawnRect:(struct CGRect)arg3 ofDividerAtIndex:(long long)arg4;
- (struct CGRect)splitView:(id)arg1 additionalEffectiveRectOfDividerAtIndex:(long long)arg2;
- (void)splitViewWillResizeSubviews:(id)arg1;
- (void)splitViewDidResizeSubviews:(id)arg1;
@end

@protocol NSTabViewDelegate <NSObject>

@optional
- (BOOL)tabView:(id)arg1 shouldSelectTabViewItem:(id)arg2;
- (void)tabView:(id)arg1 willSelectTabViewItem:(id)arg2;
- (void)tabView:(id)arg1 didSelectTabViewItem:(id)arg2;
- (void)tabViewDidChangeNumberOfTabViewItems:(id)arg1;
@end

@protocol NSTableViewDataSource <NSObject>

@optional
- (long long)numberOfRowsInTableView:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (void)tableView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (void)tableView:(id)arg1 sortDescriptorsDidChange:(id)arg2;
- (BOOL)tableView:(id)arg1 writeRowsWithIndexes:(id)arg2 toPasteboard:(id)arg3;
- (unsigned long long)tableView:(id)arg1 validateDrop:(id)arg2 proposedRow:(long long)arg3 proposedDropOperation:(unsigned long long)arg4;
- (BOOL)tableView:(id)arg1 acceptDrop:(id)arg2 row:(long long)arg3 dropOperation:(unsigned long long)arg4;
- (id)tableView:(id)arg1 namesOfPromisedFilesDroppedAtDestination:(id)arg2 forDraggedRowsWithIndexes:(id)arg3;
@end

@protocol NSTableViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (BOOL)tableView:(id)arg1 shouldEditTableColumn:(id)arg2 row:(long long)arg3;
- (BOOL)selectionShouldChangeInTableView:(id)arg1;
- (BOOL)tableView:(id)arg1 shouldSelectRow:(long long)arg2;
- (id)tableView:(id)arg1 selectionIndexesForProposedSelection:(id)arg2;
- (BOOL)tableView:(id)arg1 shouldSelectTableColumn:(id)arg2;
- (void)tableView:(id)arg1 mouseDownInHeaderOfTableColumn:(id)arg2;
- (void)tableView:(id)arg1 didClickTableColumn:(id)arg2;
- (void)tableView:(id)arg1 didDragTableColumn:(id)arg2;
- (id)tableView:(id)arg1 toolTipForCell:(id)arg2 rect:(struct CGRect *)arg3 tableColumn:(id)arg4 row:(long long)arg5 mouseLocation:(struct CGPoint)arg6;
- (double)tableView:(id)arg1 heightOfRow:(long long)arg2;
- (id)tableView:(id)arg1 typeSelectStringForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)tableView:(id)arg1 nextTypeSelectMatchFromRow:(long long)arg2 toRow:(long long)arg3 forString:(id)arg4;
- (BOOL)tableView:(id)arg1 shouldTypeSelectForEvent:(id)arg2 withCurrentSearchString:(id)arg3;
- (BOOL)tableView:(id)arg1 shouldShowCellExpansionForTableColumn:(id)arg2 row:(long long)arg3;
- (BOOL)tableView:(id)arg1 shouldTrackCell:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (id)tableView:(id)arg1 dataCellForTableColumn:(id)arg2 row:(long long)arg3;
- (BOOL)tableView:(id)arg1 isGroupRow:(long long)arg2;
- (double)tableView:(id)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (BOOL)tableView:(id)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (void)tableViewSelectionDidChange:(id)arg1;
- (void)tableViewColumnDidMove:(id)arg1;
- (void)tableViewColumnDidResize:(id)arg1;
- (void)tableViewSelectionIsChanging:(id)arg1;
@end

@protocol NSTextDelegate <NSObject>

@optional
- (BOOL)textShouldBeginEditing:(id)arg1;
- (BOOL)textShouldEndEditing:(id)arg1;
- (void)textDidBeginEditing:(id)arg1;
- (void)textDidEndEditing:(id)arg1;
- (void)textDidChange:(id)arg1;
@end

@protocol NSTextFieldDelegate <NSControlTextEditingDelegate>
@end

@protocol NSTextInput
- (void)insertText:(id)arg1;
- (void)doCommandBySelector:(SEL)arg1;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;
- (void)unmarkText;
- (BOOL)hasMarkedText;
- (long long)conversationIdentifier;
- (id)attributedSubstringFromRange:(struct _NSRange)arg1;
- (struct _NSRange)markedRange;
- (struct _NSRange)selectedRange;
- (struct CGRect)firstRectForCharacterRange:(struct _NSRange)arg1;
- (unsigned long long)characterIndexForPoint:(struct CGPoint)arg1;
- (id)validAttributesForMarkedText;
@end

@protocol NSTextViewDelegate <NSTextDelegate>

@optional
- (BOOL)textView:(id)arg1 clickedOnLink:(id)arg2 atIndex:(unsigned long long)arg3;
- (void)textView:(id)arg1 clickedOnCell:(id)arg2 inRect:(struct CGRect)arg3 atIndex:(unsigned long long)arg4;
- (void)textView:(id)arg1 doubleClickedOnCell:(id)arg2 inRect:(struct CGRect)arg3 atIndex:(unsigned long long)arg4;
- (void)textView:(id)arg1 draggedCell:(id)arg2 inRect:(struct CGRect)arg3 event:(id)arg4 atIndex:(unsigned long long)arg5;
- (id)textView:(id)arg1 writablePasteboardTypesForCell:(id)arg2 atIndex:(unsigned long long)arg3;
- (BOOL)textView:(id)arg1 writeCell:(id)arg2 atIndex:(unsigned long long)arg3 toPasteboard:(id)arg4 type:(id)arg5;
- (struct _NSRange)textView:(id)arg1 willChangeSelectionFromCharacterRange:(struct _NSRange)arg2 toCharacterRange:(struct _NSRange)arg3;
- (id)textView:(id)arg1 willChangeSelectionFromCharacterRanges:(id)arg2 toCharacterRanges:(id)arg3;
- (BOOL)textView:(id)arg1 shouldChangeTextInRanges:(id)arg2 replacementStrings:(id)arg3;
- (id)textView:(id)arg1 shouldChangeTypingAttributes:(id)arg2 toAttributes:(id)arg3;
- (void)textViewDidChangeSelection:(id)arg1;
- (void)textViewDidChangeTypingAttributes:(id)arg1;
- (id)textView:(id)arg1 willDisplayToolTip:(id)arg2 forCharacterAtIndex:(unsigned long long)arg3;
- (id)textView:(id)arg1 completions:(id)arg2 forPartialWordRange:(struct _NSRange)arg3 indexOfSelectedItem:(long long *)arg4;
- (BOOL)textView:(id)arg1 shouldChangeTextInRange:(struct _NSRange)arg2 replacementString:(id)arg3;
- (BOOL)textView:(id)arg1 doCommandBySelector:(SEL)arg2;
- (long long)textView:(id)arg1 shouldSetSpellingState:(long long)arg2 range:(struct _NSRange)arg3;
- (id)textView:(id)arg1 menu:(id)arg2 forEvent:(id)arg3 atIndex:(unsigned long long)arg4;
- (id)textView:(id)arg1 willCheckTextInRange:(struct _NSRange)arg2 options:(id)arg3 types:(unsigned long long *)arg4;
- (id)textView:(id)arg1 didCheckTextInRange:(struct _NSRange)arg2 types:(unsigned long long)arg3 options:(id)arg4 results:(id)arg5 orthography:(id)arg6 wordCount:(long long)arg7;
- (BOOL)textView:(id)arg1 clickedOnLink:(id)arg2;
- (void)textView:(id)arg1 clickedOnCell:(id)arg2 inRect:(struct CGRect)arg3;
- (void)textView:(id)arg1 doubleClickedOnCell:(id)arg2 inRect:(struct CGRect)arg3;
- (void)textView:(id)arg1 draggedCell:(id)arg2 inRect:(struct CGRect)arg3 event:(id)arg4;
- (id)undoManagerForTextView:(id)arg1;
@end

@protocol NSToolbarDelegate <NSObject>

@optional
- (id)toolbar:(id)arg1 itemForItemIdentifier:(id)arg2 willBeInsertedIntoToolbar:(BOOL)arg3;
- (id)toolbarDefaultItemIdentifiers:(id)arg1;
- (id)toolbarAllowedItemIdentifiers:(id)arg1;
- (id)toolbarSelectableItemIdentifiers:(id)arg1;
- (void)toolbarWillAddItem:(id)arg1;
- (void)toolbarDidRemoveItem:(id)arg1;
@end

@protocol NSURLConnectionDelegate <NSObject>
@end

@protocol NSUserInterfaceValidations
- (BOOL)validateUserInterfaceItem:(id)arg1;
@end

@protocol NSValidatedUserInterfaceItem
- (SEL)action;
- (long long)tag;
@end

@protocol NSWindowDelegate <NSObject>

@optional
- (BOOL)windowShouldClose:(id)arg1;
- (id)windowWillReturnFieldEditor:(id)arg1 toObject:(id)arg2;
- (struct CGSize)windowWillResize:(id)arg1 toSize:(struct CGSize)arg2;
- (struct CGRect)windowWillUseStandardFrame:(id)arg1 defaultFrame:(struct CGRect)arg2;
- (BOOL)windowShouldZoom:(id)arg1 toFrame:(struct CGRect)arg2;
- (id)windowWillReturnUndoManager:(id)arg1;
- (struct CGRect)window:(id)arg1 willPositionSheet:(id)arg2 usingRect:(struct CGRect)arg3;
- (BOOL)window:(id)arg1 shouldPopUpDocumentPathMenu:(id)arg2;
- (BOOL)window:(id)arg1 shouldDragDocumentWithEvent:(id)arg2 from:(struct CGPoint)arg3 withPasteboard:(id)arg4;
- (void)windowDidResize:(id)arg1;
- (void)windowDidExpose:(id)arg1;
- (void)windowWillMove:(id)arg1;
- (void)windowDidMove:(id)arg1;
- (void)windowDidBecomeKey:(id)arg1;
- (void)windowDidResignKey:(id)arg1;
- (void)windowDidBecomeMain:(id)arg1;
- (void)windowDidResignMain:(id)arg1;
- (void)windowWillClose:(id)arg1;
- (void)windowWillMiniaturize:(id)arg1;
- (void)windowDidMiniaturize:(id)arg1;
- (void)windowDidDeminiaturize:(id)arg1;
- (void)windowDidUpdate:(id)arg1;
- (void)windowDidChangeScreen:(id)arg1;
- (void)windowDidChangeScreenProfile:(id)arg1;
- (void)windowWillBeginSheet:(id)arg1;
- (void)windowDidEndSheet:(id)arg1;
- (void)windowWillStartLiveResize:(id)arg1;
- (void)windowDidEndLiveResize:(id)arg1;
@end

@protocol OldSpotlightDataSource <NSObject>
- (id)itemsToAddForSpotlightDataType:(id)arg1;
- (id)itemsToDeleteForSpotlightDataType:(id)arg1;
- (id)allItemsForSpotlightDataType:(id)arg1;
- (void)resetAdditionsAndDeletionsForSpotlightDataType:(id)arg1;
- (void)updateWillBeginForSpotlightDataType:(id)arg1;
- (void)updateDidEndForSpotlightDataType:(id)arg1;
@end

@protocol OldSpotlightDataWriter <NSObject>
- (void)deleteSpotlightCacheFilesForItems:(id)arg1 ofDataType:(id)arg2 inDirectory:(id)arg3;
- (void)addSpotlightCacheFilesForItems:(id)arg1 ofDataType:(id)arg2 inDirectory:(id)arg3;
- (id)fileExtensionForDataType:(id)arg1;
- (id)URLToVisitFromSpotlightCacheFile:(id)arg1 ofDataType:(id)arg2;
@end

@protocol ReopensAtLaunch
+ (void)reopen;
@end

@protocol SafariSyndicationDelegate <NSObject>
- (void)bookmarkFeed:(id)arg1;
- (void)redisplayPages:(id)arg1;
- (void)feed:(id)arg1 unreadCountChanged:(int)arg2;
- (void)bookmarkUUID:(id)arg1 unreadCountChanged:(int)arg2;
- (BOOL)isBookmarkedURL:(id)arg1;
@end

@protocol SafariWebDocumentCustomSearchField <WebDocumentView>
- (BOOL)canFocusSearchField;
- (void)focusSearchField;
- (BOOL)canFindNext;
- (void)findNext;
- (BOOL)canFindPrevious;
- (void)findPrevious;
@end

@protocol SharedLocalizedStrings
- (id)sharedLocalizedStringsBundle;
@end

@protocol SynBookmark <NSObject>
- (id)title;
- (id)URLString;
- (id)UUID;
- (id)children;
@end

@protocol WebDocumentDOM <NSObject>
- (id)DOMDocument;
- (BOOL)canSaveAsWebArchive;
@end

@protocol WebDocumentPDF <WebDocumentText>
- (id)PDFDocument;
@end

@protocol WebDocumentRepresentation <NSObject>
- (void)setDataSource:(id)arg1;
- (void)receivedData:(id)arg1 withDataSource:(id)arg2;
- (void)receivedError:(id)arg1 withDataSource:(id)arg2;
- (void)finishedLoadingWithDataSource:(id)arg1;
- (BOOL)canProvideDocumentSource;
- (id)documentSource;
- (id)title;
@end

@protocol WebDocumentSearching <NSObject>
- (BOOL)searchFor:(id)arg1 direction:(BOOL)arg2 caseSensitive:(BOOL)arg3 wrap:(BOOL)arg4;
@end

@protocol WebDocumentSelection <WebDocumentText>
- (id)pasteboardTypesForSelection;
- (void)writeSelectionWithPasteboardTypes:(id)arg1 toPasteboard:(id)arg2;
- (id)selectionTextRects;
- (struct CGRect)selectionRect;
- (id)selectionImageForcingBlackText:(BOOL)arg1;
- (struct CGRect)selectionImageRect;
- (id)selectionView;
@end

@protocol WebDocumentText <NSObject>
- (BOOL)supportsTextEncoding;
- (id)string;
- (id)attributedString;
- (id)selectedString;
- (id)selectedAttributedString;
- (void)selectAll;
- (void)deselectAll;
@end

@protocol WebDocumentView <NSObject>
- (void)setDataSource:(id)arg1;
- (void)dataSourceUpdated:(id)arg1;
- (void)setNeedsLayout:(BOOL)arg1;
- (void)layout;
- (void)viewWillMoveToHostWindow:(id)arg1;
- (void)viewDidMoveToHostWindow;
@end

@protocol WebFormDelegate <NSObject>
- (void)textFieldDidBeginEditing:(id)arg1 inFrame:(id)arg2;
- (void)textFieldDidEndEditing:(id)arg1 inFrame:(id)arg2;
- (void)textDidChangeInTextField:(id)arg1 inFrame:(id)arg2;
- (void)textDidChangeInTextArea:(id)arg1 inFrame:(id)arg2;
- (BOOL)textField:(id)arg1 doCommandBySelector:(SEL)arg2 inFrame:(id)arg3;
- (BOOL)textField:(id)arg1 shouldHandleEvent:(id)arg2 inFrame:(id)arg3;
- (void)frame:(id)arg1 sourceFrame:(id)arg2 willSubmitForm:(id)arg3 withValues:(id)arg4 submissionListener:(id)arg5;
@end

@protocol WebGeolocationProvider <NSObject>
- (void)registerWebView:(id)arg1;
- (void)unregisterWebView:(id)arg1;
- (id)lastPosition;
@end

@interface ABHomePagesController : BookmarkSource
{
    NSArray *_bookmarks;
    NSArray *_modDates;
}

+ (id)sharedController;
- (void)dealloc;
- (void)openAddressBook:(id)arg1;
- (void)refreshContents;
- (id)child:(unsigned int)arg1 ofContentItem:(id)arg2;
- (unsigned int)numberOfChildrenOfContentItem:(id)arg1;
- (id)addressStringForContentItem:(id)arg1;
- (id)titleStringForContentItem:(id)arg1;
- (void)menuNeedsUpdate:(id)arg1;
- (id)bookmarkSourceMenuTitle;
- (id)bookmarkSourceImage;

@end

@interface AcceptedCookies : SheetWithTableController
{
    NSTableColumn *sortColumn;
    NSSearchField *searchField;
    NSButton *doneButton;
    NSArray *_allCookies;
    NSArray *_displayedCookies;
}

- (void *)sortFunction;
- (id)selection;
- (void)setSelection:(id)arg1;
- (void)setDisplayedCookies:(id)arg1;
- (id)searchWordsFromString:(id)arg1;
- (BOOL)matchCookie:(id)arg1 stringArray:(id)arg2;
- (id)getMatches:(id)arg1 query:(id)arg2;
- (void)_filterCookies;
- (void)updateCookieData;
- (void)setSortColumn:(id)arg1;
- (void)_updateTextCellForColumnWithIdentifier:(id)arg1;
- (void)awakeFromNib;
- (void)dealloc;
- (void)removeSelectedItems:(id)arg1;
- (BOOL)confirmRemoveAllItems;
- (void)removeAllItems:(id)arg1;
- (void)showSheetInWindow:(id)arg1;
- (void)hideSheet:(id)arg1;
- (long long)numberOfRowsInTableView:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (void)tableView:(id)arg1 didClickTableColumn:(id)arg2;
- (void)cookiesChangedNotificationHandler:(id)arg1;
- (void)registerForCookieChangeNotifications;
- (void)unregisterForCookieChangeNotifications;
- (void)search:(id)arg1;
- (BOOL)control:(id)arg1 textView:(id)arg2 doCommandBySelector:(SEL)arg3;

@end

@interface SiteDatabase : NSObject
{
    NSString *_identifier;
    NSString *_displayName;
    WebSecurityOrigin *_securityOrigin;
    unsigned int _size;
}

- (id)initWithIdentifier:(id)arg1;
- (void)dealloc;
- (void)setDisplayName:(id)arg1;
- (id)displayName;
- (id)identifier;
- (void)setSize:(unsigned int)arg1;
- (unsigned int)size;
- (void)setSecurityOrigin:(id)arg1;
- (id)securityOrigin;
- (long long)compareByDisplayName:(id)arg1;

@end

@interface AcceptedDatabases : SheetWithTableController
{
    NSMutableArray *_origins;
    NSMutableDictionary *_databasesForOrigins;
    BOOL _refreshIsPending;
}

- (void)dealloc;
- (void)awakeFromNib;
- (void)removeSelectedItems:(id)arg1;
- (void)showSheetInWindow:(id)arg1;
- (void)hideSheet:(id)arg1;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (void)outlineView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 item:(id)arg4;

@end

@interface AcceptedServices : SheetWithTableController
{
}

@end

@interface AccessibilityButtonInfo : AccessibilityChildInfo
{
}

+ (id)infoWithParent:(id)arg1 identifier:(unsigned int)arg2;
- (id)initWithParent:(id)arg1 identifier:(unsigned int)arg2;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityActionDescription:(id)arg1;
- (void)accessibilityPerformAction:(id)arg1;

@end

@interface AccessibilityChildInfo : NSObject
{
    NSString *_role;
    id _parent;
    unsigned int _identifier;
}

+ (id)infoWithRole:(id)arg1 parent:(id)arg2 identifier:(unsigned int)arg3;
- (id)accessibilityAttributeNames;
- (id)initWithRole:(id)arg1 parent:(id)arg2 identifier:(unsigned int)arg3;
- (void)dealloc;
- (unsigned int)identifier;
- (BOOL)isEqual:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (void)accessibilitySetValue:(id)arg1 forAttribute:(id)arg2;
- (id)accessibilityActionNames;
- (id)accessibilityActionDescription:(id)arg1;
- (void)accessibilityPerformAction:(id)arg1;
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (id)accessibilityFocusedUIElement;

@end

@interface ActivityViewer : NSWindowController <ReopensAtLaunch>
{
    OutlineViewPlus *outlineView;
    NSPanel *activityPanel;
    NSMutableArray *_topLevelItems;
    NSMutableSet *_pendingReloadDeepItems;
    NSMutableSet *_pendingReloadFlatItems;
    NSMutableSet *_pendingExpansionItems;
    BOOL _nibLoaded;
    BOOL _reloadPending;
    NSColor *_successColor;
    NSColor *_failureColor;
    NSColor *_neutralColor;
    NSImage *_stopImage;
    NSImage *_stopPressedImage;
    NSFont *_fontForTopLevelItems;
    NSFont *_fontForAllOtherItems;
    BOOL _isVisible;
}

+ (id)sharedActivityViewer;
+ (void)reopen;
+ (BOOL)isVisible;
- (id)init;
- (void)dealloc;
- (id)_stopImage;
- (id)_stopPressedImage;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (BOOL)canCancelActivity:(id)arg1;
- (id)selectedActivitiesThatCanBeCancelled;
- (void)outlineView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 item:(id)arg4;
- (void)_cancelClickedItem:(id)arg1;
- (void)_goToClickedItem:(id)arg1;
- (BOOL)outlineView:(id)arg1 selectionShouldChangeFromMouseDownInRow:(long long)arg2 tableColumn:(id)arg3;
- (void)setShouldExpand:(BOOL)arg1 fromExpandCollapseNotification:(id)arg2;
- (void)outlineViewItemDidExpand:(id)arg1;
- (void)outlineViewItemDidCollapse:(id)arg1;
- (void)sortAll;
- (void)_reloadNow;
- (void)_startPendingReloadIfNecessary;
- (void)_reloadItemSoonDeep:(id)arg1;
- (void)_reloadItemSoonFlat:(id)arg1;
- (void)flatChangeMadeToActivity:(id)arg1;
- (void)deepChangeMadeToActivity:(id)arg1;
- (void)removedChildrenOfActivity:(id)arg1;
- (void)cut:(id)arg1;
- (BOOL)canCopy;
- (void)copy:(id)arg1;
- (void)paste:(id)arg1;
- (void)delete:(id)arg1;
- (BOOL)canCancel;
- (void)stopLoading:(id)arg1;
- (void)cancel:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (void)windowWillClose:(id)arg1;
- (struct CGRect)windowWillUseStandardFrame:(id)arg1 defaultFrame:(struct CGRect)arg2;
- (void)_setUpWindow;
- (void)_ensureNibLoaded;
- (void)expandPendingItems;
- (void)showActivity:(id)arg1;
- (void)addTopLevelActivity:(id)arg1;
- (void)removeTopLevelActivity:(id)arg1;
- (void)windowWillOrderOnScreen:(id)arg1;
- (void)windowDidOrderOffScreen:(id)arg1;

@end

@interface CachedMe : NSObject
{
    struct RefPtr<Safari::AddressBookEntry> _cachedMe;
    BOOL _meNeedsUpdate;
}

- (void)_addressBookDataChanged:(id)arg1;
- (id)init;
- (void)dealloc;
- (struct AddressBookEntry *)me;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface AddressBookEntryView : NSView
{
    struct AddressBookEntryViewController *_controller;
    NSMutableArray *_propertyViews;
}

- (void)dealloc;
- (BOOL)isFlipped;
- (void)setController:(struct AddressBookEntryViewController *)arg1;
- (struct AddressBookEntryViewController *)controller;
- (void)reloadData;
- (void)sizeToFit;

@end

@interface AddressBookLabelPopUpCell : NSPopUpButtonCell
{
    NSString *_cachedTitle;
    double _cachedTitleWidth;
}

- (struct CGSize)cellSize;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;
- (void)drawTitleWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)initTextCell:(id)arg1 pullsDown:(BOOL)arg2;

@end

@interface AddressBookPropertyView : NSView
{
    struct RefPtr<Safari::AddressBookPropertyController> _controller;
    NSPopUpButton *_captionPopUp;
    NSTextField *_valueField;
}

- (BOOL)isFlipped;
- (id)initWithFrame:(struct CGRect)arg1 controller:(struct AddressBookPropertyController *)arg2;
- (void)sizeToFit;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface AdvancedPreferences : PreferencesModule
{
    NSPopUpButton *styleSheetPopUp;
    NSButton *minFontSizeCheckbox;
    NSComboBox *minFontSizeComboBox;
    NSButton *tabToAllButton;
    NSTextField *tabToAllOptionHint;
    NSButton *openProxyPreferencesButton;
    NSButton *includeDevelopMenuButton;
}

- (id)highResolutionImageName;
- (void)openProxyPreferences:(id)arg1;
- (void)setStyleSheetPathPreference:(id)arg1;
- (id)styleSheetPathPreference;
- (void)updateStyleSheetMenu;
- (void)takeStyleSheetFromMenuItem:(id)arg1;
- (void)disableUserStyleSheet:(id)arg1;
- (void)choseStyleSheetFromPanel:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)chooseStyleSheetFromFileBrowser:(id)arg1;
- (void)awakeFromNib;
- (void)updateMinFontSizeViews;
- (void)updateTabToAllViews;
- (void)keyboardUIModeDidChange:(id)arg1;
- (void)updateProxiesButton;
- (void)toggleUseMinimumFontSize:(id)arg1;
- (int)sanityCheckMinimumFontSize:(int)arg1;
- (void)takeMinimumFontSizeFrom:(id)arg1;
- (void)comboBoxSelectionDidChange:(id)arg1;
- (void)control:(id)arg1 didFailToValidatePartialString:(id)arg2 errorDescription:(id)arg3;
- (void)toggleTabToAll:(id)arg1;
- (void)toggleIncludeDevelopMenu:(id)arg1;
- (void)updateIncludeDevelopMenuButton;
- (void)initializeFromDefaults;
- (BOOL)isResizable;
- (void)moduleWillBeRemoved;
- (void)moduleWasInstalled;
- (id)helpAnchor;

@end

@interface AppController : NSObject <NSApplicationDelegate, NSMenuDelegate, NSUserInterfaceValidations>
{
    NSMenu *historyMenu;
    NSMenuItem *viewMenuItem;
    NSMenuItem *bookmarksMenuItem;
    NSMenuItem *windowMenuItem;
    NSMenuItem *selectNextTabMenuItem;
    NSMenuItem *selectPreviousTabMenuItem;
    NSMenuItem *goBackMenuItem;
    NSMenuItem *goForwardMenuItem;
    NSMenuItem *textEncodingMenuItem;
    SFAuthorization *parentalControlAuthorization;
    NSMenu *_dockMenu;
    NSMenuItem *_shiftedCloseMenuItem;
    NSMenuItem *_shiftedCloseAllMenuItem;
    struct OwnPtr<Safari::BrowserWindowPersistentState> _lastClosedWindowState;
    BrowserSessionPersistentState *_lastSessionState;
    struct OwnPtr<Safari::CoalescedAsynchronousWriter> _saveSessionStateWriter;
    struct OwnPtr<Safari::SObjCNotifier> _notifier;
    BOOL _closeKeyEquivalentClosesTab;
    BOOL _textEncodingMenuLoaded;
    BOOL _awaitingModalCloseAllConfirmation;
    BOOL _isTerminating;
    BOOL _lastSessionStateComputed;
    BOOL _startingBonjourSearch;
    BOOL _shouldSaveEmptySession;
    BOOL _hasFinishedLaunching;
    NSMutableArray *_deferredURLsToOpen;
    NSMutableArray *_deferredURLsAsHTML;
    int _bookmarksMenuItemIndex;
}

+ (id)sharedAppController;
+ (BOOL)hasAppleIPAddress;
+ (void)initialize;
+ (void)muteAudio:(BOOL)arg1;
+ (id)webWidgetIdentifier;
- (void)awakeFromNib;
- (void)dealloc;
- (void)applicationDidBecomeActive:(id)arg1;
- (BOOL)applicationShouldOpenUntitledFile:(id)arg1;
- (BOOL)applicationOpenUntitledFile:(id)arg1;
- (void)applicationDidFinishLaunching:(id)arg1;
- (void)openURL:(id)arg1 forcingHTMLMIMEType:(BOOL)arg2;
- (unsigned long long)applicationShouldTerminate:(id)arg1;
- (void)applicationWillTerminate:(id)arg1;
- (BOOL)isTerminating;
- (BOOL)application:(id)arg1 openFile:(id)arg2;
- (void)application:(id)arg1 runTest:(unsigned long long)arg2 duration:(double)arg3;
- (BOOL)applicationShouldHandleReopen:(id)arg1 hasVisibleWindows:(BOOL)arg2;
- (id)applicationDockMenu:(id)arg1;
- (void)menuNeedsUpdate:(id)arg1;
- (BOOL)menuHasKeyEquivalent:(id)arg1 forEvent:(id)arg2 target:(id *)arg3 action:(SEL *)arg4;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (void)addBookmarksForTabs:(id)arg1;
- (void)stopLoading:(id)arg1;
- (void)reloadObeyingLocationField:(id)arg1;
- (void)confirmEmptyCache:(id)arg1;
- (void)confirmResetSafari:(id)arg1;
- (void)exportBookmarks:(id)arg1;
- (void)importBookmarks:(id)arg1;
- (void)consolidateTabsAndWindows:(id)arg1;
- (void)reopenLastSession:(id)arg1;
- (void)reopenLastWindow:(id)arg1;
- (void)showAcknowledgments:(id)arg1;
- (void)showActivity:(id)arg1;
- (void)showDownloads:(id)arg1;
- (void)showPlugins:(id)arg1;
- (void)showPreferences:(id)arg1;
- (void)showShortcuts:(id)arg1;
- (void)toggleJavaScriptCanNotOpenWindows:(id)arg1;
- (void)togglePrivateBrowsing:(id)arg1;
- (void)togglePrivateBrowsingWithoutConfirmation:(id)arg1;
- (void)toggleZoomTextOnly:(id)arg1;
- (void)browserWindowWillClose:(id)arg1;
- (void)sessionStateDidChange;
- (void)historyWasDeleted;
- (id)parentalControlAuthorization;
- (BOOL)authorizeParent;
- (BOOL)setParentalControlsEnabled:(BOOL)arg1;
- (id)parentalControlsAuthorizationWithFlags:(unsigned int)arg1;
- (void)updateCloseKeyEquivalents;
- (BOOL)_event:(id)arg1 isKeyEquivalentForMenuItem:(id)arg2;
- (BOOL)eventIsGoBackKeyEquivalent:(id)arg1;
- (BOOL)eventIsGoForwardKeyEquivalent:(id)arg1;
- (BOOL)_eventIsOldSelectNextPreviousTabKeyEquivalent:(id)arg1 direction:(char *)arg2;
- (BOOL)eventIsSelectNextTabKeyEquivalent:(id)arg1;
- (BOOL)eventIsSelectPreviousTabKeyEquivalent:(id)arg1;
- (id)cachesDirectoryPath;
- (BOOL)confirmClosingAllWindows;
- (id)displayNameForURL:(id)arg1 withTitle:(id)arg2;
- (void)emptyCache;
- (id)localizedHelpBookName;
- (void)resetTextEncodingMenu;
- (id)settingsDirectoryPath;
- (id)siteIconForURLString:(id)arg1;
- (id)windowMenuItem;
- (id)viewMenuItem;
- (id)environmentForSafariProcesses;
- (BOOL)hasDeferredURLsToOpen;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface AppearancePreferences : PreferencesModule
{
    NSTextField *standardFontSample;
    NSTextField *monospacedFontSample;
    NSButton *selectStandardFontButton;
    NSButton *selectMonospacedFontButton;
    NSButton *displayImagesCheckbox;
    NSPopUpButton *defaultCharacterSetMenu;
}

- (void)updateFontSampleField:(int)arg1;
- (void)updateFontSampleFields;
- (void)chooseFont:(int)arg1;
- (void)chooseStandardFont:(id)arg1;
- (void)chooseMonospacedFont:(id)arg1;
- (unsigned long long)validModesForFontPanel:(id)arg1;
- (void)changeFont:(id)arg1;
- (void)updateDefaultCharacterSetPopup;
- (void)takeDefaultCharacterSetFrom:(id)arg1;
- (void)toggleDisplayImages:(id)arg1;
- (void)initializeFromDefaults;
- (void)awakeFromNib;
- (void)moduleWillBeRemoved;
- (BOOL)isResizable;
- (id)helpAnchor;

@end

@interface AutoFillPreferences : PreferencesModule
{
    NSButton *autoFillAddressFieldsCheckBox;
    NSButton *autoFillPasswordsCheckBox;
    NSButton *autoFillOtherFormsCheckBox;
    NSButton *editMyCardButton;
    NSButton *editPasswordsButton;
    NSButton *editOtherFormDataButton;
    MiscFormsDataEditor *miscFormsDataEditor;
    PasswordsEditor *passwordsEditor;
}

- (void)updateViews;
- (void)toggleAutoFillAddressFields:(id)arg1;
- (void)toggleAutoFillPasswords:(id)arg1;
- (void)toggleAutoFillOtherForms:(id)arg1;
- (void)editMyCard:(id)arg1;
- (void)editPasswords:(id)arg1;
- (void)editOtherFormData:(id)arg1;
- (void)initializeFromDefaults;
- (BOOL)isResizable;
- (id)helpAnchor;

@end

@interface AutoFillTest : NSObject
{
}

+ (BOOL)shouldPerformAutomatedTest;
+ (void)performAutomatedTest;
+ (id)autoFillDBFilename;
+ (id)autoFillAddressCard;

@end

@interface Banner : NSObject
{
    NSView *bannerContents;
    NSView *firstKeySubview;
    NSView *lastKeySubview;
    WebViewPlus *_webView;
    NSView *_viewBelowBanner;
    BarBackground *_bannerView;
    BOOL _animationInProgress;
    BOOL _animatingIntoPlace;
    struct CGRect _animationEnclosingRect;
    double _animationStartTime;
    double _animationDuration;
}

+ (double)animationDuration;
+ (id)bannerColor;
+ (int)bannerSortOrder;
+ (BOOL)bannerHasBottomBorder;
- (id)init;
- (id)initWithWebView:(id)arg1;
- (void)dealloc;
- (id)bannerNibName;
- (id)bannerView;
- (long long)compareBanners:(id)arg1;
- (void)detachWebView;
- (void)didInstallBannerView;
- (void)didUninstallBannerView;
- (void)installWithAnimation:(BOOL)arg1;
- (BOOL)isInstalled;
- (void)uninstall:(id)arg1;
- (void)uninstallWithAnimation:(BOOL)arg1;
- (void)viewBelowBannerWasResizedFromFrame:(struct CGRect)arg1 animationProgress:(float)arg2 installing:(BOOL)arg3;
- (id)webView;
- (void)webViewDidMoveToWindow;
- (void)willInstallBannerView;
- (void)willUninstallBannerView;

@end

@interface FadeInAnimation : NSAnimation
{
}

- (void)setCurrentProgress:(float)arg1;

@end

@interface BannerWithOverlay : Banner <BarBackgroundDelegate, NSAnimationDelegate>
{
    FadingOverlay *_overlay;
    BOOL _overlayDisabled;
    BOOL _overlayRemovedWhileWebViewOffscreen;
    NSAnimation *_fadeInAnimation;
}

+ (BOOL)overlayAppearsAutomatically;
+ (BOOL)overlayIgnoresMouseEvents;
+ (Class)overlayViewClass;
- (void)dealloc;
- (id)initWithWebView:(id)arg1;
- (void)detachWebView;
- (void)webViewDidMoveToWindow;
- (void)viewBelowBannerWasResizedFromFrame:(struct CGRect)arg1 animationProgress:(float)arg2 installing:(BOOL)arg3;
- (void)animationDidEnd:(id)arg1;
- (void)barBackgroundDidEndLiveResize:(id)arg1;
- (void)barBackgroundWillStartLiveResize:(id)arg1;
- (void)fadingOverlayNeedsUpdateInRect:(struct CGRect)arg1;
- (void)hideOverlay;
- (BOOL)isOverlayDisabled;
- (BOOL)isShowingFadingOverlay;
- (id)overlay;
- (void)setOverlayDisabled:(BOOL)arg1;
- (BOOL)showOverlay;
- (void)willAttachOverlay;
- (void)willDetachOverlay;
- (void)startFadeIn;

@end

@interface BarBackground : NSView
{
    BOOL _hasTopBorder;
    BOOL _hasBottomBorder;
    BOOL _mouseDownCanMoveWindow;
    BOOL _scopeBarAppearance;
    NSColor *_backgroundColor;
    NSColor *_bottomBorderColor;
    NSView *_firstChildKeyView;
    NSView *_lastChildKeyView;
    NSView *_externalNextKeyView;
    id _delegate;
}

- (id)firstTopBorderLineColor;
- (id)secondTopBorderLineColor;
- (id)defaultBottomBorderLineColor;
- (void)commonInit;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)awakeFromNib;
- (void)dealloc;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (void)viewDidEndLiveResize;
- (void)viewWillStartLiveResize;
- (double)topBorderHeight;
- (void)drawRect:(struct CGRect)arg1;
- (id)backgroundColor;
- (void)setBackgroundColor:(id)arg1;
- (void)setBottomBorderColor:(id)arg1;
- (BOOL)isOpaque;
- (BOOL)hasTopBorder;
- (void)setHasTopBorder:(BOOL)arg1;
- (BOOL)hasBottomBorder;
- (void)setHasBottomBorder:(BOOL)arg1;
- (BOOL)usesScopeBarAppearance;
- (void)setUsesScopeBarAppearance:(BOOL)arg1;
- (BOOL)mouseDownCanMoveWindow;
- (void)setMouseDownCanMoveWindow:(BOOL)arg1;
- (void)setExternalNextKeyView:(id)arg1;
- (id)firstChildKeyView;
- (void)setFirstChildKeyView:(id)arg1;
- (id)lastChildKeyView;
- (void)setLastChildKeyView:(id)arg1;
- (void)setDefaultKeyLoop;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (void)setNextKeyView:(id)arg1;
- (void)removeFromSuperview;
- (id)accessibilityAttributeValue:(id)arg1;
- (BOOL)accessibilityIsIgnored;

@end

@interface BlackSearchFieldCell : NSSearchFieldCell
{
    BOOL _cancelButtonIsForcedToShow;
}

+ (double)blackSearchFieldHeightForControlSize:(unsigned long long)arg1;
+ (id)blackSearchFieldPlaceholderTextColor;
+ (id)updateCellForSearchField:(id)arg1;
- (void)_updateSubCellImages;
- (id)init;
- (void)dealloc;
- (BOOL)_textIsEmpty;
- (BOOL)_cancelButtonIsVisibleButSuperclassIsUnaware;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)setCancelButtonForcedToShow:(BOOL)arg1;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (struct CGRect)searchButtonRectForBounds:(struct CGRect)arg1;
- (struct CGRect)cancelButtonRectForBounds:(struct CGRect)arg1;
- (void)setControlSize:(unsigned long long)arg1;
- (id)setUpFieldEditorAttributes:(id)arg1;
- (void)endEditing:(id)arg1;

@end

@interface BlackSearchFieldController : OverlayViewController
{
    SearchField *_searchField;
    BOOL _searchFieldHasEverBeenAttached;
    BOOL _searchFieldIsAllowedToBeShown;
}

+ (Class)overlayWindowClass;
- (id)init;
- (struct CGRect)searchFieldFrameForTargetView:(id)arg1;
- (id)overlayView;
- (struct CGSize)overlaySize;
- (struct CGPoint)overlayOriginInWindowFrame:(struct CGRect)arg1;
- (void)attach;
- (id)searchField;
- (BOOL)searchFieldHasEverBeenAttached;
- (BOOL)searchFieldIsAllowedToBeShown;
- (void)setSearchFieldIsAllowedToBeShown:(BOOL)arg1;
- (void)dealloc;

@end

@interface BlackSearchFieldOverlayWindow : TransparentOverlayWindow
{
}

- (void)sendEvent:(id)arg1;

@end

@interface BonjourController : BookmarkSource <NSNetServiceDelegate>
{
    BonjourServiceCollector *_httpCollector;
    BonjourServiceCollector *_lprPrinterCollector;
    BonjourServiceCollector *_httpPrinterPageCollector;
    NSMutableArray *_printerPageServices;
    NSMutableArray *_uncategorizedServices;
    NSMutableArray *_orderedNonEmptyCategories;
    WebBookmark *_aboutBonjourBookmark;
    NSImage *_bonjourIcon;
    NSNetService *_serviceToVisit;
    int _windowPolicyForServiceToVisit;
    TabLocation *_tabLocationForServiceToVisit;
}

+ (id)sharedBonjourController;
- (id)init;
- (void)dealloc;
- (void)netService:(id)arg1 didNotResolve:(id)arg2;
- (void)netServiceDidResolveAddress:(id)arg1;
- (void)bonjourServiceCollector:(id)arg1 didFindService:(id)arg2 moreComing:(BOOL)arg3;
- (void)bonjourServiceCollector:(id)arg1 didRemoveService:(id)arg2 moreComing:(BOOL)arg3;
- (BOOL)canCopyContents;
- (id)child:(unsigned int)arg1 ofContentItem:(id)arg2;
- (void)didCollapseContentItem:(id)arg1;
- (void)didExpandContentItem:(id)arg1;
- (BOOL)contentItemCanHaveChildren:(id)arg1;
- (id)contentItemsToInitiallyExpand;
- (id)contentItemsToExpandOnReload;
- (unsigned int)numberOfChildrenOfContentItem:(id)arg1;
- (id)bookmarkFromContentItem:(id)arg1;
- (void)goToContentItem:(id)arg1 tabLocation:(id)arg2;
- (void)goToContentItemInNewWindow:(id)arg1;
- (void)goToContentItemInNewTab:(id)arg1 tabLocation:(id)arg2;
- (id)titleStringForContentItem:(id)arg1;
- (id)imageForContentItem:(id)arg1;
- (id)bookmarkSourceMenuTitle;
- (id)bookmarkSourceImage;
- (void)menuNeedsUpdate:(id)arg1;

@end

@interface BonjourServiceCollector : NSObject <NSNetServiceBrowserDelegate>
{
    NSNetServiceBrowser *_serviceBrowser;
    NSMutableArray *_services;
    NSMutableDictionary *_serviceNameToServices;
    id _delegate;
}

- (void)dealloc;
- (id)delegate;
- (id)initWithServiceType:(id)arg1 inDomain:(id)arg2;
- (id)services;
- (id)servicesNamed:(id)arg1;
- (unsigned int)countOfServicesNamed:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)netServiceBrowser:(id)arg1 didFindService:(id)arg2 moreComing:(BOOL)arg3;
- (void)netServiceBrowser:(id)arg1 didRemoveService:(id)arg2 moreComing:(BOOL)arg3;

@end

@interface BookmarkChooser : NSObject
{
    BOOL _canChooseLeaves;
    BOOL _canChooseCollections;
    id _delegate;
    struct OwnPtr<Safari::SObjCNotifier> _notifier;
    NSWindow *window;
    SplitView *collectionsAndContentsSplitView;
    NSTableView *collectionsTable;
    NSOutlineView *contentsOutline;
    NSButton *cancelButton;
    NSButton *confirmButton;
    NSTextField *promptField;
}

+ (id)bookmarkChooser;
- (void)awakeFromNib;
- (void)dealloc;
- (id)init;
- (long long)numberOfRowsInTableView:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (BOOL)tableView:(id)arg1 shouldSelectRow:(long long)arg2;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (void)tableViewSelectionDidChange:(id)arg1;
- (void)tableViewSelectionIsChanging:(id)arg1;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (BOOL)outlineView:(id)arg1 shouldSelectItem:(id)arg2;
- (void)outlineView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 item:(id)arg4;
- (void)outlineViewSelectionDidChange:(id)arg1;
- (void)beginSheetModalForWindow:(id)arg1 contextInfo:(void *)arg2;
- (id)chosenBookmark;
- (BOOL)canChooseBookmarkLeaves;
- (BOOL)canChooseBookmarkCollections;
- (id)delegate;
- (void)setCanChooseBookmarkLeaves:(BOOL)arg1;
- (void)setCanChooseBookmarkCollections:(BOOL)arg1;
- (void)setDelegate:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface BookmarkPreferences : PreferencesModule
{
    NSTextField *bookmarksBarTextField;
    NSButton *_btitsc;
    NSButton *bookmarksToolbarIncludesAddressBookCheckbox;
    NSButton *bookmarksToolbarIncludesBonjourCheckbox;
    NSButton *bookmarksMenuIncludesAddressBookCheckbox;
    NSButton *bookmarksMenuIncludesBookmarksToolbarCheckbox;
    NSButton *bookmarksMenuIncludesBonjourCheckbox;
    NSButton *bookmarksCollectionsIncludeAddressBookCheckbox;
    NSButton *bookmarksCollectionsIncludeBonjourCheckbox;
    NSButton *synchronizeWithDotMacCheckbox;
    NSButton *openDotMacButton;
    ISyncController *_iSyncController;
}

+ (BOOL)addBookmarksBarProxy:(id)arg1;
+ (BOOL)removeBookmarksBarProxy:(id)arg1;
+ (BOOL)bookmarksBarContainsProxy:(id)arg1;
+ (id)allBookmarksBarProxies;
+ (void)toggleBookmarksBarContainsProxy:(id)arg1;
- (void)setUpCheckbox:(id)arg1 isChecked:(BOOL)arg2 determinedFromPreferenceKey:(id)arg3;
- (void)setUpCheckbox:(id)arg1 fromPreferenceKey:(id)arg2;
- (void)setUpBookmarksBarProxyCheckbox:(id)arg1 fromProxyIdentifier:(id)arg2;
- (void)updateBookmarksViews;
- (void)updateSyncViews;
- (void)toggleBookmarksToolbarIncludesTopSites:(id)arg1;
- (void)toggleBookmarksToolbarIncludesAddressBook:(id)arg1;
- (void)toggleBookmarksToolbarIncludesBonjour:(id)arg1;
- (void)toggleBookmarksMenuIncludesAddressBook:(id)arg1;
- (void)toggleBookmarksMenuIncludesBookmarksToolbar:(id)arg1;
- (void)toggleBookmarksMenuIncludesBonjour:(id)arg1;
- (void)toggleBookmarksCollectionsIncludeAddressBook:(id)arg1;
- (void)toggleBookmarksCollectionsIncludeBonjour:(id)arg1;
- (void)initializeFromDefaults;
- (void)awakeFromNib;
- (void)dealloc;
- (BOOL)isResizable;
- (id)dotMacInfoAlert;
- (void)displayDotMacInfoSheet;
- (void)dotMacInfoSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)openDotMacPreferences:(id)arg1;
- (void)toggleSynchronizeBookmarks:(id)arg1;
- (void)windowDidBecomeMain:(id)arg1;
- (void)moduleWillBeRemoved;
- (void)moduleWasInstalled;
- (void)_parentalControlsDidChange;
- (id)helpAnchor;
- (void)iSyncControllerSyncInProgressDidChange:(id)arg1;
- (void)iSyncControllerCanSynchronizeBookmarksDidChange:(id)arg1;
- (void)iSyncControllerSynchronizesBookmarksDidChange:(id)arg1;

@end

@interface BookmarksControllerObjC : NSObject <FileLockerDelegate, NSMenuDelegate, SafariSyndicationDelegate, OldSpotlightDataSource>
{
    struct BookmarksController *_controller;
    WebBookmark *_bookmarksBarCollection;
    WebBookmark *_bookmarksMenuCollection;
    NSMenu *_bookmarksMenu;
    BOOL _menuGood;
    BOOL _menuIncludesBonjour;
    BOOL _menuIncludesAddressBook;
    BOOL _menuIncludesBookmarksBar;
    BOOL _collectionsIncludeBonjour;
    BOOL _collectionsIncludeAddressBook;
    BOOL _RSSBookmarksInMenuAreSubscribed;
    BOOL _RSSBookmarksInBarAreSubscribed;
    BOOL _sendRSSUpdates;
    BOOL _RSSUpdatePending;
    FileLocker *_fileLocker;
    BOOL _reloading;
    BOOL _savePending;
    NSMutableSet *_parentalControlDomains;
    NSMutableSet *_pendingSpotlightCacheAdditions;
    NSMutableSet *_pendingSpotlightCacheDeletions;
    struct FileTime _bookmarksFileTimeForSpotlight;
    long long _bookmarksFileSizeForSpotlight;
    BOOL _registeredWithSpotlightCacheController;
    NSMenuItem *_lastBuiltInBookmarksMenuItem;
    struct OwnPtr<Safari::SObjCNotifier> _notifier;
}

+ (id)sharedController;
+ (id)smallImageForBookmarkList;
+ (id)imageForBookmark:(id)arg1;
+ (id)bookmarkSourceForProxyIdentifier:(id)arg1;
+ (id)bookmarkTitleForProxyIdentifier:(id)arg1;
- (id)_standardBookmarksFilePath;
- (void)_removeAllBookmarksFromMenu;
- (void)addChildrenOfBookmark:(id)arg1 withTabLocation:(id)arg2 toMenu:(id)arg3 includeUnreadRSSCounts:(BOOL)arg4;
- (id)_addMenuItemForBookmark:(id)arg1 withTabLocation:(id)arg2 toMenu:(id)arg3 includeUnreadRSSCount:(BOOL)arg4;
- (id)addMenuItemForBookmark:(id)arg1 withTabLocation:(id)arg2 toMenu:(id)arg3 includeUnreadRSSCount:(BOOL)arg4;
- (void)goToNthFavoriteLeaf:(int)arg1;
- (void)addSubmenuForBookmarkSource:(id)arg1;
- (void)addFavoritesSubmenu;
- (void)addSpecialBookmarkSourcesToMenu;
- (void)_addBookmarksToMenu;
- (void)menuNeedsUpdate:(id)arg1;
- (BOOL)menuHasKeyEquivalent:(id)arg1 forEvent:(id)arg2 target:(id *)arg3 action:(SEL *)arg4;
- (void)rememberBookmarksFileInfo;
- (BOOL)bookmarksFileHasChanged;
- (BOOL)reloadBookmarksFromFileIfChanged;
- (void)unlockFileLocker;
- (void)savePendingChanges;
- (id)persistentIdentifierForBookmark:(id)arg1;
- (id)bookmarkForPersistentIdentifier:(id)arg1;
- (id)bookmarkForNewWindowTabsPreference;
- (int)fileLocker:(id)arg1 actionForApparentlyAbandonedLock:(id)arg2 onAttempt:(int)arg3;
- (void)fileLocker:(id)arg1 lockWasStolen:(id)arg2;
- (void)tellUserThatISyncWon;
- (void)tellUserThatExternalChangePreemptedLocalChange;
- (void)savePendingChangesWhenever;
- (BOOL)savePendingChangesSoon;
- (void)_resetMenu;
- (id)_feedBookmarksWithURLString:(id)arg1 ignoreFilter:(BOOL)arg2;
- (BOOL)_feedBookmarksMightBeAffectedByNotification:(const struct SNotification *)arg1;
- (void)addRSSBookmarksToSyndication:(const Vector_3eff2a34 *)arg1 automaticallyUpdateUnreadCounts:(BOOL)arg2;
- (void)removeRSSBookmarksFromSyndication:(const Vector_3eff2a34 *)arg1 automaticallyUpdateUnreadCounts:(BOOL)arg2;
- (void)updateSyndicationWithCurrentRSSBookmarksInMenu:(int)arg1 automaticallyUpdateUnreadCounts:(BOOL)arg2;
- (void)updateSyndicationWithCurrentRSSBookmarksInBookmarksBar:(int)arg1 automaticallyUpdateUnreadCounts:(BOOL)arg2;
- (void)addInitialRSSBookmarksToSyndication;
- (void)_receivedBookmarksChangedNotification:(const struct SNotification *)arg1;
- (void)bookmarksWereReloadedInGroup:(id)arg1;
- (void)_receivedDefaultsChangedNotification:(id)arg1;
- (void)fillWithBuiltInBookmarks;
- (void)exportBookmarks;
- (id)importBookmarksFrom:(id)arg1;
- (int)importFavoritesFrom:(id)arg1 intoBookmarksFolder:(id)arg2;
- (id)_computeNetscapeAndMozillaBookmarksPath;
- (void)importNetscapeAndMozillaFavorites;
- (id)collectionNamed:(id)arg1;
- (id)uniqueUntitledCollectionName;
- (id)dateForImportFolderName;
- (id)uniqueImportFolderName;
- (BOOL)canImportBookmarks;
- (void)importBookmarks;
- (void)addBookmark:(id)arg1 title:(id)arg2;
- (void)addBookmarksForPagesInWhiteList:(id)arg1 thatAreNotInArray:(id)arg2;
- (id)initWithBookmarksMenu:(id)arg1;
- (id)allBookmarks;
- (id)bookmarksBarCollection;
- (id)bookmarksMenuCollection;
- (id)historyCollection;
- (void)dealloc;
- (BOOL)_menuContainsBookmark:(id)arg1;
- (BOOL)_favoritesContainsBookmark:(id)arg1;
- (void)_sendFavoritesChangedNotification;
- (void)insertProxyBookmarkWithIdentifier:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)updateBookmarkSources;
- (void)addFavoriteBookmark:(id)arg1 atIndex:(int)arg2;
- (void)_bookmarksFileChangedNotification:(id)arg1;
- (BOOL)visitFavoriteBookmarkFromKeyEvent:(id)arg1;
- (void)_subscribeInMailToRSSBookmark:(id)arg1;
- (void)_newBookmarkSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)redisplayPage:(id)arg1;
- (void)redisplayPages:(id)arg1;
- (void)subscribe:(BOOL)arg1 toFeed:(id)arg2;
- (void)_getSubscribedRSSBookmarkTrees:(Vector_53fd3c72 *)arg1;
- (void)_passSubscribedBookmarksToSyndication;
- (void)setUpSyndicationDelegate;
- (BOOL)isBookmarkedURL:(id)arg1;
- (BOOL)shouldShowUnreadRSSCountsForCollection:(id)arg1;
- (void)_addLeafBookmark:(id)arg1 toSpotlightCacheArray:(id)arg2;
- (void)_addBookmark:(id)arg1 toSpotlightCacheArray:(id)arg2;
- (void)_addBookmarksFromArray:(id)arg1 toSpotlightCacheArray:(id)arg2;
- (void)_registerWithSpotlightCacheController;
- (id)itemsToAddForSpotlightDataType:(id)arg1;
- (id)itemsToDeleteForSpotlightDataType:(id)arg1;
- (id)allItemsForSpotlightDataType:(id)arg1;
- (void)resetAdditionsAndDeletionsForSpotlightDataType:(id)arg1;
- (void)updateWillBeginForSpotlightDataType:(id)arg1;
- (void)updateDidEndForSpotlightDataType:(id)arg1;
- (void)_displayNewBookmarksSheetForBookmark:(id)arg1 inWindow:(id)arg2 favoritesOnly:(BOOL)arg3 delegate:(id)arg4;
- (void)displayNewBookmarksSheetForBookmark:(id)arg1 inWindow:(id)arg2;
- (void)displayNewFavoritesSheetForBookmark:(id)arg1 inWindow:(id)arg2 delegate:(id)arg3;
- (BOOL)isChildAllowedToVisitURL:(id)arg1;
- (void)feed:(id)arg1 unreadCountChanged:(int)arg2;
- (void)bookmarkUUID:(id)arg1 unreadCountChanged:(int)arg2;
- (void)bookmarkFeed:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface BookmarkSource : NSObject <BookmarkSource, NSMenuDelegate>
{
    NSMutableSet *_updatedBookmarkSourceMenus;
    NSMutableDictionary *_tabLocationsForBookmarkSourceMenus;
}

- (void)dealloc;
- (void)addBookmarkSourceMenu:(id)arg1 withTabLocation:(id)arg2;
- (id)tabLocationForMenu:(id)arg1;
- (void)removeBookmarkSourceMenu:(id)arg1;
- (void)setAllMenusNeedRealUpdate;
- (void)setMenu:(id)arg1 needsRealUpdate:(BOOL)arg2;
- (BOOL)menuNeedsRealUpdate:(id)arg1;
- (BOOL)menuHasKeyEquivalent:(id)arg1 forEvent:(id)arg2 target:(id *)arg3 action:(SEL *)arg4;
- (void)refreshContents;
- (BOOL)canCopyContents;
- (BOOL)canDeleteContents;
- (BOOL)deleteContentItems:(id)arg1 withParentWindow:(id)arg2 undoManager:(id)arg3;
- (BOOL)contentItemCanBeSearchResult:(id)arg1;
- (BOOL)contentItemCanHaveChildren:(id)arg1;
- (id)child:(unsigned int)arg1 ofContentItem:(id)arg2;
- (unsigned int)numberOfChildrenOfContentItem:(id)arg1;
- (id)parentOfContentItem:(id)arg1;
- (void)didCollapseContentItem:(id)arg1;
- (void)didExpandContentItem:(id)arg1;
- (id)contentItemsToInitiallyExpand;
- (id)contentItemsToExpandOnReload;
- (id)bookmarkFromContentItem:(id)arg1;
- (void)goToContentItem:(id)arg1 tabLocation:(id)arg2;
- (void)goToContentItemInNewWindow:(id)arg1;
- (void)goToContentItemInNewTab:(id)arg1 tabLocation:(id)arg2;
- (void)goToChildrenOfContentItemInTabs:(id)arg1 tabLocation:(id)arg2;
- (BOOL)canGoToContentItem:(id)arg1;
- (id)bookmarksFromGlobalHistoryItems:(const Vector_be06175b *)arg1;
- (id)bookmarksFromContentItems:(id)arg1;
- (id)bookmarkSourceImage;
- (id)addressStringForContentItem:(id)arg1;
- (id)titleStringForContentItem:(id)arg1;
- (id)imageForContentItem:(id)arg1;
- (BOOL)shouldShowRSSLabelForContentItem:(id)arg1;
- (BOOL)isFilteredFromOtherSources;
- (id)bookmarkSourceMenuTitle;

@end

@interface BookmarksRepresentation : NSObject <WebDocumentRepresentation>
{
    WebDataSource *_dataSource;
}

- (void)setDataSource:(id)arg1;
- (void)receivedData:(id)arg1 withDataSource:(id)arg2;
- (void)receivedError:(id)arg1 withDataSource:(id)arg2;
- (void)finishedLoadingWithDataSource:(id)arg1;
- (BOOL)canProvideDocumentSource;
- (id)documentSource;
- (id)title;

@end

@interface BookmarksSearchBar : BarBackground
{
    NSView *nibContainer;
    NSTextField *statusField;
    NSSearchField *searchField;
    NSTextField *scopeButtonsCaption;
    NSButton *searchAllScopeButton;
    NSButton *searchCollectionScopeButton;
    ColoredRect *rightBorder;
    NSString *_singleCollectionScopeTitle;
    int _searchScope;
    unsigned int _matchCount;
    BOOL _showsResizer;
    BOOL _leftToRightLayout;
}

+ (double)barHeight;
- (void)dealloc;
- (void)mouseDown:(id)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)resetCursorRects;
- (void)resizeSubviewsWithOldSize:(struct CGSize)arg1;
- (void)clearSearchString;
- (void)focusSearchField;
- (id)initWithFrame:(struct CGRect)arg1 singleCollectionScopeTitle:(id)arg2;
- (unsigned int)matchCount;
- (void)searchStringChanged:(id)arg1;
- (int)searchScope;
- (id)searchString;
- (void)setMatchCount:(unsigned int)arg1;
- (void)setSearchScope:(int)arg1;
- (void)setShowsResizer:(BOOL)arg1;
- (void)setSingleCollectionScopeTitle:(id)arg1;
- (BOOL)showsResizer;
- (id)singleCollectionScopeTitle;
- (void)takeSearchScopeFromButton:(id)arg1;

@end

@interface BookmarksSearcher : NSObject
{
    NSString *_searchString;
    WebBookmark *_targetCollection;
    NSMutableArray *_allMatches;
    struct __CFDictionary *_collectionsForMatches;
    BOOL _canMatchContainers;
    BOOL _hasPerformedSearch;
}

- (void)dealloc;
- (id)targetCollection;
- (void)setTargetCollection:(id)arg1;
- (id)searchString;
- (void)setSearchString:(id)arg1;
- (BOOL)canMatchContainers;
- (void)setCanMatchContainers:(BOOL)arg1;
- (id)collectionForMatch:(id)arg1;
- (void)performSearch;
- (BOOL)hasPerformedSearch;
- (id)matches;

@end

@interface BookmarksView : NSView <WebDocumentView, SafariWebDocumentCustomSearchField>
{
    BOOL _contentsLoaded;
    NSView *_contents;
    BookmarksViewController *_activeBookmarksViewController;
}

- (id)initWithFrame:(struct CGRect)arg1;
- (void)setDataSource:(id)arg1;
- (void)dataSourceUpdated:(id)arg1;
- (void)setNeedsLayout:(BOOL)arg1;
- (void)viewWillMoveToHostWindow:(id)arg1;
- (void)viewDidMoveToHostWindow;
- (void)dealloc;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (void)setNextKeyView:(id)arg1;
- (id)enclosingBrowserWebView;
- (void)controllerDidSwitchIntoView;
- (void)controllerWillSwitchOutOfView;
- (void)layout;
- (id)pageTitle;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)viewDidMoveToWindow;
- (BOOL)canFocusSearchField;
- (void)focusSearchField;
- (BOOL)canFindNext;
- (void)findNext;
- (BOOL)canFindPrevious;
- (void)findPrevious;

@end

@interface UndoRemoveInfo : NSObject
{
    WebBookmark *_bookmark;
    WebBookmark *_parent;
    int _index;
}

+ (id)infoWithBookmark:(id)arg1;
- (id)initWithBookmark:(id)arg1;
- (void)dealloc;

@end

@interface BookmarksViewController : NSResponder <BarBackgroundDelegate, NSOutlineViewDataSource, NSSplitViewDelegate, NSTableViewDataSource>
{
    SplitView *tableAndOutlineSplitView;
    TableViewPlus *collectionsTableView;
    OutlineViewPlus *outlineView;
    NSControl *newCollectionControl;
    NSControl *newContentsFolderControl;
    SplitView *flowListSplitView;
    FlowView *flowView;
    double _flowViewHeightBeforeCollapse;
    BOOL _flowViewLastLoadedWhileHidden;
    BookmarksSearchBar *_searchBar;
    BrowserWebView *_parentWebView;
    BrowserWindow *_parentWindow;
    NSCell *_sectionTitleCell;
    NSTableColumn *_hiddenAddressColumn;
    NSUndoManager *_undoManager;
    WebBookmark *_selectedCollection;
    BOOL _selectedCollectionInitialized;
    BookmarksSearcher *_searcher;
    struct OwnPtr<Safari::SObjCNotifier> _notifier;
    BOOL _bookmarkChangeIsExpected;
    BOOL _isProgrammaticallyResizingSplitView;
    BOOL _nibIsLoaded;
    BOOL _setupComplete;
    BOOL _outlineViewWasFocused;
    BOOL _contentsStale;
    BOOL _showUnreadRSSCountsInBar;
    BOOL _showUnreadRSSCountsInMenu;
}

+ (float)bottomGradientHeight;
+ (id)draggedBookmarks;
- (void)addCollection:(id)arg1;
- (void)addContentsFolder:(id)arg1;
- (void)copy:(id)arg1;
- (void)cut:(id)arg1;
- (void)delete:(id)arg1;
- (void)editSelectedBookmarkAddress:(id)arg1;
- (void)editSelectedBookmarkTitle:(id)arg1;
- (void)editSelectedCollectionTitle:(id)arg1;
- (void)newBookmarkFolder:(id)arg1;
- (void)paste:(id)arg1;
- (void)bookmarksSearchBar:(id)arg1 mouseDownInResizer:(id)arg2;
- (void)bookmarksSearchBarSearchCriteriaDidChange:(id)arg1;
- (long long)numberOfRowsInTableView:(id)arg1;
- (BOOL)tableView:(id)arg1 acceptDrop:(id)arg2 row:(long long)arg3 dropOperation:(unsigned long long)arg4;
- (void)tableView:(id)arg1 draggedImage:(id)arg2 endedAt:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (unsigned long long)tableView:(id)arg1 draggingSourceOperationMaskForLocal:(BOOL)arg2;
- (id)tableView:(id)arg1 namesOfPromisedFilesDroppedAtDestination:(id)arg2 forDraggedRowsWithIndexes:(id)arg3;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (void)tableView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (unsigned long long)tableView:(id)arg1 validateDrop:(id)arg2 proposedRow:(long long)arg3 proposedDropOperation:(unsigned long long)arg4;
- (BOOL)tableView:(id)arg1 writeRowsWithIndexes:(id)arg2 toPasteboard:(id)arg3;
- (void)tableViewSelectionDidChange:(id)arg1;
- (BOOL)tableView:(id)arg1 keyDown:(id)arg2;
- (id)tableView:(id)arg1 menuForEvent:(id)arg2 inRow:(long long)arg3 tableColumn:(id)arg4;
- (BOOL)tableView:(id)arg1 shouldEditOnDoubleClick:(id)arg2 inRow:(long long)arg3 tableColumn:(id)arg4;
- (BOOL)tableView:(id)arg1 shouldEditOnSingleClick:(id)arg2 inRow:(long long)arg3 tableColumn:(id)arg4;
- (BOOL)tableView:(id)arg1 shouldEditTableColumn:(id)arg2 row:(long long)arg3;
- (BOOL)tableView:(id)arg1 shouldSelectRow:(long long)arg2;
- (double)tableView:(id)arg1 heightOfRow:(long long)arg2;
- (id)tableColumn:(id)arg1 dataCellForRow:(long long)arg2;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (BOOL)shouldReverseSnapshotOrder;
- (long long)flowViewIndexForOutlineViewIndex:(long long)arg1;
- (long long)outlineViewIndexForFlowViewIndex:(long long)arg1;
- (unsigned long long)numberOfItemsInFlowView:(id)arg1;
- (id)flowView:(id)arg1 itemAtIndex:(unsigned long long)arg2;
- (void)flowViewWillStabilize:(id)arg1;
- (void)flowViewDidBecomeFirstResponder:(id)arg1;
- (void)flowView:(id)arg1 itemActivatedAtIndex:(unsigned long long)arg2;
- (void)flowView:(id)arg1 startResizingWithEvent:(id)arg2;
- (unsigned long long)flowView:(id)arg1 writeItemsAtIndexes:(id)arg2 toPasteboard:(id)arg3;
- (BOOL)outlineView:(id)arg1 acceptDrop:(id)arg2 item:(id)arg3 childIndex:(long long)arg4;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (void)outlineView:(id)arg1 draggedImage:(id)arg2 endedAt:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (unsigned long long)outlineView:(id)arg1 draggingSourceOperationMaskForLocal:(BOOL)arg2;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(id)arg1 namesOfPromisedFilesDroppedAtDestination:(id)arg2 forDraggedItems:(id)arg3;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (void)outlineView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 byItem:(id)arg4;
- (unsigned long long)outlineView:(id)arg1 validateDrop:(id)arg2 proposedItem:(id)arg3 proposedChildIndex:(long long)arg4;
- (BOOL)outlineView:(id)arg1 writeItems:(id)arg2 toPasteboard:(id)arg3;
- (id)outlineView:(id)arg1 dragImageForRowsWithIndexes:(id)arg2 tableColumns:(id)arg3 event:(id)arg4 offset:(struct CGPoint *)arg5;
- (BOOL)outlineView:(id)arg1 shouldTypeSelectForEvent:(id)arg2 withCurrentSearchString:(id)arg3;
- (BOOL)outlineView:(id)arg1 keyDown:(id)arg2;
- (id)outlineView:(id)arg1 menuForEvent:(id)arg2 inRow:(long long)arg3 tableColumn:(id)arg4;
- (BOOL)outlineView:(id)arg1 selectionShouldChangeFromMouseDownInRow:(long long)arg2 tableColumn:(id)arg3;
- (BOOL)outlineView:(id)arg1 shouldEditOnDoubleClick:(id)arg2 inRow:(long long)arg3 tableColumn:(id)arg4;
- (BOOL)outlineView:(id)arg1 shouldEditOnSingleClick:(id)arg2 inRow:(long long)arg3 tableColumn:(id)arg4;
- (BOOL)outlineView:(id)arg1 shouldEditTableColumn:(id)arg2 item:(id)arg3;
- (void)outlineView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 item:(id)arg4;
- (void)outlineViewItemDidCollapse:(id)arg1;
- (void)outlineViewItemDidExpand:(id)arg1;
- (void)outlineViewSelectionDidChange:(id)arg1;
- (void)splitViewDidResizeSubviews:(id)arg1;
- (BOOL)splitView:(id)arg1 canCollapseSubview:(id)arg2;
- (double)splitView:(id)arg1 constrainMaxCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(id)arg1 constrainMinCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (void)splitView:(id)arg1 resizeSubviewsWithOldSize:(struct CGSize)arg2;
- (void)detachWebView;
- (void)switchedIntoView;
- (void)willSwitchOutOfView;
- (id)flowView;
- (id)outlineView;
- (id)pageTitle;
- (id)undoManager;
- (void)setUndoManager:(id)arg1;
- (void)removeBookmarks:(id)arg1;
- (BOOL)revealBookmark:(id)arg1 expandChildren:(BOOL)arg2;
- (void)focusSearchField;
- (unsigned int)searchResultsCount;
- (void)_insertBorderLineBeneathScrollView:(id)arg1;
- (void)awakeFromNib;
- (void)dealloc;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface BookmarkURLConfirmer : NSObject
{
    WebBookmark *_bookmark;
    id _delegate;
    SEL _didEndSelector;
    void *_contextInfo;
}

+ (void)beginURLConfirmationForBookmark:(id)arg1 modalForWindow:(id)arg2 modalDelegate:(id)arg3 didEndSelector:(SEL)arg4 contextInfo:(void *)arg5;
- (void)dealloc;

@end

@interface BrowserApplication : NSApplication
{
    BOOL _isProcessingContextMenuEvent;
    BOOL _isClosingAllWindows;
    NSObject *_keyEventListener;
    NSWindow *_windowForIncomingSheet;
    SEL _currentAction;
}

- (void)beginSheet:(id)arg1 modalForWindow:(id)arg2 modalDelegate:(id)arg3 didEndSelector:(SEL)arg4 contextInfo:(void *)arg5;
- (id)windowForIncomingSheet;
- (void)orderFrontStandardAboutPanel:(id)arg1;
- (id)targetForAction:(SEL)arg1 to:(id)arg2 from:(id)arg3;
- (SEL)currentAction;
- (BOOL)sendAction:(SEL)arg1 to:(id)arg2 from:(id)arg3;
- (void)setKeyEventListener:(id)arg1;
- (id)keyEventListener;
- (id)keyWindow;
- (void)sendEvent:(id)arg1;
- (id)nextEventMatchingMask:(unsigned long long)arg1 untilDate:(id)arg2 inMode:(id)arg3 dequeue:(BOOL)arg4;
- (struct _NSModalSession *)beginModalSessionForWindow:(id)arg1;
- (void)endModalSession:(struct _NSModalSession *)arg1;
- (BOOL)isClosingAllWindows;
- (void)closeAllWindows:(id)arg1;
- (id)makeWindowsPerform:(SEL)arg1 inOrder:(BOOL)arg2;
- (BOOL)anyWindowsVisible;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (BOOL)isProcessingContextMenuEvent;
- (id)orderedWindows;
- (void)_setKeyWindow:(id)arg1;

@end

@interface BrowserPulseAnimation : NSAnimation
{
}

- (void)setCurrentProgress:(float)arg1;

@end

@interface BrowserFadeOutAnimation : NSAnimation
{
}

- (void)setCurrentProgress:(float)arg1;

@end

@interface BrowserCoachMark : NSObject <NSAnimationDelegate>
{
    NSWindow *_coachMarkWindow;
    BrowserCoachMarkView *_coachMarkView;
    struct CGAffineTransform _prePulseTransform;
    NSAnimation *_pulseAnimation;
    NSTimer *_startFadeOutTimer;
    NSAnimation *_fadeOutAnimation;
    BOOL _expired;
}

- (void)_targetViewDidMoveOrChangeSize:(id)arg1;
- (id)initWithContentRect:(struct CGRect)arg1 contentImage:(id)arg2 contentImageOffset:(struct CGPoint)arg3 forView:(id)arg4 selfDestruct:(BOOL)arg5;
- (void)dealloc;
- (void)expire;
- (struct CGRect)rectOnScreen;
- (void)animationDidEnd:(id)arg1;

@end

@interface BrowserCoachMarkController : NSObject
{
    NSMutableArray *_coachMarks;
}

- (id)init;
- (void)dealloc;
- (void)addCoachMarksWithSelectionRect:(struct CGRect)arg1 textRects:(id)arg2 contentImage:(id)arg3 forView:(id)arg4 selfDestruct:(BOOL)arg5;
- (void)cancelCurrentCoachMarks;
- (void)coachMarkExpired:(id)arg1;
- (id)currentCoachMarksEnumerator;

@end

@interface BrowserCoachMarkView : NSView
{
    BrowserCoachMark *_coach;
    NSImage *_contentImage;
    struct CGPoint _imageOffset;
}

+ (BOOL)coachMarksWouldOverlapUsingTextRects:(id)arg1;
- (void)dealloc;
- (id)initWithCoach:(id)arg1 contentRect:(struct CGRect)arg2 contentImage:(id)arg3 contentImageOffset:(struct CGPoint)arg4;
- (struct CGRect)contentRect;
- (void)drawRect:(struct CGRect)arg1;
- (float)leftBorder;
- (float)topBorder;
- (float)rightBorder;
- (float)bottomBorder;

@end

@interface BrowserContentWebView : SearchableWebView
{
    BOOL isObservingAppLaunches;
    BrowserDocument *_document;
    NSMutableArray *_iPhotoFileWrappers;
    struct ProcessSerialNumber iPhotoPSN;
}

+ (BOOL)shouldIncludeInWebKitStatistics;
- (id)document;
- (id)browserWindow;
- (id)windowController;
- (id)webFrameForSelectAllCopy;
- (void)webView:(id)arg1 didWriteSelectionToPasteboard:(id)arg2;
- (void)reportErrorForBadFileWrapper:(id)arg1;
- (void)saveFileWrapperToDownloadsFolder:(id)arg1 originatingURL:(id)arg2;
- (id)proposedBookmarkTitleForElement:(id)arg1;
- (id)browserWebView;
- (void)goToURL:(id)arg1;
- (void)_detachAndReattachElementsByTagName:(id)arg1;
- (void)restartPlugins;

@end

@interface ShowBookmarks : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface EmailContents : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface DoJavaScriptCommand : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface BrowserDocument : NSDocument <NSOpenSavePanelDelegate>
{
    BrowserWebView *_currentBrowserWebView;
    NSMutableArray *_webViews;
    NSString *_MIMETypeForSaving;
    NSURL *_originatingURLForSaving;
    NSFileWrapper *_fileWrapperToSave;
    WebDataSource *_dataSourceToSave;
    NSSavePanel *_activeSavePanel;
    NSView *fileFormatAccessoryView;
    NSPopUpButton *fileFormatPopUpButton;
    NSTabView *fileFormatInfoTabView;
    BOOL _isSavingWithSavePanel;
    BOOL _shouldOpenWindowBehindFrontmost;
}

+ (BOOL)lastDocumentCouldShowInputFields;
- (id)initWithContentsOfRequest:(id)arg1 frameName:(id)arg2;
- (id)init;
- (id)initWithContentsOfURL:(id)arg1 ofType:(id)arg2;
- (void)dealloc;
- (void)close;
- (BOOL)shouldClose;
- (void)makeWindowControllers;
- (void)removeWindowController:(id)arg1;
- (BOOL)isDocumentEdited;
- (id)browserWindowController;
- (id)dataSourceToSave;
- (BOOL)canSaveAsWebArchive;
- (BOOL)isSavingWebArchive;
- (id)MIMETypeForSaving;
- (id)filenameForSaving;
- (BOOL)isSavingPlainText;
- (void)setFileWrapperToSave:(id)arg1 MIMEType:(id)arg2 originatingURL:(id)arg3;
- (void)setDataSourceToSave:(id)arg1;
- (BOOL)saveToURL:(id)arg1 ofType:(id)arg2 forSaveOperation:(unsigned long long)arg3 error:(id *)arg4;
- (void)saveDocument:(id)arg1;
- (void)saveDocumentAs:(id)arg1;
- (void)saveDocumentTo:(id)arg1;
- (void)document:(id)arg1 didSave:(BOOL)arg2 contextInfo:(void *)arg3;
- (id)allowedFileTypes;
- (id)windowForSheet;
- (void)_updateFileFormatInformationText;
- (void)fileFormatPopUpButtonUpdated:(id)arg1;
- (BOOL)prepareSavePanel:(id)arg1;
- (id)panel:(id)arg1 userEnteredFilename:(id)arg2 confirmed:(BOOL)arg3;
- (id)dataRepresentationOfType:(id)arg1;
- (BOOL)loadDataRepresentation:(id)arg1 ofType:(id)arg2;
- (id)untitledName;
- (id)displayName;
- (id)fileType;
- (id)writableTypesForSaveOperation:(unsigned long long)arg1;
- (void)_nameHasChanged;
- (void)showWindows;
- (unsigned long long)validModesForFontPanel:(id)arg1;
- (void)changeFont:(id)arg1;
- (void)snapBackToSearchResults:(id)arg1;
- (BOOL)canShowInputFields;
- (BOOL)canUseAddressField;
- (BOOL)canUseSearchField;
- (void)searchWeb:(id)arg1;
- (void)focusWebViewSearchField:(id)arg1;
- (void)findNext:(id)arg1;
- (void)findPrevious:(id)arg1;
- (void)hideFindBanner:(id)arg1;
- (void)openLocation:(id)arg1;
- (void)goToRequest:(id)arg1 withTabLabel:(id)arg2;
- (id)evaluateJavaScript:(id)arg1;
- (void)goToURL:(id)arg1;
- (void)loadCloneOfView:(id)arg1;
- (id)currentURL;
- (BOOL)canGoHome;
- (void)_goHomeUsingWindowPolicyFromCurrentEvent:(BOOL)arg1;
- (void)goHome:(id)arg1;
- (BOOL)hasInitialContents;
- (void)displayInitialContents;
- (void)displayInitialHomePage;
- (void)bugReportSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)reportBugToApple:(id)arg1;
- (void)goToItemInBackOrForwardMenu:(id)arg1;
- (void)_addItem:(id)arg1 toMenu:(id)arg2;
- (id)backListMenuForButton:(id)arg1;
- (id)forwardListMenuForButton:(id)arg1;
- (void)reload:(id)arg1;
- (BOOL)shouldStartEmpty;
- (void)setShouldStartEmpty;
- (void)stopLoading:(id)arg1;
- (BOOL)isLoading;
- (BOOL)isShowingLoadErrorPage;
- (id)printInfo;
- (void)setPrintInfo:(id)arg1;
- (void)printWebFrame:(id)arg1 showingPrintPanel:(BOOL)arg2 useSheet:(BOOL)arg3;
- (id)_selectedFrameView;
- (id)_printingMailingFrame;
- (void)printShowingPrintPanel:(BOOL)arg1;
- (void)_updateTitleOfPrintMenuItem:(id)arg1;
- (BOOL)canPrint;
- (void)safari_printDocument:(id)arg1;
- (BOOL)canAddBookmark;
- (BOOL)canAddBookmarksForTabs;
- (id)syndicationURLWithFilter;
- (id)createBookmarkForWebView:(id)arg1 respectProvisionalPage:(BOOL)arg2;
- (id)createBookmarkRespectingProvisionalPage:(BOOL)arg1;
- (void)_URLConfirmationDidEndForBookmark:(id)arg1 confirmed:(BOOL)arg2 contextInfo:(void *)arg3;
- (void)proposeBookmarkRespectingProvisionalPage:(BOOL)arg1;
- (void)proposeBookmarkForProvisionalOrCurrentPage;
- (void)addBookmark:(id)arg1;
- (void)_URLConfirmationDidEndForBookmarkInBookmarksMenu:(id)arg1 confirmed:(BOOL)arg2 contextInfo:(void *)arg3;
- (void)addBookmarkToMenu:(id)arg1;
- (void)addBookmarksForTabs:(id)arg1;
- (void)proposeBookmarkForCurrentURL;
- (void)clearAllStatus;
- (BOOL)_isDocumentHTML;
- (BOOL)_isDisplayingNonRSSPage;
- (BOOL)_isDisplayingCompleteNonRSSPage;
- (BOOL)canViewSource;
- (BOOL)canMailPage;
- (BOOL)canMailPageAddress;
- (BOOL)canCreateWebClip;
- (BOOL)canSave;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (void)viewSource:(id)arg1;
- (id)currentBrowserWebView;
- (id)currentBrowserOrOverlayWebView;
- (void)tryMultipleURLs:(id)arg1;
- (BOOL)shouldOpenWindowBehindFrontmost;
- (void)setShouldOpenWindowBehindFrontmost:(BOOL)arg1;
- (id)_mailApplicationPath;
- (BOOL)_mailApplicationAtPath:(id)arg1 supportsKey:(id)arg2;
- (BOOL)_sendMessageEventToMailPath:(id)arg1 eventID:(unsigned int)arg2 directObject:(id)arg3 title:(id)arg4 URL:(id)arg5;
- (void)mailPageForFrame:(id)arg1;
- (void)mailPage:(id)arg1;
- (void)_reportLaunchFailureForMailApplicationAtPath:(id)arg1;
- (void)mailPageAddress:(id)arg1;
- (void)createWebClip:(id)arg1;
- (id)URLString;
- (void)setURLString:(id)arg1;
- (id)source;
- (id)text;
- (id)aeDescByEvaluatingJavaScriptFromString:(id)arg1;
- (void)mailPageContents;
- (void)clearPageCache;
- (id)pageName;
- (id)createWebViewWithFrameName:(id)arg1;
- (id)createWebView;
- (void)addWebView:(id)arg1;
- (void)removeWebView:(id)arg1;
- (void)setCurrentWebView:(id)arg1;
- (id)allWebViews;

@end

@interface BrowserDocumentController : NSDocumentController <NSUserInterfaceValidations>
{
}

+ (id)sharedDocumentController;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (unsigned long long)maximumRecentDocumentCount;
- (id)_openableFileExtensions;
- (void)openDocument:(id)arg1;
- (id)openDocumentWithContentsOfURL:(id)arg1 display:(BOOL)arg2;
- (id)typeForContentsOfURL:(id)arg1 error:(id *)arg2;
- (id)activateFrontmostBrowserDocumentIfAvailable;
- (BOOL)anyInactiveTabs;
- (BOOL)canGoHome;
- (id)createHiddenEmptyBrowserDocument;
- (void)editTitleOfBookmarksCollection:(id)arg1;
- (id)findOrCreateFrontmostBrowserDocument;
- (id)frontmostBrowserDocument;
- (id)frontmostBrowserDocumentAllowingAttachedSheets:(BOOL)arg1;
- (void)goHome:(id)arg1;
- (id)goToRequest:(id)arg1 tabLabel:(id)arg2 windowPolicy:(int)arg3 tabLocation:(id)arg4 frameName:(id)arg5;
- (id)goToURLFromExternalApplication:(id)arg1 forcingHTMLMIMEType:(BOOL)arg2;
- (id)goToURL:(id)arg1 windowPolicy:(int)arg2;
- (id)goToURL:(id)arg1 windowPolicy:(int)arg2 tabLocation:(id)arg3;
- (void)newBookmarkFolder:(id)arg1;
- (void)newTab:(id)arg1;
- (id)openEmptyBrowserDocument;
- (id)openHTMLSourceDocumentWithDataSource:(id)arg1;
- (id)openHTMLSourceDocumentWithResource:(id)arg1;
- (void)openLocation:(id)arg1;
- (id)orderedBrowserDocuments;
- (void)reloadTabsMatchingURLs:(id)arg1;
- (void)reportBugToApple:(id)arg1;
- (void)showTopSitesWall:(id)arg1;
- (void)searchWeb:(id)arg1;
- (void)showBookmarksView:(id)arg1;
- (void)showHistoryInBookmarksView:(id)arg1;
- (void)toggleShowBookmarks:(id)arg1;
- (void)tryMultipleURLs:(id)arg1 windowPolicy:(int)arg2;

@end

@interface BrowserParentalControls : NSObject
{
    BOOL _parentalControlsEnabled;
    BOOL _cached;
}

+ (id)sharedParentalControls;
- (BOOL)parentalControlsEnabled;
- (BOOL)shouldFillWithBuiltInBookmarks;
- (void)notifyFamilyControlsParentChangedBookmarks:(id)arg1;

@end

@interface BrowserSessionPersistentState : NSObject
{
    struct Vector<WTF::OwnPtr<Safari::BrowserWindowPersistentState>, 0ul> _windowStates;
}

- (id)initFromCurrentSession;
- (id)initFromFile:(id)arg1;
- (BOOL)containsAnyURLs;
- (void)restoreSession;
- (id)data;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface BrowserTableColumn : NSTableColumn
{
    id _delegate;
}

- (void)setDelegate:(id)arg1;
- (id)dataCellForRow:(long long)arg1;

@end

@interface BrowserTabViewItem : NSTabViewItem
{
    TabBarView *_tabBarView;
    TabButton *_button;
    NSString *_searchFieldText;
    NSString *_urlFromScript;
    BrowserWebView *_webView;
    struct RefPtr<Safari::SBrowserTab> m_browserTab;
}

- (id)initWithTabBarView:(id)arg1;
- (void)dealloc;
- (void)setView:(id)arg1;
- (void)setLabel:(id)arg1;
- (void)setButton:(id)arg1;
- (id)button;
- (BOOL)canBeClosed;
- (id)webView;
- (void)setSearchFieldText:(id)arg1;
- (id)searchFieldText;
- (void)updateLabelNow;
- (void)updateLabelSoon;
- (id)objectSpecifier;
- (void)handleCloseScriptCommand:(id)arg1;
- (id)title;
- (unsigned int)orderedIndex;
- (BOOL)isVisible;
- (void)rememberCurrentURLString;
- (id)URLString;
- (void)setURLString:(id)arg1;
- (id)source;
- (id)text;
- (id)aeDescByEvaluatingJavaScriptFromString:(id)arg1;
- (void)mailPageContents;
- (struct SBrowserTab *)safariBrowserTab;
- (void)setSafariBrowserTab:(struct SBrowserTab *)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface BrowserWebView : BrowserContentWebView <NSAnimationDelegate, NSOpenSavePanelDelegate>
{
    LoadProgressMonitor *_loadMonitor;
    NSURLRequest *_initialRequest;
    BOOL _shouldStartEmpty;
    WebHistoryItem *_searchResultsForSnapBack;
    BookmarksViewController *bookmarksViewController;
    BarBackground *bookmarksViewContents;
    NSString *_statusText;
    NSString *_progressStatus;
    id _progressStatusOwner;
    BOOL _ellipsizeProgressStatus;
    NSString *_generalStatus;
    id _generalStatusOwner;
    BOOL _ellipsizeGeneralStatus;
    NSString *_userDrivenStatus;
    id _userStatusOwner;
    BOOL _ellipsizeUserStatus;
    NSString *_provisionalOriginalURLString;
    NSString *_originalURLString;
    NSString *_pendingRSSFeedURLString;
    WebHistoryItem *_pendingRSSFeedReferrer;
    NSArray *_counterpartURLsForRSS;
    NSString *_requestedTabLabel;
    NSString *_provisionalTabLabel;
    NSString *_committedTabLabel;
    NSArray *_fallbackURLs;
    LocationChangeHandler *_locationChangeDelegate;
    SheetRequest *_sheetRequest;
    FormDelegate *_formDelegate;
    double _redirectDelay;
    double _cumulativeMagnifyDelta;
    short _stickyTextMagnifyGestureDirection;
    float _textSizeMultiplierAtGestureStart;
    BOOL _didReaderAvailabilityCheck;
    BOOL _isLoadingIgnoringQueue;
    BOOL _isLoadingConsideringQueue;
    BOOL _mainDocumentHasLoaded;
    BOOL _mainDocumentDidFirstLayout;
    BOOL _mainDocumentDidFirstVisuallyNonEmptyLayout;
    BOOL _progressIsForMainFrameLoad;
    NSTimer *_detectStallsTimer;
    NSTimer *_stallTimer;
    BOOL _isStalled;
    BOOL _mainFrameLoadEndedInError;
    BOOL _isWindowFocusDisabled;
    BOOL _downloadNextPage;
    int _cachedPageType;
    int _oldPageType;
    BOOL _isShowingRSS;
    BOOL _hasDisplayedValidURL;
    BOOL _registeredForNetworkConfigurationChanges;
    BOOL _isMovingToAnotherWindow;
    BOOL _isSwitchingToBackgroundTab;
    BOOL _restoringTabForUndoClose;
    BOOL _blockedFromKeyViewLoop;
    NSView *_blockedKeyViewLoopProxyView;
    BOOL _securePageHasInsecureContent;
    NSURLRequest *_requestWaitingInQueue;
    NSDictionary *_parentalControlledElement;
    struct TopSitesViewController {
        void **;
        BrowserWebView *;
        int;
        struct TopSitesViewLayer *;
        _Bool;
        unsigned long long;
        unsigned long long;
        struct SNotifier<Safari::TopSitesViewController>;
        STimer_44605971;
        _Bool;
        _Bool;
        _Bool;
        STimer_44605971;
        struct RefPtr<Safari::TopSite>;
        _Bool;
        _Bool;
        STimer_44605971;
        double;
        struct SString;
        _Bool;
        unsigned long long;
        unsigned long long;
        struct RetainPtr<CGImage*>;
    } *_topSitesViewController;
    TopSitesView *_animatingTopSitesView;
    Overlay *_topSitesZoomToPageFadeOutOverlay;
    NSViewAnimation *_topSitesZoomToPageFadeOutAnimation;
    BOOL _readerIsAvailable;
    struct OwnPtr<Safari::ReaderController> _readerController;
    WebClipBanner *_webClipBanner;
    BOOL _showingSecurityWarningPage;
    BOOL _loadingSecurityWarningPage;
    SecurityInfo *_provisionalSecurityInfo;
    WebHistoryItem *_historyItemForTabCloseUndo;
    BOOL _isNavigatingViaBackForwardList;
    PageLoad *_currentPageLoad;
    struct RefPtr<Safari::SBrowserWebView> _browserWebView;
}

+ (void)initialize;
+ (void)closeWebViewSoon:(id)arg1;
+ (void)closeAllPendingWebViews;
- (id)initWithDocument:(id)arg1 request:(id)arg2 frameName:(id)arg3;
- (void)dealloc;
- (void)beginGestureWithEvent:(id)arg1;
- (void)magnifyWithEvent:(id)arg1;
- (void)goBack:(id)arg1;
- (void)goForward:(id)arg1;
- (id)sheetRequest;
- (void)setSheetRequest:(id)arg1;
- (void)showFindInPageBannerAllowingAnimation:(BOOL)arg1;
- (BOOL)isShowingWebClipBanner;
- (id)webClipBanner;
- (void)showWebClipBannerAllowingAnimation:(BOOL)arg1;
- (void)hideWebClipBannerAllowingAnimation:(BOOL)arg1;
- (BOOL)currentPageIsSearchable;
- (void)showCertificateSheet:(id)arg1;
- (BOOL)isShowingSecurityWarningPage;
- (id)provisionalSecurityInfo;
- (void)setProvisionalSecurityInfo:(id)arg1;
- (id)securityInfo;
- (void)setSecurityInfo:(id)arg1;
- (void)commitProvisionalSecurityInfo;
- (void)setUpSecurityWarningPage;
- (void)showSecurityWarningPageWithSecurityInfo:(id)arg1;
- (void)hideSecurityWarningPage;
- (void)updateSecurityWarningPageWithSecurityInfo:(id)arg1;
- (void)securityWarningPageLoaded;
- (void)securityWarningPageIgnoreWarningButtonPressed;
- (void)securityWarningPageBackButtonPressed;
- (void)securityWarningPageClosePageButtonPressed;
- (id)securityWarningPageLocalizedStringsURLString;
- (void)setUpSecurityWarningPageController;
- (void)bannerDidInstall:(id)arg1;
- (void)bannerDidUninstall:(id)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)viewDidMoveToWindow;
- (void)close;
- (id)loadMonitor;
- (id)undoManagerForWebView:(id)arg1;
- (void)webView:(id)arg1 setStatusText:(id)arg2;
- (id)webViewStatusText:(id)arg1;
- (void)webView:(id)arg1 mouseDidMoveOverElement:(id)arg2 modifierFlags:(unsigned long long)arg3;
- (id)webView:(id)arg1 createWebViewWithRequest:(id)arg2 windowFeatures:(id)arg3;
- (void)webView:(id)arg1 frame:(id)arg2 exceededDatabaseQuotaForSecurityOrigin:(id)arg3 database:(id)arg4;
- (void)webView:(id)arg1 decidePolicyForGeolocationRequestFromOrigin:(id)arg2 frame:(id)arg3 listener:(id)arg4;
- (void)_confirmGeolocationPermission:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)webViewRunModal:(id)arg1;
- (void)webViewClose:(id)arg1;
- (void)webViewShow:(id)arg1;
- (void)webViewFocus:(id)arg1;
- (id)webViewFirstResponder:(id)arg1;
- (void)webView:(id)arg1 makeFirstResponder:(id)arg2;
- (BOOL)webViewAreToolbarsVisible:(id)arg1;
- (void)webView:(id)arg1 setToolbarsVisible:(BOOL)arg2;
- (BOOL)webViewIsStatusBarVisible:(id)arg1;
- (void)webView:(id)arg1 setStatusBarVisible:(BOOL)arg2;
- (BOOL)webViewIsResizable:(id)arg1;
- (void)webView:(id)arg1 setResizable:(BOOL)arg2;
- (id)webContentView;
- (void)webView:(id)arg1 setFrame:(struct CGRect)arg2;
- (struct CGRect)webViewFrame:(id)arg1;
- (void)webView:(id)arg1 setContentRect:(struct CGRect)arg2;
- (struct CGRect)webViewContentRect:(id)arg1;
- (void)webView:(id)arg1 didScrollDocumentInFrameView:(id)arg2;
- (BOOL)_runJavaScriptPanelWithMessage:(id)arg1 initiatedByFrame:(id)arg2 hasCancelButton:(BOOL)arg3 allowAppTermination:(BOOL)arg4;
- (void)webView:(id)arg1 runJavaScriptAlertPanelWithMessage:(id)arg2 initiatedByFrame:(id)arg3;
- (BOOL)webView:(id)arg1 runJavaScriptConfirmPanelWithMessage:(id)arg2 initiatedByFrame:(id)arg3;
- (BOOL)webView:(id)arg1 runBeforeUnloadConfirmPanelWithMessage:(id)arg2 initiatedByFrame:(id)arg3;
- (BOOL)webViewShouldInterruptJavaScript:(id)arg1;
- (id)webView:(id)arg1 runJavaScriptTextInputPanelWithPrompt:(id)arg2 defaultText:(id)arg3 initiatedByFrame:(id)arg4;
- (void)webView:(id)arg1 runOpenPanelForFileButtonWithResultListener:(id)arg2 allowMultipleFiles:(BOOL)arg3;
- (void)webView:(id)arg1 saveFrameView:(id)arg2 showingPanel:(BOOL)arg3;
- (void)openPanelDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (BOOL)isMovingToAnotherWindow;
- (void)setMovingToAnotherWindow:(BOOL)arg1;
- (void)didMoveToDocument:(id)arg1;
- (BOOL)disallowCachingSnapshot;
- (BOOL)disallowCachingText;
- (void)newBookmarkSheetDidEnd:(BOOL)arg1;
- (BOOL)_handleErrorPageLink:(id)arg1 fromFrame:(id)arg2;
- (void)webView:(id)arg1 unableToImplementPolicyWithError:(id)arg2 frame:(id)arg3;
- (void)networkConfigurationDidChange:(id)arg1;
- (void)showErrorPageForURL:(id)arg1 withTitle:(id)arg2 message:(id)arg3 errorPageTemplate:(int)arg4;
- (void)webView:(id)arg1 decidePolicyForMIMEType:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5;
- (BOOL)webView:(id)arg1 shouldGoToHistoryItem:(id)arg2;
- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5;
- (void)webView:(id)arg1 decidePolicyForNewWindowAction:(id)arg2 request:(id)arg3 newFrameName:(id)arg4 decisionListener:(id)arg5;
- (id)originalURLString;
- (void)setOriginalURLString:(id)arg1;
- (id)provisionalOriginalURLString;
- (void)setProvisionalOriginalURLString:(id)arg1;
- (id)pendingRSSFeedURLString;
- (id)pendingRSSFeedReferrer;
- (void)setPendingRSSFeedURLString:(id)arg1 withReferrer:(id)arg2;
- (id)provisionalTabLabel;
- (void)setProvisionalTabLabel:(id)arg1;
- (id)committedTabLabel;
- (void)setCommittedTabLabel:(id)arg1;
- (id)requestedTabLabel;
- (void)setRequestedTabLabel:(id)arg1;
- (id)tabLabel;
- (id)statusMessage;
- (BOOL)ellipsizeStatusMessage;
- (id)mouseoverTextForElement:(id)arg1 modifierFlags:(unsigned int)arg2;
- (void)setStatus:(id)arg1 withPriority:(int)arg2 ellipsize:(BOOL)arg3 owner:(id)arg4;
- (void)clearAllStatus;
- (id)currentURL;
- (id)expectedOrCurrentURL;
- (id)expectedOrCurrentOriginalURLString;
- (BOOL)isNavigatingViaBackForwardList;
- (BOOL)isDisplayingCompleteNonRSSPage;
- (BOOL)isDisplayingNonRSSPage;
- (BOOL)isShowingBookmarks;
- (BOOL)isShowingEmptyPage;
- (BOOL)isShowingSecurePage;
- (BOOL)securePageHasInsecureContent;
- (void)setSecurePageHasInsecureContent:(BOOL)arg1;
- (BOOL)isShowingTopSites;
- (BOOL)isShowingTopSitesWall;
- (BOOL)isShowingFullWindowCoverFlow;
- (BOOL)isDisposable;
- (void)hideBookmarks;
- (void)showBookmarks;
- (id)currentTopSitesView;
- (struct TopSitesViewController *)topSitesViewController;
- (BOOL)canShowTopSitesWall;
- (void)showTopSitesWall:(id)arg1;
- (void)topSitesViewWillBecomeSubview:(id)arg1;
- (void)topSitesZoomToPageAnimationDidEnd;
- (void)topSitesZoomToPageAnimationWillStart;
- (void)topSitesSnapshotFetchingStatusHasChanged;
- (void)topSitesModeHasChanged;
- (id)bookmarksViewContents;
- (id)bookmarksViewController;
- (id)locationFieldURL;
- (id)titleForLocationFieldURL;
- (id)URLForNewBookmark;
- (id)titleForNewBookmark;
- (id)currentTitle;
- (id)failedOrCurrentURL;
- (id)pageNameURL;
- (id)pageName;
- (id)displayName;
- (id)fallbackURLs;
- (void)clearFallbackURLs;
- (void)goToNextFallbackURL;
- (BOOL)isLoading;
- (BOOL)isShowingLoadErrorPage;
- (BOOL)isStalled;
- (BOOL)tabShouldDisplayProgressIndicator;
- (BOOL)containsEditedForm;
- (struct FormCompletionController *)activeFormCompletionController;
- (void)setMainFrameLoadEndedInError:(BOOL)arg1;
- (BOOL)mainFrameLoadEndedInError;
- (void)setMainDocumentHasLoaded:(BOOL)arg1;
- (BOOL)mainDocumentHasLoaded;
- (void)setMainDocumentDidFirstLayout:(BOOL)arg1;
- (BOOL)mainDocumentDidFirstLayout;
- (void)setMainDocumentDidFirstVisuallyNonEmptyLayout:(BOOL)arg1;
- (BOOL)mainDocumentDidFirstVisuallyNonEmptyLayout;
- (void)progressChanged:(id)arg1;
- (void)progressFinished:(id)arg1;
- (void)setPendingRedirectDelay:(double)arg1;
- (void)cancelPendingRedirect;
- (double)pendingRedirectDelay;
- (unsigned long long)draggingUpdated:(id)arg1;
- (BOOL)canMakeTextSmaller;
- (BOOL)canMakeTextLarger;
- (BOOL)canMakeTextStandardSize;
- (BOOL)canZoomPageIn;
- (BOOL)canZoomPageOut;
- (BOOL)canResetPageZoom;
- (void)zoomIn:(id)arg1;
- (void)zoomOut:(id)arg1;
- (void)zoomToStandardSize:(id)arg1;
- (BOOL)isSwitchingToBackgroundTab;
- (void)setSwitchingToBackgroundTab:(BOOL)arg1;
- (BOOL)maintainsInactiveSelection;
- (BOOL)isShowingRSS;
- (id)counterpartURLsForRSS;
- (void)updateCounterpartURLsForRSS;
- (void)snapBackTo:(id)arg1;
- (void)animationDidEnd:(id)arg1;
- (void)setSearchResultsForSnapBack:(id)arg1;
- (void)setSearchResultsForSnapBackToCurrentPage;
- (void)clearSearchResultsForSnapBack;
- (BOOL)canSnapBackToSearchResults;
- (void)snapBackToSearchResults:(id)arg1;
- (id)searchResultsForSnapBack;
- (void)goNowIfInQueue;
- (void)stopLoading:(id)arg1;
- (void)_fetchSnapshots;
- (void)_promptToFetchRecentHistoryPreviews;
- (void)_confirmFetchWebpagePreviews:(id)arg1 returnCode:(int)arg2 contextInfo:(id)arg3;
- (BOOL)_performSpecialReloadActions;
- (void)reload:(id)arg1;
- (void)reloadFromOrigin:(id)arg1;
- (BOOL)canReload;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (void)setAcceptsGenericIcon:(BOOL)arg1;
- (void)updateIcon;
- (void)nameHasChanged;
- (void)pageTitleHasChanged;
- (void)locationFieldURLHasChanged;
- (void)prepareForRSSAnimation;
- (void)currentURLHasChanged;
- (void)provisionalDataSourceLoadDidFail;
- (void)provisionalURLHasChanged;
- (void)pageLoadingStatusHasChanged;
- (void)dataSourceHasChanged:(id)arg1 forFrame:(id)arg2;
- (void)mainDataSourceHasChanged;
- (void)goToRequest:(id)arg1 withTabLabel:(id)arg2 allowJavaScript:(BOOL)arg3 waitInQueue:(BOOL)arg4;
- (void)goToURL:(id)arg1;
- (void)tryMultipleURLs:(id)arg1;
- (void)tryDownloadWithMultipleURLs:(id)arg1;
- (id)stringByEvaluatingJavaScriptFromString:(id)arg1;
- (BOOL)hasInitialContents;
- (void)displayInitialContents;
- (BOOL)shouldStartEmpty;
- (void)setShouldStartEmpty;
- (void)clearPageCache;
- (struct CGImage *)generateSnapshotOfType:(int)arg1;
- (BOOL)isWindowFocusDisabled;
- (void)setWindowFocusDisabled:(BOOL)arg1;
- (void)setBlockedFromKeyViewLoop:(BOOL)arg1;
- (void)setBlockedFromKeyViewLoop:(BOOL)arg1 proxyView:(id)arg2;
- (id)blockedKeyViewLoopProxyView;
- (BOOL)isBlockedFromKeyViewLoop;
- (void)setHoverFeedbackSuspended:(BOOL)arg1;
- (id)currentPageLoad;
- (void)setCurrentPageLoad:(id)arg1;
- (id)browserWebView;
- (BOOL)isReaderAvailable;
- (BOOL)isReaderAvailabilityCheckPermitted;
- (void)checkForReaderAvailability;
- (void)deactivateReaderWithAnimation:(BOOL)arg1;
- (BOOL)isShowingReader;
- (BOOL)canToggleReader;
- (struct ReaderController *)readerController;
- (void)setReaderController:(PassOwnPtr_a3225cba)arg1;
- (id)readerWindow;
- (void)readerDidActivate;
- (void)readerWillDeactivate;
- (void)readerDidDeactivate;
- (void)readerDidChangeAvailabilityState;
- (void)readerDidChangeNextPageLoadingState;
- (void)sessionStateDidChange;
- (struct SBrowserWebView *)safariBrowserWebView;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface BrowserWindow : Window
{
    NSString *_title;
    TitleBarButton *_titleBarButton;
    RolloverImageButton *_lockButton;
    id _certificateSheetTrigger;
    BOOL _logAfterNextRedisplay;
    BOOL _ignoresOrderFront;
    BOOL _isCapturingMiniWindowImage;
}

- (void)_installTitleBarButton;
- (BOOL)_hasActiveControls;
- (void)awakeFromNib;
- (void)keyDown:(id)arg1;
- (void)updateCGSWindowTitle;
- (void)_commonAwake;
- (struct CGRect)_adjustedFrameForSaving:(struct CGRect)arg1;
- (struct CGRect)adjustedFrameForCascade:(struct CGRect)arg1 fromWindow:(id)arg2;
- (BOOL)performKeyEquivalent:(id)arg1;
- (BOOL)willHandleKeyEvent:(id)arg1;
- (void)logFirstPageLoadedAfterNextRedisplay;
- (void)logFirstWindowDrawnAfterNextRedisplay;
- (void)logFirstPageLoaded;
- (void)display;
- (void)displayIfNeeded;
- (void)runToolbarCustomizationPalette:(id)arg1;
- (void)updateTitle;
- (void)close;
- (void)setTitle:(id)arg1;
- (id)title;
- (BOOL)isKeyWindow;
- (BOOL)isMainWindow;
- (void)setIsCapturingMiniWindowImage:(BOOL)arg1;
- (void)dealloc;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (void)setWindowController:(id)arg1;
- (void)flushWindow;
- (BOOL)ignoresOrderFront;
- (void)setIgnoresOrderFront:(BOOL)arg1;
- (void)orderFront:(id)arg1;
- (BOOL)makeFirstResponder:(id)arg1;
- (void)sendEvent:(id)arg1;
- (void)setVerticalScrollerVisible:(BOOL)arg1 animate:(BOOL)arg2;
- (void)setHorizontalScrollerVisible:(BOOL)arg1 animate:(BOOL)arg2;
- (void)_setUpLockButton;
- (void)_certificateSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)showCertificateSheet:(id)arg1;
- (BOOL)showingLockButton;
- (void)setShowingLockButton:(BOOL)arg1;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (BOOL)canBecomeKeyWindow;
- (BOOL)canBecomeMainWindow;
- (id)currentTabViewItem;
- (void)setCurrentTabViewItem:(id)arg1;
- (id)orderedTabViewItems;
- (void)insertInOrderedTabViewItems:(id)arg1;
- (void)insertInOrderedTabViewItems:(id)arg1 atIndex:(unsigned int)arg2;
- (void)replaceInOrderedTabViewItems:(id)arg1 atIndex:(unsigned int)arg2;
- (void)removeFromOrderedTabViewItemsAtIndex:(unsigned int)arg1;

@end

@interface BrowserWindowController : WindowController <MorphingDragImageDropTarget, NSMenuDelegate, NSTextFieldDelegate, BrowserWindowDelegate, ReopensAtLaunch>
{
    FavoritesBarView *favoritesBarView;
    NSButton *toggleBookmarksButton;
    TabBarView *tabBarView;
    TabBarEnclosureView *tabBarEnclosureView;
    NSTabView *tabSwitcher;
    BarBackground *statusBar;
    NSTextField *statusTextField;
    ToolbarController *_toolbarController;
    LocationFieldEditor *_locationFieldEditor;
    TextFieldEditor *_searchFieldEditor;
    EtchedStringView *_statusStringView;
    struct OwnPtr<Safari::URLCompletionController> _URLCompletionController;
    struct OwnPtr<Safari::WebSearchCompletionController> _searchCompletionController;
    NSMenu *_dynamicBackMenu;
    NSMenu *_dynamicForwardMenu;
    BOOL _isLoading;
    BOOL _temporaryLocationBar;
    BOOL _editedLocationField;
    BOOL _editedLocationFieldWhileLoading;
    BOOL _focusedLocationFieldWhileLoading;
    BOOL _tabBarHiddenByJavaScript;
    BOOL _readyToUpdateKeyboardLoop;
    BOOL _windowIsClosing;
    BOOL _showingPrivateBrowsingConfirmationSheet;
    NSMutableArray *_topLevelViewOrder;
    NSMutableDictionary *_viewHeightsForResizing;
    BOOL _acceptsGenericIcon;
    NSString *_statusText;
    BOOL _clearStatus;
    BOOL _ellipsizeStatus;
    NSString *_newStatus;
    BOOL _stopAndReloadButtonWillStop;
    BOOL _stopAndReloadButtonIsForTopSites;
    BOOL _tabBarShownForTabDrag;
    BOOL _confirmUnsubmittedFormText;
    BOOL _isAutoFilling;
    BOOL _hideToolbarOnEndSheet;
    BOOL _keepTabBarHiddenWhenCreatingTab;
    NSTabView *_tabSwitcherForGoBack;
    NSTabView *_tabSwitcherForGoForward;
    NSMutableArray *_visitedTabs;
    NSMutableArray *_visitedTabsForGoBackTabSwitcher;
    NSMutableArray *_visitedTabsForGoForwardTabSwitcher;
    unsigned int _coalescedUpdateMask;
    BOOL _performingCoalescedUpdates;
    unsigned int _postponedToolbarUpdateMask;
    BOOL _postponeToolbarUpdates;
    BOOL _RSSTransitionSlowMotion;
    SlidingImageView *_RSSTransitionImageView;
    NSTimer *_RSSTransitionTimer;
    double _RSSTransitionStartTime;
    double _RSSTransitionDuration;
    BOOL _RSSTransitionInProgress;
    BOOL _startRSSAnimationAfterFirstLayout;
    ClosedTabStateHolder *_closedTabStateHolder;
    NSTimer *_springToFrontTimer;
    NSTimer *_setStatusMessageTimer;
    struct OwnPtr<Safari::SObjCNotifier> m_notifier;
    struct OwnPtr<Safari::ExtensionToolbarClientObjCAdapter> _extensionToolbarClientAdapter;
    Vector_961780af _extensionBars;
    ColoredRect *_topExtensionDivider;
    ColoredRect *_bottomExtensionDivider;
    struct RefPtr<Safari::SBrowserWindow> m_browserWindow;
    BrowserTabViewItem *_closingTabView;
}

+ (int)windowPolicyFromEventModifierFlags:(unsigned int)arg1 isMiddleMouseButton:(BOOL)arg2 requireCommandKey:(BOOL)arg3;
+ (int)windowPolicyFromEventModifierFlags:(unsigned int)arg1 isMiddleMouseButton:(BOOL)arg2;
+ (int)windowPolicyFromEventModifierFlags:(unsigned int)arg1 requireCommandKey:(BOOL)arg2;
+ (int)windowPolicyFromCurrentEventRequireCommandKey:(BOOL)arg1;
+ (int)windowPolicyFromCurrentEvent;
+ (int)windowPolicyFromCurrentEventRespectingKeyEquivalents:(BOOL)arg1;
+ (int)windowPolicyFromNavigationAction:(const struct SWebNavigationAction *)arg1;
+ (void)reopen;
+ (id)browserWindowControllerForWindow:(id)arg1;
- (void)addBookmark:(id)arg1;
- (void)autoFill:(id)arg1;
- (void)changeTextEncoding:(id)arg1;
- (void)closeCurrentTab:(id)arg1;
- (void)closeInactiveTabs:(id)arg1;
- (void)goBackAndFlashToolbarButton:(id)arg1;
- (void)goBack:(id)arg1;
- (void)goBackOrForwardFromSegmentedControl:(id)arg1;
- (void)goForwardAndFlashToolbarButton:(id)arg1;
- (void)goForward:(id)arg1;
- (void)goHome:(id)arg1;
- (void)goToToolbarLocation:(id)arg1;
- (void)zoomIn:(id)arg1;
- (void)zoomOut:(id)arg1;
- (void)zoomInOrOutFromSegmentedControl:(id)arg1;
- (void)zoomToStandardSize:(id)arg1;
- (void)moveCurrentTabToNewWindow:(id)arg1;
- (void)newBookmarkFolder:(id)arg1;
- (void)newTab:(id)arg1;
- (id)_localSearchStringFromWebSearchString:(id)arg1;
- (void)performQuickSearch:(id)arg1;
- (void)searchProviderConfirmationDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)printFromToolbar:(id)arg1;
- (void)reportBugToApple:(id)arg1;
- (void)selectLocationField:(id)arg1;
- (void)selectNextTab:(id)arg1;
- (void)selectPreviousTab:(id)arg1;
- (void)selectSearchField:(id)arg1;
- (void)stopOrReload:(id)arg1;
- (void)stopLoading:(id)arg1;
- (BOOL)canReloadObeyingLocationField;
- (void)reloadObeyingLocationField:(id)arg1;
- (void)closeTabFromMenu:(id)arg1;
- (void)closeOtherTabsFromMenu:(id)arg1;
- (void)moveTabToNewWindowFromMenu:(id)arg1;
- (void)reloadTabFromMenu:(id)arg1;
- (void)reloadAllTabs:(id)arg1;
- (void)showBookmarksView:(id)arg1;
- (void)showHistoryInBookmarksView:(id)arg1;
- (void)toggleLocationBar:(id)arg1;
- (void)toggleFavoritesBar:(id)arg1;
- (void)toggleExtensionBar:(id)arg1;
- (void)toggleStatusBar:(id)arg1;
- (void)toggleShowBookmarks:(id)arg1;
- (void)toggleTabBar:(id)arg1;
- (void)toggleReader:(id)arg1;
- (void)createWebClip:(id)arg1;
- (void)showTopSitesWall:(id)arg1;
- (BOOL)canReloadTab:(id)arg1;
- (BOOL)canReloadAllTabs;
- (BOOL)canCloseSelectedTab;
- (BOOL)canCreateNewTab;
- (BOOL)canShowTopSitesWall;
- (void)noResponderFor:(SEL)arg1;
- (void)cancel:(id)arg1;
- (id)windowNibName;
- (void)windowWillLoad;
- (void)windowDidLoad;
- (void)showWindow:(id)arg1;
- (void)setDocument:(id)arg1;
- (BOOL)shouldCloseDocument;
- (struct CGRect)defaultFrame;
- (BOOL)isLocationBarVisible;
- (void)setLocationBarVisible:(BOOL)arg1;
- (BOOL)isFavoritesBarVisible;
- (void)setFavoritesBarVisible:(BOOL)arg1;
- (BOOL)isTabBarVisible;
- (void)setTabBarVisible:(BOOL)arg1;
- (BOOL)isStatusBarVisible;
- (void)setStatusBarVisible:(BOOL)arg1;
- (BOOL)anyToolbarsVisible;
- (void)setToolbarsVisible:(BOOL)arg1;
- (struct CGRect)adjustedFrameForSaving:(struct CGRect)arg1;
- (struct CGRect)adjustedFrameForCascade:(struct CGRect)arg1 fromWindow:(id)arg2;
- (BOOL)isAvailableForForcedLocationUsingWindowPolicy:(int)arg1;
- (BOOL)allowBookmarksChanges;
- (void)editAddressOfFavorite:(id)arg1;
- (void)editContentsOfFavorite:(id)arg1;
- (void)editTitleOfFavorite:(id)arg1;
- (id)favoritesBarView;
- (void)revealFavorite:(id)arg1;
- (void)deleteBookmark:(id)arg1;
- (void)editTitleOfBookmarksCollection:(id)arg1;
- (BOOL)acceptsGenericIcon;
- (void)setAcceptsGenericIcon:(BOOL)arg1;
- (void)setSearchFieldText:(id)arg1;
- (void)_searchForStringWithoutUpdatingRecentSearches:(id)arg1;
- (void)searchForString:(id)arg1;
- (BOOL)toolbarInputFieldsIncludeSearchField;
- (id)toolbarWindow;
- (id)dynamicBackMenu;
- (id)dynamicForwardMenu;
- (id)tabBarView;
- (id)orderedTabs;
- (id)orderedTabViewItems;
- (void)insertInOrderedTabViewItems:(id)arg1;
- (void)insertInOrderedTabViewItems:(id)arg1 atIndex:(unsigned int)arg2;
- (void)replaceInOrderedTabViewItems:(id)arg1 atIndex:(unsigned int)arg2;
- (void)removeFromOrderedTabViewItemsAtIndex:(unsigned int)arg1;
- (id)tabViewItemForWebView:(id)arg1;
- (id)currentBrowserWebView;
- (id)currentBrowserOrOverlayWebView;
- (id)selectedTab;
- (unsigned long long)selectedTabIndex;
- (id)createTab;
- (id)createTabWithFrameName:(id)arg1;
- (id)createTabWithFrameName:(id)arg1 atIndex:(unsigned long long)arg2 andShow:(BOOL)arg3;
- (id)createInactiveTab;
- (id)createInactiveTabWithFrameName:(id)arg1;
- (void)selectTab:(id)arg1;
- (void)closeTab:(id)arg1;
- (void)closeTabOrWindow:(id)arg1;
- (void)closeOtherTabs:(id)arg1;
- (void)reloadTabsMatchingURLs:(id)arg1;
- (void)replaceTabsWithStates:(const Vector_55a9d292 *)arg1 allowGoBack:(BOOL)arg2;
- (void)replaceEmptyTabWithTabs:(id)arg1;
- (void)moveTab:(id)arg1 toIndex:(unsigned int)arg2;
- (void)moveTabFromOtherWindow:(id)arg1 toIndex:(unsigned int)arg2 andShow:(BOOL)arg3;
- (id)tabsWithUnsubmittedFormText;
- (unsigned long long)numberOfNonDisposableTabs;
- (unsigned long long)numberOfTabs;
- (void)updateTabLabelForWebView:(id)arg1;
- (double)tabBarHeight;
- (void)windowTitleNeedsUpdate;
- (void)firstResponderMightHaveChanged;
- (void)willShowCustomizeToolbarSheet;
- (id)windowForSheet;
- (BOOL)isAutoFilling;
- (BOOL)canShowInputFields;
- (id)locationField;
- (id)searchField;
- (struct ExtensionToolbarClientObjCAdapter *)extensionToolbarClient;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (void)windowDidBecomeKey:(id)arg1;
- (void)windowDidEndSheet:(id)arg1;
- (void)windowDidResignKey:(id)arg1;
- (void)windowDidBecomeMain:(id)arg1;
- (void)windowDidResignMain:(id)arg1;
- (struct CGSize)windowWillResize:(id)arg1 toSize:(struct CGSize)arg2;
- (void)windowDidResize:(id)arg1;
- (void)_safari_windowDidEndLiveResize;
- (void)windowDidMove:(id)arg1;
- (void)windowDidMiniaturize:(id)arg1;
- (void)windowDidDeminiaturize:(id)arg1;
- (struct CGRect)windowWillUseStandardFrame:(id)arg1 defaultFrame:(struct CGRect)arg2;
- (void)swipeWithEvent:(id)arg1;
- (BOOL)_formCompletionControllerHandleKeyEvent:(id)arg1;
- (BOOL)window:(id)arg1 performKeyEquivalent:(id)arg2;
- (BOOL)window:(id)arg1 willHandleKeyEvent:(id)arg2;
- (void)doCommandBySelector:(SEL)arg1;
- (BOOL)window:(id)arg1 willHandleMouseDownEvent:(id)arg2;
- (struct CGRect)window:(id)arg1 willPositionSheet:(id)arg2 usingRect:(struct CGRect)arg3;
- (id)windowWillReturnFieldEditor:(id)arg1 toObject:(id)arg2;
- (BOOL)windowShouldClose:(id)arg1;
- (void)_tellAppControllerWindowWillClose;
- (void)windowWillClose:(id)arg1;
- (id)browserWindowTitleBarURL:(id)arg1;
- (void)browserWindow:(id)arg1 shouldGoToURL:(id)arg2;
- (void)controlTextDidChange:(id)arg1;
- (void)controlTextDidEndEditing:(id)arg1;
- (BOOL)control:(id)arg1 textView:(id)arg2 doCommandBySelector:(SEL)arg3;
- (void)locationTextFieldURLDropped:(id)arg1;
- (id)bookmarkTitleForLocationTextField:(id)arg1;
- (BOOL)searchField:(id)arg1 shouldRememberSearchString:(id)arg2;
- (BOOL)searchField:(id)arg1 trackSearchButtonForEvent:(id)arg2 inRect:(struct CGRect)arg3;
- (void)locationTextFieldMarkedTextDidChange:(id)arg1;
- (void)locationTextFieldPerformStopReloadButtonAction:(id)arg1;
- (void)locationTextFieldPerformReaderButtonAction:(id)arg1;
- (void)locationTextFieldPerformRSSButtonAction:(id)arg1;
- (void)locationTextFieldPerformEVCertificateButtonAction:(id)arg1;
- (void)locationTextFieldPerformPrivateBrowsingButtonAction:(id)arg1;
- (void)locationTextField:(id)arg1 mouseUpInPrivateBrowsingButton:(id)arg2;
- (void)locationTextField:(id)arg1 mouseUpInStopReloadButton:(id)arg2;
- (BOOL)locationTextField:(id)arg1 mouseDownInRSSButton:(id)arg2;
- (void)locationTextField:(id)arg1 mouseUpInRSSButton:(id)arg2;
- (void)locationTextField:(id)arg1 mouseUpInReaderButton:(id)arg2 shouldShowContextMenu:(BOOL)arg3;
- (void)locationTextField:(id)arg1 mouseUpInEVCertificateButton:(id)arg2;
- (void)menuNeedsUpdate:(id)arg1;
- (BOOL)menuHasKeyEquivalent:(id)arg1 forEvent:(id)arg2 target:(id *)arg3 action:(SEL *)arg4;
- (unsigned long long)morphingDragImage:(id)arg1 draggingEntered:(id)arg2;
- (unsigned long long)morphingDragImage:(id)arg1 draggingUpdated:(id)arg2;
- (void)morphingDragImage:(id)arg1 draggingExited:(id)arg2;
- (BOOL)morphingDragImage:(id)arg1 performDragOperation:(id)arg2;
- (void)morphingDragImage:(id)arg1 enteredWindow:(id)arg2;
- (void)morphingDragImage:(id)arg1 exitedWindow:(id)arg2;
- (void)willSelectTabViewItem;
- (void)didSelectTabViewItem;
- (void)tabBarViewDidRearrangeTabsWithOldSelectedTabIndex:(unsigned long long)arg1;
- (void)updateTabTitlesSoon;
- (void)cancelUpdateTabTitlesSoon;
- (void)mainDocumentDidFirstVisuallyNonEmptyLayout;
- (void)webViewProgressHasStarted:(id)arg1;
- (void)webViewProgressValueHasChanged:(id)arg1;
- (void)webViewProgressHasFinished:(id)arg1;
- (void)webViewProgressHasStalled:(id)arg1;
- (void)webViewSheetRequestStatusHasChanged:(id)arg1;
- (void)webViewStatusMessageHasChanged:(id)arg1;
- (void)webViewLocationFieldURLHasChanged:(id)arg1;
- (void)webViewLocationFieldIconHasChanged:(id)arg1;
- (void)webViewMainDocumentHasLoaded:(id)arg1;
- (void)webViewLoadingStatusHasChanged:(id)arg1;
- (void)webViewReloadabilityHasChanged:(id)arg1;
- (void)webViewNameHasChanged:(id)arg1;
- (void)webViewBannerHasChanged:(id)arg1;
- (void)webViewFormEditedStatusHasChanged:(id)arg1;
- (void)webViewBlockedFromKeyViewLoopHasChanged:(id)arg1;
- (void)webViewSecureContentStatusHasChanged:(id)arg1;
- (void)webViewDidUpdateReaderAvailability:(id)arg1;
- (void)webViewReaderDidActivate:(id)arg1;
- (void)webViewReaderWillDeactivate:(id)arg1;
- (void)webViewReaderDidDeactivate:(id)arg1;
- (void)webViewReaderDidChangeNextPageLoadingState:(id)arg1;
- (void)webFrameLoadStarted:(id)arg1;
- (void)webFrameLoadCommitted:(id)arg1;
- (void)webViewMainDocumentDidFirstLayout:(id)arg1;
- (void)webFrameLoadFinished:(id)arg1 withError:(id)arg2;
- (void)webFrame:(id)arg1 willPerformClientRedirectToURL:(id)arg2;
- (void)dealloc;
- (BOOL)closeKeyEquivalentClosesTab;
- (void)bar:(struct ExtensionBar *)arg1 handleNavigationAction:(const struct SWebNavigationAction *)arg2 request:(const struct SWebURLRequest *)arg3;
- (struct SBrowserWindow *)browserWindowForBar:(const struct ExtensionBar *)arg1;
- (struct SBrowserWindow *)browserWindowForToolbarItem:(const struct ExtensionToolbarItem *)arg1;
- (void)bar:(struct ExtensionBar *)arg1 showWithAnimation:(BOOL)arg2;
- (void)bar:(struct ExtensionBar *)arg1 hideWithAnimation:(BOOL)arg2;
- (struct SBrowserWindow *)safariBrowserWindow;
- (void)sessionStateDidChange;
- (BOOL)shouldReaderIgnoreWindowChangeNotificationsForWebView:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface BugReportTextView : NSTextView
{
}

- (void)insertTab:(id)arg1;
- (void)insertBacktab:(id)arg1;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;

@end

@interface BugReportController : NSWindowController <NSTextFieldDelegate, NSTextViewDelegate, NSURLConnectionDelegate>
{
    NSTextField *URLField;
    NSTextView *descriptionTextView;
    NSPopUpButton *bugTypePopUp;
    NSButton *screenShotCheckBox;
    NSButton *sourceCheckBox;
    NSButton *submitButton;
    NSButton *disclosureButton;
    NSTabView *extras;
    NSString *_initialURLString;
    BOOL _isExpanded;
}

+ (id)customBugReportServerURLString;
- (id)initWithURLString:(id)arg1;
- (void)dealloc;
- (id)windowNibName;
- (void)toggleWindowSizeWithAnimation:(BOOL)arg1;
- (void)updateSubmitButton;
- (void)updateDisclosureButton;
- (void)windowDidLoad;
- (void)controlTextDidChange:(id)arg1;
- (void)textDidChange:(id)arg1;
- (void)submitBug:(id)arg1;
- (void)cancel:(id)arg1;
- (void)toggleWindowSize:(id)arg1;
- (id)bugURLString;
- (id)bugDescription;
- (int)bugType;
- (BOOL)shouldSendScreenShot;
- (BOOL)shouldSendSource;
- (void)sendBugReportToAppleWithScreenShot:(id)arg1 source:(id)arg2;
- (id)connection:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didFailLoadingWithError:(id)arg2;

@end

@interface ButtonHighlightingMenu : NSMenu
{
    NSButton *_button;
}

+ (id)menuWithButton:(id)arg1;
- (void)dealloc;

@end

@interface ButtonPlus : NSButton
{
    unsigned int _lastMouseDownModifierFlags;
    NSImage *_imageForNonMainWindow;
    BOOL _ignoresFirstMouse;
    BOOL _superviewIsFocusRingClipAncestor;
}

- (void)dealloc;
- (void)mouseDown:(id)arg1;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (id)imageForNonMainWindow;
- (unsigned int)lastMouseDownModifierFlags;
- (void)setAcceptsFirstMouse:(BOOL)arg1;
- (void)setImageForNonMainWindow:(id)arg1;
- (void)setSuperviewIsFocusRingClipAncestor:(BOOL)arg1;
- (id)_focusRingClipAncestor;

@end

@interface ButtonWithMenu : ButtonPlus
{
    id _menuProvider;
    SEL _menuSelector;
}

- (id)menuProvider;
- (void)setMenuProvider:(id)arg1;
- (SEL)menuSelector;
- (void)setMenuSelector:(SEL)arg1;
- (id)menu;
- (void)popUpMenu;
- (void)moveDown:(id)arg1;
- (void)moveUp:(id)arg1;
- (void)mouseDown:(id)arg1;

@end

@interface CacheController : NSWindowController <ReopensAtLaunch>
{
    NSMatrix *webCoreStatisticsMatrix;
    NSMatrix *webFoundationStatisticsMatrix;
    NSMatrix *javaScriptStatisticsMatrix;
    NSMatrix *javaScriptProtectedObjectsMatrix;
    NSMatrix *javaScriptAllObjectsMatrix;
    NSMatrix *siteIconStatisticsMatrix;
    NSMatrix *fontCacheStatisticsMatrix;
    NSMatrix *memoryStatisticsMatrix;
    NSMatrix *javaScriptMemoryStatisticsMatrix;
    NSTextField *webCoreCacheTotalPurgedTextField;
}

+ (id)sharedCacheController;
+ (void)reopen;
- (id)windowNibName;
- (void)windowDidLoad;
- (void)showWindow:(id)arg1;
- (void)emptyWebCoreCaches:(id)arg1;
- (void)emptyWebFoundationCaches:(id)arg1;
- (void)purgeInactiveFontData:(id)arg1;
- (void)setStat:(int)arg1 toKey:(id)arg2 fromDict:(id)arg3;
- (void)setTotal:(int)arg1 fromDict:(id)arg2;
- (void)refreshWebCoreStatisticsMatrix;
- (void)refreshWebFoundationStatisticsMatrix;
- (void)refreshJavaScriptStatisticsMatrix;
- (void)refreshSiteIconStatisticsMatrix;
- (void)refreshFontCacheStatisticsMatrix;
- (void)refreshMemoryStatisticsMatrix;
- (void)refreshStatistics:(id)arg1;
- (void)toggleDisableWebCoreCaches:(id)arg1;
- (void)garbageCollectJavaScriptObjects:(id)arg1;
- (void)returnFreeMemoryToSystem:(id)arg1;

@end

@interface CAImageExporter : NSObject
{
    CALayer *_layer;
    struct CGRect _bounds;
    NSDictionary *_options;
    struct CGColorSpace *_colorSpace;
}

- (id)initWithLayer:(id)arg1 bounds:(struct CGRect)arg2 options:(id)arg3;
- (void)dealloc;
- (id)layer;
- (struct CGRect)bounds;
- (struct CGImage *)createImageWithRenderer:(id)arg1 context:(struct _CGLContextObject *)arg2;
- (struct CGImage *)createImageForTime:(double)arg1;

@end

@interface CertificateUtilities : NSObject
{
}

+ (id)arrayWithLeafCertificateForTrustReference:(struct OpaqueSecTrustRef *)arg1;
+ (id)identitiesWithPolicy:(struct OpaqueSecPolicyRef *)arg1;
+ (id)labelForCertificates:(id)arg1;
+ (struct OpaqueSecPolicyRef *)sslPolicyForHost:(id)arg1 client:(BOOL)arg2;
+ (struct OpaqueSecTrustRef *)trustReferenceWithCertificates:(id)arg1 forPolicy:(struct OpaqueSecPolicyRef *)arg2;
+ (id)organizationNameForCertificate:(struct OpaqueSecCertificateRef *)arg1;
+ (id)_potentialEVChainWithCertificates:(id)arg1;
+ (struct OpaqueSecCertificateRef *)_rootCertificateWithSubjectOfCertificate:(struct OpaqueSecCertificateRef *)arg1;
+ (id)_allowedRootCertificatesForOidString:(id)arg1;
+ (struct cssm_data *)_copyFieldDataForOid:(struct cssm_data *)arg1 inCert:(struct cssm_data *)arg2 withHandle:(long long)arg3;
+ (struct OpaqueSecPolicyRef *)copyOcspPolicyWithOptions:(unsigned int)arg1;
+ (BOOL)_isRevocationServerMetaError:(int)arg1;
+ (id)_extendedValidationOrganizationNameForHost:(id)arg1 withCertificates:(id)arg2;
+ (id)_evCAOidDict;
+ (id)_decimalStringForOid:(struct cssm_data *)arg1;
+ (void)_freeFieldData:(struct cssm_data *)arg1 forOid:(struct cssm_data *)arg2 withHandle:(long long)arg3;
+ (id)_hexStringForOid:(struct cssm_data *)arg1;
+ (id)_oidStringForCertificatePolicies:(const CDStruct_166d2db6 *)arg1;
+ (id)_certificateChainForTrustReference:(struct OpaqueSecTrustRef *)arg1;

@end

@interface ClippedItemsIndicator : ButtonPlus
{
    id _delegate;
    NSMenu *_menu;
    struct OpaqueWindowPtr *_menuWindow;
    struct OpaqueEventHandlerRef *_controlOwningWindowChangedHandler;
}

- (id)initWithFrame:(struct CGRect)arg1;
- (id)init;
- (void)dealloc;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (BOOL)needsPanelToBecomeKey;
- (void)moveDown:(id)arg1;
- (void)moveUp:(id)arg1;
- (void)moveRight:(id)arg1;
- (void)moveLeft:(id)arg1;
- (void)performClick:(id)arg1;
- (void)viewDidMoveToWindow;
- (void)mouseDown:(id)arg1;

@end

@interface ClosedTabStateHolder : NSObject
{
    BrowserWindowController *_browserWindowController;
    struct RefPtr<Safari::BrowserTabPersistentState> _lastClosedTabState;
}

- (id)initWithBrowserWindowController:(id)arg1;
- (void)dealloc;
- (struct BrowserTabPersistentState *)lastClosedTabState;
- (void)setLastClosedTabState:(PassRefPtr_84a5eb56)arg1;
- (void)clearLastClosedTabState;
- (void)_undoCloseTabAtIndex:(unsigned long long)arg1 andShow:(BOOL)arg2;
- (void)_closeTabWithoutConfirming:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface ColoredRect : NSView
{
    NSColor *_color;
    int _type;
}

- (id)initWithFrame:(struct CGRect)arg1;
- (void)dealloc;
- (void)drawRect:(struct CGRect)arg1;
- (int)colorType;
- (void)setColorType:(int)arg1;
- (id)color;
- (void)setColor:(id)arg1;

@end

@interface CompletionControllerObjCAdapter : NSObject <NSTableViewDataSource, NSTableViewDelegate>
{
    struct CompletionController {
        void **;
        int;
        struct RetainPtr<CompletionControllerObjCAdapter>;
        CompletionWindow *;
        CompletionListTableView *;
        NSWindow *;
        struct Vector<WTF::RefPtr<Safari::CompletionListItem>, 0ul>;
        struct SString;
        STimer_7d4eea56;
        STimer_7d4eea56;
        STimer_7d4eea56;
        double;
        unsigned long long;
        _Bool;
        _Bool;
        _Bool;
        _Bool;
        _Bool;
        _Bool;
        _Bool;
    } *_completionController;
}

- (long long)numberOfRowsInTableView:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (BOOL)completionListTableView:(id)arg1 rowIsSeparator:(long long)arg2;
- (BOOL)completionListTableView:(id)arg1 rowIsChecked:(long long)arg2;
- (BOOL)completionListTableView:(id)arg1 rowSpansAllColumns:(long long)arg2;
- (void)tableViewSelectionDidChange:(id)arg1;
- (void)tableViewSelectionIsChanging:(id)arg1;
- (double)tableView:(id)arg1 heightOfRow:(long long)arg2;
- (BOOL)tableView:(id)arg1 shouldSelectRow:(long long)arg2;
- (BOOL)tableView:(id)arg1 shouldShowCellExpansionForTableColumn:(id)arg2 row:(long long)arg3;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (void)completionListTableView:(id)arg1 mouseUpInRow:(long long)arg2;
- (id)initWithCompletionController:(struct CompletionController *)arg1;
- (void)completionListDidShow;
- (void)completionListDidHide;

@end

@interface CompletionListItemObjC : NSObject
{
    struct RefPtr<Safari::CompletionListItem> _item;
}

- (id)initWithItem:(PassRefPtr_46da3955)arg1;
- (struct CompletionListItem *)item;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface CompletionListTableView : NSTableView
{
    BOOL _actsLikeMenu;
    BOOL _lastMousePositionWasOverList;
}

- (void)mouseMoved:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)drawRow:(long long)arg1 clipRect:(struct CGRect)arg2;
- (struct CGRect)frameOfCellAtColumn:(long long)arg1 row:(long long)arg2;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (BOOL)accessibilityIsIgnored;
- (void)setActsLikeMenu:(BOOL)arg1;
- (BOOL)actsLikeMenu;

@end

@interface RoundRectView : NSView
{
    double _cornerRadius;
}

- (void)setCornerRadius:(double)arg1;
- (double)cornerRadius;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface CompletionWindow : NSWindow
{
}

- (id)initWithContentRect:(struct CGRect)arg1 styleMask:(unsigned long long)arg2 backing:(unsigned long long)arg3 defer:(BOOL)arg4;
- (BOOL)wantsScrollWheelEvent:(id)arg1;
- (BOOL)accessibilityIsIgnored;
- (double)cornerRadius;
- (BOOL)cornersAreRounded;
- (void)setCornersAreRounded:(BOOL)arg1;

@end

@interface CroppingOverlayView : FadingOverlayView
{
    struct CGRect _targetViewCropRect;
    struct CGRect _targetViewCropRectBeforeLiveResize;
    struct CGSize _minimumCropRectSize;
    id _delegate;
    BOOL _displaysHandles;
}

+ (float)maximumOverlayAlpha;
- (void)drawRect:(struct CGRect)arg1;
- (BOOL)isFlipped;
- (void)mouseDown:(id)arg1;
- (void)setFrame:(struct CGRect)arg1;
- (void)setFrameOrigin:(struct CGPoint)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (id)initWithOverlay:(id)arg1;
- (void)setHolesNeedUpdateInRect:(struct CGRect)arg1;
- (void)targetWindowDidEndLiveResize;
- (void)targetWindowWillStartLiveResize;
- (struct CGRect)cropRect;
- (id)delegate;
- (BOOL)displaysHandles;
- (struct CGSize)minimumCropRectSize;
- (void)setCropRect:(struct CGRect)arg1 constrainedToTarget:(BOOL)arg2;
- (void)setDelegate:(id)arg1;
- (void)setDisplaysHandles:(BOOL)arg1;
- (void)setMinimumCropRectSize:(struct CGSize)arg1;

@end

@interface CustomDisabledImageButtonCell : NSButtonCell
{
    NSImage *_disabledImage;
    NSImage *_disabledImageForNonMainWindow;
}

+ (id)updateCellForButton:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)setDisabledImage:(id)arg1;
- (id)disabledImage;
- (void)setDisabledImageForNonMainWindow:(id)arg1;
- (id)disabledImageForNonMainWindow;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface DashboardWebClipController : NSObject
{
}

+ (id)sharedController;
- (void)createClipWithWebView:(id)arg1 element:(id)arg2 cropRect:(struct CGRect)arg3;
- (struct CGSize)minimumWebClipContentSize;

@end

@interface DateCell : ImageAndTextCell
{
    NSFont *_lastFont;
    NSFont *_smallerFont;
    NSMutableAttributedString *_lastDateString;
    double _lastDateInterval;
    NSMutableAttributedString *_ampmDesignator;
    NSMutableDictionary *_normalAttributes;
    BOOL _use24HourFormat;
    BOOL _okToUseYesterdayAndToday;
    BOOL _omitTime;
    float _detailLevelWidths[8];
    float _todayAndYesterdayWidths[4];
    float _lastWidth;
    int _dateDetailLevel;
}

+ (void)initialize;
+ (id)updateCellForColumn:(id)arg1 inView:(id)arg2;
- (id)init;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (BOOL)_updateDateColumnDetailLevels;
- (float)_widthOfLongestDateStringWithLevel:(int)arg1 format:(id)arg2;
- (void)_updateDateColumnDetailLevelWidths;
- (float)minimumWidth;
- (struct CGRect)drawingRectForBounds:(struct CGRect)arg1;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)setFont:(id)arg1;
- (void)setTimeOmitted:(BOOL)arg1;

@end

@interface Stopwatch : NSObject
{
    double startTime;
    double finishTime;
}

- (void)start;
- (void)finish;
- (double)runTime;

@end

@interface DebugUtilities : NSObject <NSMenuDelegate>
{
    NSTask *sampleToolTask;
    NSTask *sharkToolTask;
    NSString *sampleToolOutputPath;
    NSString *sharkToolOutputBase;
    NSMenu *debugMenu;
    NSDate *stressTestStartTime;
    NSTimer *stressTestTimer;
    NSMutableArray *stressTestURLHistory;
    unsigned int stressResourceCount;
    StressHUD *stressHUD;
    Watchdog *watchdog;
    NSMutableDictionary *stopwatches;
    int numTestsLeftToComplete;
    BOOL shouldSuppressAlerts;
}

+ (void)load;
+ (id)sharedDebugUtilities;
+ (const char *)crashReporterInfo;
- (id)init;
- (void)dealloc;
- (void)setSampleToolOutputPath:(id)arg1;
- (BOOL)startSampleToolWithIdentifier:(id)arg1;
- (BOOL)startSampleTool;
- (BOOL)stopSampleTool;
- (void)setSharkToolOutputBase:(id)arg1;
- (void)startProfiling:(id)arg1;
- (void)stopProfiling:(id)arg1;
- (BOOL)startSharkToolWithIdentifier:(id)arg1;
- (BOOL)startSharkTool;
- (BOOL)stopSharkTool;
- (void)navigateToNextStressTestPage:(id)arg1;
- (void)stressTestPageLoadStarted:(id)arg1;
- (void)startStressTest;
- (void)stopStressTest;
- (BOOL)isStressTestRunning;
- (void)incrementResourceCount;
- (double)stressUpTime;
- (unsigned int)stressPageCount;
- (unsigned int)stressResourceCount;
- (void)toggleStressTest:(id)arg1;
- (BOOL)validate_toggleStressTest:(id)arg1;
- (void)toggleSuppressAlerts:(id)arg1;
- (BOOL)validate_toggleSuppressAlerts:(id)arg1;
- (void)toggleWatchdog:(id)arg1;
- (BOOL)validate_toggleWatchdog:(id)arg1;
- (void)_populateDebugMenu;
- (void)createDebugMenu;
- (void)menuNeedsUpdate:(id)arg1;
- (BOOL)menuHasKeyEquivalent:(id)arg1 forEvent:(id)arg2 target:(id *)arg3 action:(SEL *)arg4;
- (void)startStopwatchWithIdentifier:(id)arg1;
- (void)stopStopwatchWithIdentifier:(id)arg1;
- (double)stopwatchRunTimeWithIdentifier:(id)arg1;
- (void)maybeQuitAfterTestCompleted;
- (BOOL)shouldSuppressAlerts;
- (void)setShouldSuppressAlerts:(BOOL)arg1;
- (void)startWatchdog;
- (void)stopWatchdog;
- (void)checkInWithWatchdog:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;

@end

@interface DefaultWebAppPopUpController : NSObject <NSMenuDelegate>
{
    NSPopUpButton *_defaultWebApp;
    NSOpenPanel *_selectAppPanel;
    NSDictionary *_webApp;
    int _webIndex;
    NSArray *_schemes;
    NSArray *_fileExtensions;
    unsigned int _OSType;
    NSURL *_sampleURL;
}

- (struct __CFURL *)urlForEntry:(id)arg1;
- (int)indexOfItemInPopUp:(id)arg1 closestToValue:(id)arg2;
- (void)setAppPopUp:(id)arg1 toValue:(id)arg2;
- (BOOL)handleApplicationPopUp:(id)arg1 withSheetDidEndSelector:(SEL)arg2;
- (BOOL)populateSchemeHandlerPopupWithURL:(id)arg1 forPopup:(id)arg2;
- (void)populateWebPopUpWithDefault;
- (id)dictionaryForScheme:(id)arg1;
- (void)setHandler:(id)arg1 forScheme:(id)arg2 saveAndRefresh:(BOOL)arg3;
- (void)setDefaultLSWeakBindingsForApp:(id)arg1;
- (void)setNewWebApplication;
- (void)webAppSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)webApplicationSelected:(id)arg1;
- (void)populatePopUp;
- (void)showDefaultInPopUp;
- (id)initWithPopUp:(id)arg1 schemes:(id)arg2 fileExtensions:(id)arg3 OSType:(unsigned int)arg4 sampleURL:(id)arg5;
- (void)dealloc;
- (void)menuNeedsUpdate:(id)arg1;
- (BOOL)menuHasKeyEquivalent:(id)arg1 forEvent:(id)arg2 target:(id *)arg3 action:(SEL *)arg4;

@end

@interface DevelopMenuController : NSObject <NSMenuDelegate>
{
    NSMenuItem *_developMenuItem;
    NSMenu *_userAgentMenu;
    NSMenu *_openWithMenu;
    BOOL _menuInstalled;
    struct SnippetEditorController *_snippetEditorController;
}

+ (id)sharedController;
- (void)dealloc;
- (void)installMenu;
- (void)removeMenu;
- (void)showSnippetEditor:(id)arg1;
- (void)menuNeedsUpdate:(id)arg1;
- (BOOL)menuHasKeyEquivalent:(id)arg1 forEvent:(id)arg2 target:(id *)arg3 action:(SEL *)arg4;

@end

@interface DigitStringFormatter : NSFormatter
{
}

- (id)stringForObjectValue:(id)arg1;
- (BOOL)getObjectValue:(id *)arg1 forString:(id)arg2 errorDescription:(id *)arg3;
- (BOOL)isPartialStringValid:(id)arg1 newEditingString:(id *)arg2 errorDescription:(id *)arg3;

@end

@interface DiskArbitrationHelper2 : NSObject
{
    struct __DASession *_session;
    NSTimer *_diskArbTimer;
    BOOL _diskArbDone;
    int _diskArbResult;
}

+ (id)helper;
- (id)init;
- (void)dealloc;
- (int)synchronousWaitIdleWithTimeout:(double)arg1;
- (int)synchronousEject:(id)arg1 withTimeout:(double)arg2;
- (int)synchronousUnmountDisk:(id)arg1 force:(BOOL)arg2 whole:(BOOL)arg3 withTimeout:(double)arg4;
- (int)synchronousUnmount:(id)arg1 force:(BOOL)arg2 withTimeout:(double)arg3;
- (int)synchronousUnmount:(id)arg1 force:(BOOL)arg2 whole:(BOOL)arg3 withTimeout:(double)arg4;
- (void)_diskArbTimedOut:(id)arg1;
- (void)_setDiskArbDone:(BOOL)arg1;
- (void)_setDiskArbResult:(int)arg1;

@end

@interface DownloadMonitor : NSObject <NSURLConnectionDelegate>
{
    NSMutableArray *_entries;
    NSMutableDictionary *_downloadToEntry;
    NSMutableDictionary *_identifierToEntry;
    NSMutableSet *_openableDownloadRequests;
    BOOL _downloadsChanged;
    BOOL _loadedDownloadHistory;
    BOOL _hadEntriesOnDisk;
    BOOL _isPlanningToWriteOnQuit;
}

+ (id)sharedDownloadMonitor;
+ (id)downloadBundleExtension;
- (id)init;
- (void)downloadDidBegin:(id)arg1;
- (void)download:(id)arg1 willResumeWithResponse:(id)arg2 fromByte:(long long)arg3;
- (void)download:(id)arg1 didReceiveResponse:(id)arg2;
- (void)download:(id)arg1 decideDestinationWithSuggestedFilename:(id)arg2;
- (void)download:(id)arg1 didReceiveDataOfLength:(unsigned long long)arg2;
- (BOOL)download:(id)arg1 shouldDecodeSourceDataOfMIMEType:(id)arg2;
- (void)download:(id)arg1 didCreateDestination:(id)arg2;
- (void)downloadDidFinish:(id)arg1;
- (void)download:(id)arg1 didFailWithError:(id)arg2;
- (void)startDownloadForRequest:(id)arg1 mayOpenWhenDone:(BOOL)arg2;
- (void)startDownloadForRequest:(id)arg1 mayOpenWhenDone:(BOOL)arg2 allowOverwrite:(BOOL)arg3 path:(id)arg4;
- (void)stopAllDownloads;
- (void)cancelDownload:(id)arg1 entry:(id)arg2 withError:(id)arg3;
- (void)cancelDownload:(id)arg1 withError:(id)arg2;
- (void)resumeDownloadAtPath:(id)arg1;
- (id)entries;
- (id)busyEntries;
- (unsigned int)indexOfEntry:(id)arg1;
- (void)insertEntry:(id)arg1 atIndex:(unsigned int)arg2;
- (void)removeEntries:(id)arg1;
- (void)removeEntry:(id)arg1;
- (void)removeIdleEntries;
- (int)total;
- (int)totalBusy;
- (int)totalIdle;
- (id)downloadWindowForAuthenticationSheet:(id)arg1;
- (void)downloadMayBeOpenedForRequest:(id)arg1;
- (id)validEntriesFromEntries:(id)arg1 forBooleanKey:(id)arg2;
- (void)savePendingChangesBeforeTermination;
- (void)setEntry:(id)arg1 forDownload:(id)arg2;

@end

@interface DownloadProgressEntry : ResourceProgressEntry
{
    NSURLDownload *_download;
    NSURLRequest *_request;
    NSURLResponse *_response;
    DownloadFile *_downloadFile;
    NSMutableArray *_postDownloadFiles;
    NSString *_directoryPath;
    NSString *_identifier;
    NSDictionary *_resumeInformation;
    struct _BOMCopier *_copier;
    NSDate *_startDate;
    BOOL _openWhenDone;
    BOOL _allowOverwrite;
    BOOL _observingWidgetInstallationNotification;
    int _downloadStage;
    long long _realBytesExpected;
    long long _bytesLoadedAtStart;
    int _iconNumber;
    long long _lastBytesPerSecond;
}

- (id)initWithRequest:(id)arg1 bytesLoaded:(long long)arg2 bytesExpected:(long long)arg3 error:(id)arg4 download:(id)arg5 downloadFile:(id)arg6 postDownloadFile:(id)arg7 downloadPath:(id)arg8 postDownloadPath:(id)arg9 downloadStage:(int)arg10 identifier:(id)arg11 mayOpenWhenDone:(BOOL)arg12 allowOverwrite:(BOOL)arg13;
- (id)initWithDictionary:(id)arg1;
- (id)initWithDownload:(id)arg1 mayOpenWhenDone:(BOOL)arg2 allowOverwrite:(BOOL)arg3;
- (id)createDownloadBundleWithFilename:(id)arg1;
- (id)currentFile;
- (id)dictionaryRepresentation;
- (id)downloadFile;
- (id)identifier;
- (BOOL)saveStateToPList;
- (void)setDownloadFileWithPath:(id)arg1;
- (void)setResponse:(id)arg1 bytesLoaded:(long long)arg2;
- (id)response;
- (id)URL;
- (BOOL)aliasFileExists;
- (BOOL)fileExists;
- (id)currentPath;
- (id)filename;
- (void)setDirectoryPath:(id)arg1;
- (BOOL)open;
- (void)resume;
- (BOOL)reveal;
- (void)stop;
- (BOOL)allowOverwrite;
- (BOOL)canAttemptOpen;
- (BOOL)canAttemptResume;
- (BOOL)canAttemptReveal;
- (BOOL)canStop;
- (BOOL)canResumeOrReload;
- (BOOL)isIdle;
- (BOOL)isBusy;
- (void)setBytesLoaded:(long long)arg1;
- (void)setBytesExpected:(long long)arg1;
- (long long)bytesExpected;
- (long long)bytesLoadedSinceStart;
- (long long)bytesPerSecond;
- (long long)secondsRemaining;
- (int)downloadStage;
- (void)setDownloadStage:(int)arg1;
- (BOOL)notEnoughFreeDiskSpaceAtCurrentPath;

@end

@interface DownloadWindowController : NSWindowController <NSWindowDelegate>
{
    WebDynamicScrollBarsView *_scrollView;
    DownloadViewController *_viewController;
    BarBackground *_barBackground;
    NSTextField *_totalTextField;
    NSControl *_clearControl;
    EtchedStringView *_totalStringView;
    BOOL _waitingToShowTerminationSheet;
    NSMutableArray *_entriesToPrompt;
    NSMutableArray *_corruptDownloadsToReport;
    NSMutableArray *_invalidPathsToPrompt;
}

+ (id)sharedDownloadWindowController;
- (void)awakeFromNib;
- (id)initWithWindowNibName:(id)arg1;
- (void)_setTotalField;
- (void)_setClearControlState;
- (void)windowDidLoad;
- (struct CGRect)windowWillUseStandardFrame:(id)arg1 defaultFrame:(struct CGRect)arg2;
- (void)showWindow:(id)arg1;
- (void)downloadsDidChange:(id)arg1;
- (void)downloadDidStart:(id)arg1;
- (void)downloadEntryStageChanged:(id)arg1;
- (void)clear:(id)arg1;
- (void)_runTerminationSheet;
- (void)terminationSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)_runCorruptDownloadForSecureDownloadProgressEntry:(id)arg1;
- (void)corruptDownloadSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)_runInvalidDownloadSheetForPath:(id)arg1;
- (void)_runQueuedAlertSheet;
- (void)windowDidEndSheet:(id)arg1;
- (void)askToTerminateWhileDownloading;
- (void)promptForDownloadProgressEntry:(id)arg1 assessment:(id)arg2;
- (void)reportInsufficientDiskSpaceSheetForDownload:(id)arg1;
- (void)reportCorruptDownloadForSecureDownloadProgressEntry:(id)arg1;
- (void)reportInvalidDownloadFileErrorForPath:(id)arg1;

@end

@interface EtchedStringButtonCell : NSButtonCell
{
    BOOL _isTextCentered;
    int _textTruncation;
    NSColor *_bottomColor;
    NSColor *_topColor;
}

+ (id)font;
+ (id)_defaultTopColor;
+ (id)_defaultBottomColor;
- (id)initTextCell:(id)arg1;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setBottomColor:(id)arg1;
- (id)bottomColor;
- (void)setTopColor:(id)arg1;
- (id)topColor;
- (struct CGRect)textRectForFrame:(struct CGRect)arg1;
- (id)attributedTitle;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)setTextTruncation:(int)arg1;
- (int)textTruncation;
- (void)setTextCentered:(BOOL)arg1;
- (BOOL)isTextCentered;
- (BOOL)_needRedrawOnWindowChangedKeyState;

@end

@interface EtchedStringView : NSView
{
    NSString *_string;
    NSString *_helpString;
    BOOL _isCentered;
}

+ (id)font;
+ (id)replaceTextField:(id)arg1;
+ (id)lightColor;
+ (id)darkColor;
- (void)dealloc;
- (id)font;
- (id)string;
- (void)setString:(id)arg1;
- (id)accessibilityHelpString;
- (void)setAccessibilityHelpString:(id)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (BOOL)isCentered;
- (void)setCentered:(BOOL)arg1;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (BOOL)accessibilityIsIgnored;

@end

@interface EventSendingLKView : LKView
{
    EventSendingLKViewPrivate *_eventSendingPrivate;
}

- (id)initWithFrame:(struct CGRect)arg1;
- (void)dealloc;
- (unsigned long long)draggingEntered:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (void)draggingExited:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (id)view:(id)arg1 stringForToolTip:(long long)arg2 point:(struct CGPoint)arg3 userData:(void *)arg4;
- (long long)addTrackingRect:(struct CGRect)arg1 owner:(id)arg2 userData:(void *)arg3 assumeInside:(BOOL)arg4;
- (long long)_addTrackingRect:(struct CGRect)arg1 owner:(id)arg2 userData:(void *)arg3 assumeInside:(BOOL)arg4 useTrackingNum:(int)arg5;
- (void)_addTrackingRects:(struct CGRect *)arg1 owner:(id)arg2 userDataList:(void **)arg3 assumeInsideList:(char *)arg4 trackingNums:(long long *)arg5 count:(int)arg6;
- (void)keyDown:(id)arg1;
- (void)keyUp:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)otherMouseDown:(id)arg1;
- (void)otherMouseDragged:(id)arg1;
- (void)otherMouseUp:(id)arg1;
- (void)scrollWheel:(id)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)removeTrackingRect:(long long)arg1;
- (void)_removeTrackingRects:(long long *)arg1 count:(int)arg2;
- (struct EventSendingLayer *)eventSendingLayer;

@end

@interface EventSendingLKViewPrivate : NSObject
{
    NSString *toolTip;
    long long lastToolTipTag;
    id trackingRectOwner;
    void *trackingRectUserData;
}

@end

@interface ExtensionsPreferences : PreferencesModule
{
    WebView *webView;
    struct OwnPtr<Safari::ExtensionsView> _extensionsView;
    struct OwnPtr<Safari::ExtensionsViewController> _extensionsViewController;
    struct CGSize _originalContentMinSize;
    struct CGSize _originalContentMaxSize;
    unsigned long long _previousEnabledHeight;
    BOOL _usingDisabledHeight;
}

- (id)imageForPreferenceNamed:(id)arg1;
- (void)awakeFromNib;
- (BOOL)isResizable;
- (void)willBeDisplayed;
- (void)moduleWasInstalled;
- (void)moduleWillBeRemoved;
- (void)_updateMinSize;
- (void)_resizeWindowToContentHeight:(double)arg1 animated:(BOOL)arg2;
- (void)resizeWindowToDisabledHeight;
- (void)resizeWindowToEnabledHeight;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface ExtensionUninstallConfirmSheetHandler : NSObject
{
}

- (void)uninstallExtensionConfirmationDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;

@end

@interface ExtensionBarBackground : BarBackground
{
    BOOL _hasToolbarBottomBorder;
}

- (void)drawRect:(struct CGRect)arg1;
- (void)setHasToolbarBottomBorder:(BOOL)arg1;
- (BOOL)hasToolbarBottomBorder;

@end

@interface FadingOverlay : Overlay
{
}

- (id)fadingOverlayView;
- (float)fractionFadedIn;
- (void)setFractionFadedIn:(float)arg1;
- (void)setHolesNeedUpdateInTargetViewRect:(struct CGRect)arg1;

@end

@interface FadingOverlayView : NSView
{
    FadingOverlay *_fadingOverlay;
    float _fractionFadedIn;
}

+ (float)maximumOverlayAlpha;
- (void)dealloc;
- (void)detachFromOverlay;
- (void)drawRect:(struct CGRect)arg1;
- (float)fractionFadedIn;
- (id)initWithOverlay:(id)arg1;
- (id)fadingOverlay;
- (void)setFractionFadedIn:(float)arg1;
- (void)setHolesNeedUpdateInRect:(struct CGRect)arg1;
- (void)targetWindowDidEndLiveResize;
- (void)targetWindowWillStartLiveResize;

@end

@interface FavoriteButton : RolloverTextButton
{
    WebBookmark *_bookmark;
    NSMenu *_contentsMenu;
    NewBookmarksController *_titleChangeController;
    BOOL _drawForDragging;
    BOOL _ignoreModifiers;
    BOOL _showUnreadRSSCount;
    BOOL _menuOpen;
    struct OwnPtr<Safari::SObjCNotifier> _notifier;
}

+ (void)_updateCellClass;
+ (id)draggedButton;
+ (void)setDraggedButton:(id)arg1;
+ (id)font;
- (id)description;
- (void)registerForDraggedTypes;
- (void)_setAttributes;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithBookmark:(id)arg1 frame:(struct CGRect)arg2 showUnreadRSSCounts:(BOOL)arg3;
- (id)bookmarkSource;
- (void)dealloc;
- (void)setTitle:(id)arg1;
- (id)bookmark;
- (BOOL)automaticallyOpensInTabs;
- (void)setBookmark:(id)arg1;
- (id)_tabLocation;
- (void)_goToBookmark;
- (void)_goToAllInTabsCombiningNewsFeeds:(id)arg1;
- (void)_goToAllInTabs:(id)arg1;
- (void)_goToInNewTab:(id)arg1;
- (void)_goToInNewWindow:(id)arg1;
- (void)_titleChangeSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)_editTitle:(id)arg1;
- (void)_editAddress:(id)arg1;
- (void)_editContents:(id)arg1;
- (void)_revealFavorite:(id)arg1;
- (void)_copyBookmark:(id)arg1;
- (id)menu;
- (BOOL)hasContentsMenu;
- (id)contentsMenu;
- (BOOL)_shouldDrawDragged;
- (void)_setShouldDrawDragged:(BOOL)arg1;
- (id)_clipViewAncestor;
- (void)drawForDraggingImageInRect:(struct CGRect)arg1;
- (void)_bookmarksReloaded:(const struct SNotification *)arg1;
- (void)startObservingBookmarkReloads;
- (void)stopObservingBookmarkReloads;
- (void)performDragFromMouseDown:(id)arg1 withViewFrameOrigin:(struct CGPoint)arg2;
- (BOOL)mouseDownIsInMenuArrow:(id)arg1;
- (BOOL)canDragHorizontally:(BOOL)arg1 fromMouseDown:(id)arg2;
- (BOOL)shouldShowContentsMenuFromEvent:(id)arg1 waitedForDragDelay:(BOOL)arg2;
- (void)popUpContentsMenu;
- (BOOL)isMenuOpen;
- (void)moveDown:(id)arg1;
- (void)moveUp:(id)arg1;
- (void)moveRight:(id)arg1;
- (void)moveLeft:(id)arg1;
- (void)performClick:(id)arg1;
- (void)performClickIgnoringModifiers:(id)arg1;
- (void)activateButtonAndPopUpContentsMenu;
- (void)mouseDown:(id)arg1;
- (void)otherMouseDown:(id)arg1;
- (void)rightMouseDown:(id)arg1;
- (unsigned long long)draggingSourceOperationMaskForLocal:(BOOL)arg1;
- (void)deleteFolderSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)confirmDeletingFolder;
- (void)deleteAfterDrag;
- (void)draggedImage:(id)arg1 endedAt:(struct CGPoint)arg2 operation:(unsigned long long)arg3;
- (id)bookmarksFromPasteboard:(id)arg1;
- (int)numberOfBookmarksOnPasteboard:(id)arg1;
- (unsigned long long)determineDragOperation:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (void)draggingExited:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (BOOL)canAcceptDroppedBookmarkAtPoint:(struct CGPoint)arg1;
- (void)setHighlighted:(BOOL)arg1;
- (void)acceptDroppedBookmark:(id)arg1;
- (id)_hitTest:(const struct CGPoint *)arg1 dragTypes:(id)arg2;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface FavoriteButtonCell : RolloverTextButtonCell
{
    int _indicator;
    BOOL _shouldDrawDragged;
    BOOL _isTrackingMouseDown;
    NSArray *_accessibilityAttributes;
    NSArray *_accessibilityActions;
}

+ (id)squareImage;
+ (id)highlightedSquareImage;
+ (id)triangleImage;
+ (id)highlightedTriangleImage;
- (void)dealloc;
- (id)indicatorImage;
- (struct CGSize)cellSize;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;
- (struct CGRect)imageRectForBounds:(struct CGRect)arg1;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)setIndicator:(int)arg1;
- (int)indicator;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityActionNames;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (BOOL)accessibilityIsIgnored;
- (void)setShouldDrawDragged:(BOOL)arg1;
- (BOOL)_shouldDrawDragged;
- (BOOL)_shouldDrawBezel;
- (BOOL)showsBorderOnlyWhileMouseInside;
- (void)setTrackingMouseDown:(BOOL)arg1;
- (BOOL)isTrackingMouseDown;

@end

@interface FavoriteButtonCellOld : RolloverTextButtonCellOld
{
    int _indicator;
}

+ (id)squareImage;
+ (id)highlightedSquareImage;
+ (id)triangleImage;
+ (id)highlightedTriangleImage;
- (id)indicatorImage;
- (struct CGSize)cellSize;
- (struct CGRect)imageRectForBounds:(struct CGRect)arg1;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)setIndicator:(int)arg1;
- (int)indicator;
- (void)accessibilityPerformAction:(id)arg1;

@end

@interface FavoritesBarToggleButton : NSButton
{
}

- (id)_clipViewAncestor;

@end

@interface FavoritesBarView : SlidingViewsBar
{
    BOOL _preparedForFirstLayout;
    float _firstFavoriteLeftEdge;
    float _buttonHeight;
    float _lastWidth;
    NSArray *_proxyIdentifiers;
    BOOL _showUnreadRSSCounts;
    NSMutableArray *_clippedMenuItems;
    BOOL _shouldAbortDrop;
    unsigned int _builtInSubviewsCount;
    FavoriteButton *_queueButton;
    NSTimer *_menuTrackingTimer;
    struct OwnPtr<Safari::SObjCNotifier> _notifier;
    BOOL _windowDidClose;
}

+ (id)supportedProxyIdentifiers;
- (void)dealloc;
- (BOOL)performDragOperation:(id)arg1;
- (id)menu;
- (void)drawRect:(struct CGRect)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (BOOL)isOpaque;
- (id)menuItemsForClippedItemsIndicator:(id)arg1;
- (void)finishedSlidingAnimation:(id)arg1;
- (double)buttonBottomOffset;
- (unsigned long long)dropIndexFromDraggingInfo:(id)arg1;
- (unsigned long long)lastNonSlidingViewIndex;
- (double)minButtonX;
- (double)minSlidingViewX;
- (double)maxButtonXWithClipIndicator;
- (double)maxButtonXWithoutClipIndicator;
- (double)paddingBetweenButtons;
- (void)refreshButtons;
- (void)reorderedSlidingView:(id)arg1;
- (unsigned long long)updateDropTarget:(id)arg1;
- (double)widthOfDraggingInfo:(id)arg1;
- (void)beginTrackingFavoritesMenus;
- (void)confirmURLAndTitleForNewBookmark:(id)arg1;
- (void)endTrackingFavoritesMenus;
- (BOOL)hasQueuedButtonMenu;
- (BOOL)isTrackingFavoritesMenus;
- (void)removeProxyWithIdentifier:(id)arg1;
- (void)showQueuedButtonMenu;
- (void)windowWillClose;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface FileLocker : NSObject
{
    NSString *_path;
    NSString *_hostname;
    NSObject<FileLockerDelegate> *_delegate;
    double _timeout;
    BOOL _locked;
}

- (BOOL)isOnLocalHost;
- (id)computeHostname;
- (id)initWithPath:(id)arg1 delegate:(id)arg2 timeout:(double)arg3;
- (void)dealloc;
- (id)path;
- (id)lockDirectoryPath;
- (id)lockFilePath;
- (id)lockFileContentsDictionary;
- (void)removeLockFile;
- (void)writeLockFile;
- (BOOL)matchesHostNameFromLockDictionary:(id)arg1;
- (BOOL)lockIsNotValid:(id)arg1;
- (int)actionForApparentlyAbandonedLock:(id)arg1 onAttempt:(int)arg2;
- (int)lock;
- (void)unlock;

@end

@interface FindBanner : BannerWithOverlay
{
    NSSearchField *searchField;
    NSSegmentedControl *nextPreviousControl;
    NSButton *doneButton;
    NSTextField *statusField;
    BrowserCoachMarkController *_coachMarkController;
    WebDataSource *_highlightedDataSource;
    NSString *_highlightedString;
    unsigned int _matchCount;
    NSArray *_textRects;
    int _lastFindPasteboardChangeCount;
    BOOL _nextReturnShouldPerformFind;
    BOOL _displayedMatchesLimited;
    BOOL _textWasEditedSinceLastSearch;
}

+ (int)bannerSortOrder;
+ (BOOL)overlayIgnoresMouseEvents;
- (id)initWithWebView:(id)arg1;
- (void)dealloc;
- (void)awakeFromNib;
- (id)bannerNibName;
- (void)detachWebView;
- (void)didInstallBannerView;
- (void)fadingOverlayNeedsUpdateInRect:(struct CGRect)arg1;
- (void)hideOverlay;
- (void)viewBelowBannerWasResizedFromFrame:(struct CGRect)arg1 animationProgress:(float)arg2 installing:(BOOL)arg3;
- (void)willUninstallBannerView;
- (void)cancelSelectionHighlightAnimation;
- (void)initiateSelectionHighlightAnimation;
- (void)findFromNextPreviousControl:(id)arg1;
- (void)findFromSearchField:(id)arg1;
- (void)findNext:(id)arg1;
- (void)findPrevious:(id)arg1;
- (BOOL)control:(id)arg1 textView:(id)arg2 doCommandBySelector:(SEL)arg3;
- (void)controlTextDidChange:(id)arg1;
- (void)focusSearchField;
- (id)searchField;
- (BOOL)readyToFind;
- (void)updateSearchFieldFromFindPasteboard;
- (id)holesInFadingOverlay:(id)arg1;
- (void)dismissOverlayIfContainsMouseDown:(id)arg1;
- (void)updateHighlightedMatches;

@end

@interface FlowView : EventSendingLKView
{
    FlowViewPrivate *_private;
}

- (id)initWithFrame:(struct CGRect)arg1;
- (void)dealloc;
- (BOOL)becomeFirstResponder;
- (void)keyDown:(id)arg1;
- (void)disableAnimations;
- (void)enableAnimations;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (id)dataSource;
- (void)setDataSource:(id)arg1;
- (void)reloadData;
- (unsigned long long)selectedIndex;
- (void)setSelectedIndex:(unsigned long long)arg1;
- (void)selectNextItem;
- (void)selectPreviousItem;
- (void)getVisibleURLStrings:(struct ListHashSet<Safari::SString, 256ul, Safari::SCFObjectSubclassHash<Safari::SString>> *)arg1;
- (BOOL)hasEnoughVisibleSnapshotPlaceholdersToWarrantPrompt;

@end

@interface FlowViewPrivate : NSObject
{
    struct RefPtr<Safari::FlowDataSourceMac> dataSource;
    struct RefPtr<Safari::FlowViewControllerClientMac> client;
    struct RefPtr<Safari::FlowViewController> controller;
}

- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface FlowViewSnapshotImage : NSObject
{
    WebBookmark *_bookmarkItem;
}

- (id)initWithBookmarkItem:(id)arg1;
- (void)dealloc;
- (id)imageUID;
- (id)imageRepresentationType;
- (id)imageRepresentation;
- (id)imageTitle;
- (id)imageURLString;
- (double)lastVisitedTimeInterval;
- (unsigned long long)imageVersion;
- (BOOL)isSelectable;

@end

@interface FlowViewWebBookmarkImage : NSObject
{
    WebBookmark *_collection;
    id _bookmarkItem;
}

- (id)initWithBookmarkCollection:(id)arg1 bookmarkItem:(id)arg2;
- (void)dealloc;
- (id)imageUID;
- (id)imageRepresentationType;
- (id)imageRepresentation;
- (id)imageTitle;
- (id)imageURLString;
- (unsigned long long)imageVersion;
- (BOOL)isSelectable;

@end

@interface FormCompletionControllerObjCAdapter : CompletionControllerObjCAdapter
{
}

- (void)autoFillAddressBookDataFromCompletionWindow:(id)arg1;

@end

@interface FormCredentialSaverObjCAdapter : NSObject
{
}

- (void)sheetDismissed:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;

@end

@interface FormDelegate : NSObject <WebFormDelegate>
{
    struct RefPtr<Safari::FormCompletionController> _completionController;
    BrowserDocument *_document;
    NSMutableDictionary *_editedForms;
}

- (void)dealloc;
- (void)frame:(id)arg1 sourceFrame:(id)arg2 willSubmitForm:(id)arg3 withValues:(id)arg4 submissionListener:(id)arg5;
- (void)textDidChangeInTextArea:(id)arg1 inFrame:(id)arg2;
- (void)textDidChangeInTextField:(id)arg1 inFrame:(id)arg2;
- (void)textFieldDidBeginEditing:(id)arg1 inFrame:(id)arg2;
- (void)textFieldDidEndEditing:(id)arg1 inFrame:(id)arg2;
- (BOOL)textField:(id)arg1 doCommandBySelector:(SEL)arg2 inFrame:(id)arg3;
- (BOOL)textField:(id)arg1 shouldHandleEvent:(id)arg2 inFrame:(id)arg3;
- (id)initWithDocument:(id)arg1;
- (struct FormCompletionController *)completionController;
- (void)dataSourceHasChangedForFrame:(id)arg1;
- (BOOL)formWasEdited;
- (void)formWillHide;
- (void)frameLayoutHasChanged:(id)arg1;
- (void)setDocument:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface FrameProgressEntry : NSObject <Activity, ActivityWithChildren, CancellableActivity>
{
    WebFrame *_frame;
    ResourceProgressEntry *_provisionalMainResourceEntry;
    NSError *_provisionalError;
    ResourceProgressEntry *_committedMainResourceEntry;
    NSMutableArray *_committedChildren;
    NSError *_committedError;
    BOOL _committedChildrenSorted;
}

+ (BOOL)_isDocumentHTMLForDataSource:(id)arg1;
+ (id)entryWithFrame:(id)arg1;
- (id)_initWithFrame:(id)arg1;
- (void)dealloc;
- (id)mainResourceEntry;
- (void)_setCommittedError:(id)arg1;
- (void)_setProvisionalError:(id)arg1;
- (void)_setCommittedMainResourceEntry:(id)arg1;
- (void)_setProvisionalMainResourceEntry:(id)arg1;
- (void)provisionalDataSourceWasCommitted;
- (void)setError:(id)arg1 forDataSource:(id)arg2;
- (void)addChild:(id)arg1 forDataSource:(id)arg2;
- (void)trackSubresource:(id)arg1 forDataSource:(id)arg2;
- (void)trackSubframe:(id)arg1 fromDataSource:(id)arg2;
- (void)titleChangedForSubframe:(id)arg1;
- (id)error;
- (BOOL)useSingletonChildForDisplay;
- (unsigned int)numberOfChildren;
- (unsigned int)_numberOfChildrenOfDataSource:(id)arg1;
- (id)childAtIndex:(unsigned int)arg1;
- (id)_childAtIndex:(unsigned int)arg1 ofDataSource:(id)arg2;
- (unsigned int)errorCount;
- (void)resetProvisionalLoad;
- (id)entryForFrame:(id)arg1;
- (int)activityStageOfCommittedChildren;
- (int)stage;
- (id)frame;
- (id)URL;
- (id)_urlStringForTitle;
- (id)title;
- (id)_childrenStatusSummary;
- (id)statusString;
- (void)cancel:(id)arg1;
- (int)displayOrder;
- (void)sortChildren;
- (void)download;
- (void)open;

@end

@interface GeneralPreferences : PreferencesModule
{
    NSTextField *homePageField;
    NSTextField *defaultSearchEngineLabel;
    NSButton *useCurrentPageButton;
    NSButton *autoOpenDownloadsCheckbox;
    NSPopUpButton *defaultBrowserPopUp;
    NSPopUpButton *defaultSearchEnginePopUp;
    NSPopUpButton *newWindowBehaviorPopUp;
    NSPopUpButton *newTabBehaviorPopUp;
    NSPopUpButton *downloadLocationPopUp;
    NSPopUpButton *downloadsClearingPolicyPopUp;
    NSPopUpButton *historyAgeLimitPopUp;
    NSTextField *historyAgeLimitLabel;
    DefaultWebAppPopUpController *_defaultBrowserController;
    BOOL _defaultBrowserManaged;
    BOOL _confirmingHomePageURL;
    struct OwnPtr<Safari::SObjCNotifier> m_notifier;
}

- (void)awakeFromNib;
- (void)chooseFolderForOpenWithTabs:(id)arg1;
- (void)dealloc;
- (void)initializeFromDefaults;
- (BOOL)isResizable;
- (void)moduleWasInstalled;
- (void)moduleWillBeRemoved;
- (id)helpAnchor;
- (void)windowDidBecomeKey:(id)arg1;
- (void)windowDidResignKey:(id)arg1;
- (BOOL)bookmarkChooser:(id)arg1 shouldEnableCollection:(id)arg2;
- (void)bookmarkChooserSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)setHomePageToCurrentPage:(id)arg1;
- (void)takeDefaultBrowserFrom:(id)arg1;
- (void)takeDownloadsClearingPolicyFrom:(id)arg1;
- (void)takeDefaultSearchEngineFrom:(id)arg1;
- (void)takeHistoryAgeLimitFrom:(id)arg1;
- (void)takeHomePageFrom:(id)arg1;
- (void)takeNewTabBehaviorFrom:(id)arg1;
- (void)takeNewWindowBehaviorFrom:(id)arg1;
- (void)toggleAutoOpenDownloads:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface GeolocationProvider : NSObject <WebGeolocationProvider>
{
}

+ (id)sharedGeolocationProvider;
- (void)registerWebView:(id)arg1;
- (void)unregisterWebView:(id)arg1;
- (id)lastPosition;

@end

@interface GlobalHistoryItemObjC : NSObject
{
    struct GlobalHistoryItem *_globalHistoryItem;
}

- (id)initWithGlobalHistoryItem:(struct GlobalHistoryItem *)arg1;
- (struct GlobalHistoryItem *)globalHistoryItem;
- (void)invalidateWrappedItem;
- (id)title;
- (id)URLString;

@end

@interface GlobalHistoryObjC : NSObject
{
}

+ (id)sharedGlobalHistory;
- (void)webView:(id)arg1 didNavigateWithNavigationData:(id)arg2 inFrame:(id)arg3;
- (void)webView:(id)arg1 didPerformClientRedirectFromURL:(id)arg2 toURL:(id)arg3 inFrame:(id)arg4;
- (void)webView:(id)arg1 didPerformServerRedirectFromURL:(id)arg2 toURL:(id)arg3 inFrame:(id)arg4;
- (void)webView:(id)arg1 updateHistoryTitle:(id)arg2 forURL:(id)arg3;
- (void)populateVisitedLinksForWebView:(id)arg1;

@end

@interface HistoryTextCache : NSObject <FileLockerDelegate>
{
    NSConditionLock *_flushCountConditionLock;
    NSConditionLock *_cachingThreadConditionLock;
    NSConditionLock *_pdfExtractThreadConditionLock;
    struct __SKIndex *_searchIndexRef;
    NSString *_searchIndexFilePath;
    BOOL _needsCompaction;
    NSMutableArray *_itemsToCache;
    NSTimer *_flushTimer;
    BOOL _pendingFlushIncludesRemovals;
    NSMutableArray *_pdfsToExtract;
}

- (void)_cacheText:(id)arg1 forURLString:(id)arg2;
- (id)cachePageTextForWebView:(id)arg1;
- (id)init;
- (void)dealloc;
- (void)savePendingChangesSynchronously;
- (void)removeCachedPageTextForURLString:(id)arg1;
- (void)removeCachedPageTextForGlobalHistoryItems:(const Vector_be06175b *)arg1;
- (void)removeAllCachedPageText;
- (id)URLStringMatchesFromCachedPageTextForString:(id)arg1;
- (int)fileLocker:(id)arg1 actionForApparentlyAbandonedLock:(id)arg2 onAttempt:(int)arg3;
- (void)fileLocker:(id)arg1 lockWasStolen:(id)arg2;

@end

@interface HTMLSourceController : WindowController <NSWindowDelegate>
{
    SearchableWebView *webView;
}

- (void)dealloc;
- (void)updateMinimumFontSize;
- (BOOL)window:(id)arg1 willHandleMouseDownEvent:(id)arg2;
- (void)windowDidLoad;
- (id)webView;
- (void)webPreferencesDidChange:(id)arg1;
- (void)setString:(id)arg1;
- (void)selectLineAtIndex:(int)arg1;
- (void)close;

@end

@interface HTMLSourceDocument : NSDocument
{
    WebDataSource *_dataSource;
    WebResource *_resource;
    BOOL _isSaving;
    BOOL _isSaved;
}

- (id)initWithDataSource:(id)arg1;
- (id)initWithResource:(id)arg1;
- (void)dealloc;
- (void)makeWindowControllers;
- (id)dataRepresentationOfType:(id)arg1;
- (void)saveDocumentTo:(id)arg1;
- (id)fileURL;
- (id)fileType;
- (id)displayName;
- (id)controller;
- (id)controllerWebView;
- (id)dataSource;
- (id)resource;
- (void)setDataSource:(id)arg1;
- (void)setResource:(id)arg1;
- (BOOL)isSaved;
- (void)frameLoadFinished:(id)arg1;
- (void)zoomIn:(id)arg1;
- (void)zoomOut:(id)arg1;
- (void)zoomToStandardSize:(id)arg1;
- (void)safari_printDocument:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (void)printShowingPrintPanel:(BOOL)arg1;
- (void)focusWebViewSearchField:(id)arg1;
- (void)findNext:(id)arg1;
- (void)findPrevious:(id)arg1;
- (void)hideFindBanner:(id)arg1;

@end

@interface HTMLSourceWebView : SearchableWebView
{
}

- (id)webView:(id)arg1 contextMenuItemsForElement:(id)arg2 defaultMenuItems:(id)arg3;
- (unsigned long long)webView:(id)arg1 dragDestinationActionMaskForDraggingInfo:(id)arg2;

@end

@interface HTTPAuthenticationSheetRequest : SheetRequest
{
    NSURLAuthenticationChallenge *_challenge;
}

- (id)initWithChallenge:(id)arg1;
- (void)dealloc;
- (void)displaySheet;

@end

@interface ImageAndTextCell : TextCell
{
    NSImage *_leftImage;
    NSImage *_rightImage;
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (struct CGRect)drawingRectForBounds:(struct CGRect)arg1;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)editWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 event:(id)arg5;
- (id)initTextCell:(id)arg1;
- (void)selectWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 start:(long long)arg5 length:(long long)arg6;
- (id)leftImage;
- (struct CGRect)leftImageFrameFromCellFrame:(struct CGRect)arg1;
- (id)rightImage;
- (struct CGRect)rightImageFrameFromCellFrame:(struct CGRect)arg1;
- (void)setLeftImage:(id)arg1;
- (void)setRightImage:(id)arg1;
- (struct CGRect)textFrameFromCellFrame:(struct CGRect)arg1;

@end

@interface ImageOverlayView : NSImageView
{
    Overlay *_overlay;
}

- (id)initWithOverlay:(id)arg1;
- (void)dealloc;
- (void)detachFromOverlay;

@end

@interface ISyncController : NSObject
{
    id _delegate;
    NSTask *_checkSyncInProgressTask;
    NSTask *_checkCanSynchronizeBookmarksTask;
    NSTask *_checkSynchronizesBookmarksTask;
    NSTask *_setSynchronizesBookmarksTask;
    BOOL _syncInProgress;
    BOOL _canSynchronizeBookmarks;
    BOOL _synchronizesBookmarks;
}

+ (id)safariTool;
+ (id)runSafariToolWithArguments:(id)arg1;
+ (void)registerSyncClient;
+ (void)initiateBookmarksSync;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (id)monitorSafariToolWithArgument:(id)arg1;
- (BOOL)isSyncInProgress;
- (void)setSyncInProgress:(BOOL)arg1;
- (BOOL)canISyncSynchronizeBookmarks;
- (void)setCanSynchronizeBookmarks:(BOOL)arg1;
- (void)setSetSynchronizesBookmarksTask:(id)arg1;
- (void)setISyncSynchronizesBookmarks:(BOOL)arg1;
- (BOOL)iSyncSynchronizesBookmarks;
- (void)setSynchronizesBookmarks:(BOOL)arg1;
- (void)setCheckSyncInProgressTask:(id)arg1;
- (void)setCheckCanSynchronizeBookmarksTask:(id)arg1;
- (void)setCheckSynchronizesBookmarksTask:(id)arg1;
- (void)checkSyncInProgress;
- (void)checkCanSynchronizeBookmarks;
- (void)checkSynchronizesBookmarks;
- (void)taskDidExit:(id)arg1;
- (void)synchronizationDidStart:(id)arg1;
- (void)synchronizationDidFinish:(id)arg1;
- (void)synchronizedDataClassesDidChange:(id)arg1;
- (void)refreshStatus;
- (BOOL)userHasDotMacAccount;
- (id)init;
- (void)dealloc;

@end

@interface ListView : NSView
{
    NSMutableArray *_views;
    NSMutableArray *_selectedViews;
    NSArray *_selectedViewsAfterMouseDown;
    id _delegate;
    unsigned long long _mouseDownIndex;
    unsigned long long _lastDragIndex;
    NSTimer *_autoscrollTimer;
    NSEvent *_autoscrollTriggerEvent;
}

+ (id)stripeColorForRow:(int)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)awakeFromNib;
- (void)dealloc;
- (void)_fillRect:(struct CGRect)arg1 forRow:(int)arg2;
- (void)drawRect:(struct CGRect)arg1;
- (BOOL)isFlipped;
- (BOOL)isOpaque;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (id)selectedViews;
- (id)views;
- (BOOL)setSelected:(BOOL)arg1 forView:(id)arg2;
- (void)setSelected:(BOOL)arg1 fromArray:(id)arg2;
- (void)setSelected:(BOOL)arg1 fromIndex:(unsigned long long)arg2 toIndex:(unsigned long long)arg3;
- (void)deselectAll;
- (id)hitTest:(struct CGPoint)arg1;
- (id)_viewForEventIgnoringX:(id)arg1;
- (id)_viewForEvent:(id)arg1;
- (BOOL)isViewSelected:(id)arg1;
- (unsigned long long)_firstSelectedIndex;
- (unsigned long long)_lastSelectedIndex;
- (void)selectOnlyView:(id)arg1;
- (void)_startAutoscrollTimer:(id)arg1;
- (void)_stopAutoscrollTimer;
- (void)_autoscroll;
- (void)updateSelectionsForView:(id)arg1 inResponseToEvent:(id)arg2;
- (void)mouseDown:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)keyDown:(id)arg1;
- (id)menuForEvent:(id)arg1;
- (void)selectAll:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (void)_resize;
- (void)setFrame:(struct CGRect)arg1;
- (void)retile;
- (void)insertView:(id)arg1 atIndex:(unsigned int)arg2;
- (void)removeView:(id)arg1;
- (void)moveView:(id)arg1 toIndex:(unsigned int)arg2;
- (float)listHeight;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (unsigned long long)draggingEntered:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (void)draggingExited:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (void)concludeDragOperation:(id)arg1;
- (void)draggingEnded:(id)arg1;
- (void)windowDidBecomeOrResignKey:(id)arg1;
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityAttributeNames;
- (id)_visibleChildren;
- (id)accessibilityAttributeValue:(id)arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (void)accessibilitySetValue:(id)arg1 forAttribute:(id)arg2;

@end

@interface LKView : NSView
{
    struct _LKViewPrivate *_priv;
    struct _CAView *_view;
    struct RefPtr<Safari::CoreAnimationLayer> _layer;
}

- (void)contextDidChange;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_invalidateCAView;
- (void)dealloc;
- (void)finalize;
- (struct CoreAnimationLayer *)coreAnimationLayer;
- (void)setCoreAnimationLayer:(PassRefPtr_0865e063)arg1;
- (BOOL)isOpaque;
- (void)_update;
- (void)updateCAView;
- (void)didUpdateCAView;
- (void)_surfaceWillGoAway:(id)arg1;
- (void)_surfaceDidComeBack:(id)arg1;
- (void)_surfaceNeedsUpdate:(id)arg1;
- (void)renewGState;
- (id)_invalidateGStatesForTree;
- (void)_windowWillClose:(id)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (struct _CAView *)CAView;
- (struct _CACFContext *)CACFContext;
- (unsigned int)CAViewFlags;
- (BOOL)acceptsFirstResponder;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface LoadProgressMonitor : NSObject <Activity, ActivityWithChildren, CancellableActivity>
{
    FrameProgressEntry *_mainEntry;
    BrowserWebView *_webView;
    NSTimer *_statusUpdateTimer;
    BOOL _havePreviouslyCommitted;
}

- (id)initWithWebView:(id)arg1;
- (void)dealloc;
- (void)_setMainEntry:(id)arg1;
- (void)reset;
- (id)mainEntry;
- (void)close;
- (id)_busyStatus;
- (id)_statusSummary;
- (void)_cancelUpdateStatusTimer;
- (void)_updateStatusNow;
- (void)_updateStatusTimerCallback:(id)arg1;
- (void)_updateStatusSoon;
- (id)_monitorProvisionalDataSourceForFrame:(id)arg1;
- (void)monitorFrame:(id)arg1;
- (void)committedFrame:(id)arg1;
- (void)titleChangedForFrame:(id)arg1;
- (void)finishedLoadingFrame:(id)arg1;
- (void)setError:(id)arg1 forDataSource:(id)arg2;
- (id)title;
- (id)URL;
- (void)open;
- (void)download;
- (id)statusString;
- (int)stage;
- (unsigned int)numberOfChildren;
- (id)childAtIndex:(unsigned int)arg1;
- (void)cancel:(id)arg1;
- (int)displayOrder;
- (void)sortChildren;
- (BOOL)_isPreSnowLeopardURLAuthenticationMethod:(id)arg1;
- (id)_urlCredentialWithIdentity:(struct OpaqueSecIdentityRef *)arg1;
- (void)_allowUserToPickCertificateForAuthenticationChallenge:(id)arg1;
- (void)_pickCertificateForAuthenticationChallengeSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(id)arg3;
- (void)_useClientCertificatesForAuthenticationChallenge:(id)arg1 inWebView:(id)arg2;
- (void)webView:(id)arg1 didLoadResourceFromMemoryCache:(id)arg2 response:(id)arg3 length:(long long)arg4 fromDataSource:(id)arg5;
- (id)webView:(id)arg1 identifierForInitialRequest:(id)arg2 fromDataSource:(id)arg3;
- (id)webView:(id)arg1 resource:(id)arg2 willSendRequest:(id)arg3 redirectResponse:(id)arg4 fromDataSource:(id)arg5;
- (BOOL)webView:(id)arg1 resource:(id)arg2 canAuthenticateAgainstProtectionSpace:(id)arg3 forDataSource:(id)arg4;
- (void)webView:(id)arg1 resource:(id)arg2 didReceiveAuthenticationChallenge:(id)arg3 fromDataSource:(id)arg4;
- (void)webView:(id)arg1 resource:(id)arg2 didReceiveResponse:(id)arg3 fromDataSource:(id)arg4;
- (void)webView:(id)arg1 resource:(id)arg2 didReceiveContentLength:(long long)arg3 fromDataSource:(id)arg4;
- (void)webView:(id)arg1 resource:(id)arg2 didFinishLoadingFromDataSource:(id)arg3;
- (void)webView:(id)arg1 resource:(id)arg2 didFailLoadingWithError:(id)arg3 fromDataSource:(id)arg4;
- (void)launchApplicationSheetEnded:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)pluginErrorSheetEnded:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)webView:(id)arg1 plugInFailedWithError:(id)arg2 dataSource:(id)arg3;

@end

@interface LocationChangeHandler : NSObject
{
    BrowserWebView *_webView;
    NSURL *_loadErrorURL;
    WebHistoryItem *_previousHistoryItem;
    NSTimer *_pageTextCacheTimer;
    NSTimer *_snapshotCacheTimer;
    NSTimer *_readerAvailabilityDetectionTimer;
    PageCurlController *_pageCurlController;
    NSTimer *_pageCurlAnimationTimer;
    struct RefPtr<SafeBrowsingObserverMac> _safeBrowsingObserver;
    BOOL _currentPageUsesCoreAnimation;
}

- (void)dealloc;
- (void)webView:(id)arg1 didCancelClientRedirectForFrame:(id)arg2;
- (void)webView:(id)arg1 didChangeLocationWithinPageForFrame:(id)arg2;
- (void)historyStateObjectChangedInWebView:(id)arg1 webFrame:(id)arg2;
- (void)webView:(id)arg1 didPushStateWithinPageForFrame:(id)arg2;
- (void)webView:(id)arg1 didReplaceStateWithinPageForFrame:(id)arg2;
- (void)webView:(id)arg1 didPopStateWithinPageForFrame:(id)arg2;
- (void)webView:(id)arg1 didCommitLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 didFailLoadWithError:(id)arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 didFailProvisionalLoadWithError:(id)arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 didFinishDocumentLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 didFinishLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 didFirstVisuallyNonEmptyLayoutInFrame:(id)arg2;
- (void)webView:(id)arg1 didFirstLayoutInFrame:(id)arg2;
- (void)webViewDidDisplayInsecureContent:(id)arg1;
- (void)webView:(id)arg1 didRunInsecureContent:(id)arg2;
- (void)webView:(id)arg1 didReceiveIcon:(id)arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 didReceiveServerRedirectForProvisionalLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 didReceiveTitle:(id)arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 didStartProvisionalLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 willCloseFrame:(id)arg2;
- (void)webView:(id)arg1 willPerformClientRedirectToURL:(id)arg2 delay:(double)arg3 fireDate:(id)arg4 forFrame:(id)arg5;
- (void)webView:(id)arg1 didClearWindowObjectForFrame:(id)arg2 inScriptWorld:(id)arg3;
- (void)close;
- (id)initWithWebView:(id)arg1;
- (id)previousHistoryItem;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface LocationTextField : NSTextField <NSAnimationDelegate>
{
    NSImage *_siteIconImage;
    NSImage *_rssButtonImage;
    NSImage *_rssButtonHighlightedImage;
    SpinningProgressIndicator *_spinningProgressIndicator;
    BOOL _showPrivateBrowsingButton;
    BOOL _showStopReloadButton;
    BOOL _showReaderButton;
    BOOL _showRSSButton;
    BOOL _stopReloadButtonIsHighlighted;
    BOOL _privateBrowsingButtonIsHighlighted;
    BOOL _readerButtonIsHighlighted;
    BOOL _rssButtonIsHighlighted;
    BOOL _inTextDidEndEditing;
    BOOL _becomingFirstResponder;
    BOOL _settingStringValue;
    BOOL _updatingTruncation;
    BOOL _leftCapIsRounded;
    struct CGSize _leftCapSize;
    struct CGSize _rightCapSize;
    struct CGRect _siteIconFrame;
    struct CGSize _stopReloadButtonSize;
    struct CGSize _rssButtonSize;
    NSString *_originalString;
    NSString *_detailString;
    NSString *_pageTitle;
    BOOL _showsPageTitle;
    NSString *_siteIconDescription;
    NSString *_readerButtonDescription;
    NSString *_rssButtonDescription;
    NSString *_middleToolTip;
    NSString *_readerButtonToolTip;
    NSString *_rssButtonToolTip;
    long long _middleToolTipTag;
    long long _privateBrowsingButtonToolTipTag;
    long long _stopReloadButtonToolTipTag;
    long long _readerButtonToolTipTag;
    long long _rssButtonToolTipTag;
    BOOL _toolTipRectanglesUpToDate;
    double _progressBarValue;
    BOOL _progressStalled;
    BOOL _mouseInside;
    BOOL _mouseMovedSinceProgressStalled;
    long long _boundsTrackingRectTag;
    BOOL _stopReloadButtonEnabled;
    BOOL _stopReloadButtonIsForReader;
    BOOL _stopReloadButtonShowsStopOnReader;
    BOOL _stopReloadButtonIsForTopSites;
    BOOL _stopReloadButtonShowsStopOnTopSites;
    BOOL _needsToDisplayIcon;
    NSImage *_icon;
    WebBookmark *_draggingBookmark;
    int _readerButtonState;
    int _rssButtonState;
    BOOL _canShowEVCertificateButton;
    BOOL _evCertificateButtonIsHighlighted;
    BOOL _evCertificateButtonIsUnderMouse;
    NSString *_evCertificateTitle;
    NSString *_evCertificateButtonDescription;
    long long _evCertificateButtonToolTipTag;
    long long _evCertificateButtonTrackingRectTag;
}

- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)view:(id)arg1 stringForToolTip:(long long)arg2 point:(struct CGPoint)arg3 userData:(void *)arg4;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (void)mouseDown:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseMovedOverLocationField:(id)arg1;
- (BOOL)performKeyEquivalent:(id)arg1;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (BOOL)isOpaque;
- (void)removeAllToolTips;
- (void)resetCursorRects;
- (void)setFrameOrigin:(struct CGPoint)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)setNeedsDisplayInRect:(struct CGRect)arg1;
- (void)setToolTip:(id)arg1;
- (BOOL)shouldDelayWindowOrderingForEvent:(id)arg1;
- (id)toolTip;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)draggedImage:(id)arg1 endedAt:(struct CGPoint)arg2 operation:(unsigned long long)arg3;
- (id)namesOfPromisedFilesDroppedAtDestination:(id)arg1;
- (void)concludeDragOperation:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (void)setStringValue:(id)arg1;
- (void)selectText:(id)arg1;
- (void)setEditable:(BOOL)arg1;
- (void)textDidChange:(id)arg1;
- (void)textDidBeginEditing:(id)arg1;
- (void)textDidEndEditing:(id)arg1;
- (id)untruncatedStringValue;
- (id)backgroundImageForProgressIndicator:(id)arg1;
- (id)accessibilityDescriptionForEVCertificateButton;
- (id)accessibilityDescriptionForPrivateBrowsingButton;
- (id)accessibilityDescriptionForSiteIcon;
- (id)accessibilityDescriptionForStopReloadButton;
- (id)accessibilityDescriptionForReaderButton;
- (id)accessibilityDescriptionForRSSButton;
- (id)accessibilityHelpStringForEVCertificateButton;
- (id)accessibilityHelpStringForPrivateBrowsingButton;
- (id)accessibilityHelpStringForStopReloadButton;
- (id)accessibilityHelpStringForReaderButton;
- (id)accessibilityHelpStringForRSSButton;
- (struct CGRect)evCertificateButtonHitTestFrame;
- (void)finishRolling;
- (void)markedTextDidChange;
- (id)icon;
- (BOOL)isShowingPrivateBrowsingButton;
- (BOOL)isShowingStopReloadButton;
- (BOOL)isShowingReaderButton;
- (BOOL)isShowingRSSButton;
- (BOOL)isShowingEVCertificateButton;
- (struct CGRect)siteIconHitTestFrame;
- (void)performEVCertificateButtonAction;
- (void)performStopReloadButtonAction;
- (void)performPrivateBrowsingButtonAction;
- (void)performReaderButtonAction;
- (void)performRSSButtonAction;
- (struct CGRect)privateBrowsingButtonHitTestFrame;
- (float)rollAmount;
- (int)readerButtonState;
- (struct CGRect)readerButtonHitTestFrame;
- (struct CGRect)rssButtonHitTestFrame;
- (int)rssButtonState;
- (void)setExtendedValidationCertificateTitle:(id)arg1;
- (void)setIcon:(id)arg1;
- (void)setKeyboardFocusRingNeedsDisplayInRect:(struct CGRect)arg1;
- (void)setReaderButtonState:(int)arg1;
- (void)setRSSButtonState:(int)arg1;
- (void)setCanShowExtendedValidationCertificateButton:(BOOL)arg1;
- (void)setLeftCapIsRounded:(BOOL)arg1;
- (void)setProgressBarValue:(double)arg1 stalled:(BOOL)arg2;
- (void)setShowingPrivateBrowsingButton:(BOOL)arg1;
- (void)setRollAmount:(float)arg1;
- (void)setStopReloadButtonEnabled:(BOOL)arg1;
- (void)setStopReloadButtonShowsStopOnReader:(BOOL)arg1;
- (void)setStopReloadButtonIsForReader:(BOOL)arg1;
- (void)setStopReloadButtonShowsStopOnTopSites:(BOOL)arg1;
- (void)setStopReloadButtonIsForTopSites:(BOOL)arg1;
- (void)startRollingToString:(id)arg1 upwards:(BOOL)arg2;
- (BOOL)stopReloadButtonEnabled;
- (struct CGRect)stopReloadButtonHitTestFrame;
- (BOOL)stopReloadButtonShowsStop;
- (BOOL)stopReloadButtonIsForTopSites;
- (void)trackMenu:(id)arg1 inButtonWithTag:(int)arg2;
- (void)setDetailString:(id)arg1;
- (void)setPageTitle:(id)arg1;
- (BOOL)showsPageTitle;
- (void)setShowsPageTitle:(BOOL)arg1;

@end

@interface LocationTextFieldCell : NSTextFieldCell
{
    float _borderTop;
    float _borderBottom;
    float _borderLeft;
    float _borderRight;
    float _siteIconMaxX;
    float _rightButtonsReservedWidth;
    float _rollAmount;
    BOOL _rollUpwards;
    NSString *_rollSourceString;
    NSString *_accessibilityDescription;
}

- (id)init;
- (void)dealloc;
- (id)_textAttributes;
- (struct CGRect)textRectForFrame:(struct CGRect)arg1;
- (struct CGRect)_focusRingFrameForFrame:(struct CGRect)arg1 cellFrame:(struct CGRect)arg2;
- (void)selectWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 start:(long long)arg5 length:(long long)arg6;
- (void)editWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 event:(id)arg5;
- (void)endEditing:(id)arg1;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (float)borderTop;
- (float)borderBottom;
- (float)borderLeft;
- (float)borderRight;
- (void)setBorderTop:(float)arg1;
- (void)setBorderBottom:(float)arg1;
- (void)setBorderLeft:(float)arg1;
- (void)setBorderRight:(float)arg1;
- (void)setSiteIconMaxX:(float)arg1;
- (void)setRightButtonsReservedWidth:(float)arg1;
- (BOOL)isOpaque;
- (void)startRollingToString:(id)arg1 upwards:(BOOL)arg2;
- (void)finishRolling;
- (float)rollAmount;
- (void)setRollAmount:(float)arg1;
- (BOOL)isRolling;
- (id)accessibilityAttributeNames;
- (id)accessibilityDescription;
- (void)setAccessibilityDescription:(id)arg1;
- (id)locationTextFieldView;
- (id)accessibilityHelpStringForStopReloadButton;
- (id)accessibilityHelpStringForPrivateBrowsingButton;
- (id)accessibilityHelpStringForReaderButton;
- (id)accessibilityHelpStringForRSSButton;
- (id)accessibilityHelpStringForEVCertificateButton;
- (id)accessibilityDescriptionForStopReloadButton;
- (id)accessibilityDescriptionForReaderButton;
- (id)accessibilityDescriptionForRSSButton;
- (id)accessibilityDescriptionForEVCertificateButton;
- (id)accessibilityDescriptionForPrivateBrowsingButton;
- (id)accessibilityDescriptionForSiteIcon;
- (void)performReaderButtonAction;
- (void)performPrivateBrowsingButtonAction;
- (void)performRSSButtonAction;
- (void)performStopReloadButtonAction;
- (void)performEVCertificateButtonAction;
- (id)accessibilityAttributeValue:(id)arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (id)accessibilityHelpStringForChildInfo:(id)arg1;
- (struct CGRect)accessibilityScreenRectForChild:(id)arg1;
- (id)accessibilityDescriptionForButtonInfo:(id)arg1;
- (BOOL)accessibilityButtonInfoIsEnabled:(id)arg1;
- (void)accessibilityPerformActionForButtonInfo:(id)arg1;

@end

@interface MessageReceivingPortReader : NSObject
{
    struct MessageReceivingPort *_port;
    NSFileHandle *_fileHandle;
}

- (id)initWithMessageReceivingPort:(struct MessageReceivingPort *)arg1 fileHandle:(id)arg2;
- (void)dealloc;
- (void)dataAvailable:(id)arg1;

@end

@interface MiscFormsDataEditor : SheetWithTableController
{
    NSArray *_domains;
    struct OwnPtr<Safari::SObjCNotifier> _notifier;
    BOOL _ignoreNotifications;
}

- (void)awakeFromNib;
- (void)resetDomainsWithData;
- (void)domainsWithDataChanged:(id)arg1;
- (void)startMonitoringFormData;
- (void)stopMonitoringFormData;
- (void)dealloc;
- (void)showSheetInWindow:(id)arg1;
- (void)hideSheet:(id)arg1;
- (void)removeSelectedItems:(id)arg1;
- (void)removeAllItems:(id)arg1;
- (long long)numberOfRowsInTableView:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface MorphingDragImageController : NSObject <NSAnimationDelegate>
{
    NSImage *originalImage;
    struct CGSize maxImageSize;
    struct CGPoint originalViewLocation;
    NSPasteboard *dragPasteboard;
    id dragSource;
    NSView *sourceView;
    NSWindow *dragWindow;
    MorphingDragImageView *dragImageView;
    NSAnimation *morphAnimation;
    NSAnimation *slideBackAnimation;
    struct CGPoint slideBackStartTranslation;
    struct CGPoint slideBackEndTranslation;
    BOOL dragDone;
    NSWindow *windowUnderMouse;
    id <MorphingDragImageDropTarget> targetUnderMouse;
    BOOL _targetAcceptsDrag;
    BOOL mouseOverSystemWindow;
    NSString *runLoopMode;
    BOOL scheduledRedisplay;
}

+ (void)dragImage:(id)arg1 maximumSize:(struct CGSize)arg2 fromView:(id)arg3 at:(struct CGPoint)arg4 pasteboard:(id)arg5 source:(id)arg6 inMode:(id)arg7;
- (void)dealloc;
- (void)morphToDragImage:(id)arg1;
- (id)dragWindow;
- (void)animationDidEnd:(id)arg1;

@end

@interface SlideBackAnimation : NSAnimation
{
}

- (void)setCurrentProgress:(float)arg1;

@end

@interface DragWindowAnimation : NSAnimation
{
}

- (void)setCurrentProgress:(float)arg1;
- (id)runLoopModesForAnimating;

@end

@interface MorphingDragImageView : NSView
{
    NSImage *startImage;
    NSImage *endImage;
    float progress;
}

- (void)dealloc;
- (id)startImage;
- (void)setStartImage:(id)arg1;
- (id)endImage;
- (void)setEndImage:(id)arg1;
- (void)setProgress:(float)arg1;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface MultipartForm : NSObject
{
    NSMutableArray *attachments;
    NSString *messageBoundary;
    NSString *attachmentBoundary;
    NSString *contentTypeHeaderValue;
}

+ (void)initialize;
- (id)init;
- (void)addFormData:(id)arg1 content:(id)arg2;
- (void)addFile:(id)arg1 file:(id)arg2;
- (void)addFiles:(id)arg1 files:(id)arg2;
- (id)contentTypeHeaderValue;
- (id)encodeMultipartForm;
- (void)dealloc;

@end

@interface MultipartFormFile : NSObject
{
    NSString *fileName;
    NSData *content;
    NSString *contentType;
    int encoding;
}

- (id)initWithFileName:(id)arg1 content:(id)arg2 contentType:(id)arg3 encoding:(int)arg4;
- (id)fileName;
- (id)content;
- (id)contentType;
- (int)encoding;
- (void)dealloc;

@end

@interface KeyValuePair : NSObject
{
    id key;
    id value;
    unsigned long long hash;
}

+ (id)pair;
+ (id)pairWithKey:(id)arg1 value:(id)arg2;
- (id)initWithKey:(id)arg1 value:(id)arg2;
- (void)dealloc;
- (void)setPairKey:(id)arg1;
- (void)setPairValue:(id)arg1;
- (id)pairKey;
- (id)pairValue;
- (id)description;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;

@end

@interface MutableDraggingInfo : NSObject <NSDraggingInfo>
{
    NSWindow *draggingDestinationWindow;
    unsigned long long draggingSourceOperationMask;
    struct CGPoint draggingLocation;
    NSImage *draggedImage;
    NSPasteboard *draggingPasteboard;
    id draggingSource;
}

- (void)dealloc;
- (id)draggingDestinationWindow;
- (void)setDraggingDestinationWindow:(id)arg1;
- (unsigned long long)draggingSourceOperationMask;
- (void)setDraggingSourceOperationMask:(unsigned long long)arg1;
- (struct CGPoint)draggingLocation;
- (void)setDraggingLocation:(struct CGPoint)arg1;
- (struct CGPoint)draggedImageLocation;
- (id)draggedImage;
- (void)setDraggedImage:(id)arg1;
- (id)draggingPasteboard;
- (void)setDraggingPasteboard:(id)arg1;
- (id)draggingSource;
- (void)setDraggingSource:(id)arg1;
- (long long)draggingSequenceNumber;
- (void)slideDraggedImageTo:(struct CGPoint)arg1;
- (id)namesOfPromisedFilesDroppedAtDestination:(id)arg1;

@end

@interface NetworkController : NSObject
{
    struct __SCDynamicStore *_store;
    NSTimer *_notificationTimer;
}

+ (id)sharedInstance;
- (void)dealloc;
- (id)init;
- (BOOL)launchNetworkDiagnosticsForUnreachableURL:(id)arg1;
- (void)_postNetworkChangeNotification:(id)arg1;

@end

@interface NewBookmarksController : NSWindowController <NSWindowDelegate>
{
    NSPopUpButton *locationPopUp;
    NSTextField *promptField;
    NSTextField *titleField;
    NSButton *addToSafariCheckbox;
    NSButton *addToMailCheckbox;
    NSButton *acceptButton;
    struct OwnPtr<Safari::SObjCNotifier> _notifier;
    WebBookmark *_bookmark;
    NSString *_suggestedTitle;
    BOOL _bookmarksBarOnly;
    BOOL _titleOnly;
    BOOL _inModalDelegateCallback;
    id _secondaryDelegate;
}

- (id)initWithBookmark:(id)arg1 restrictedToBookmarksBar:(BOOL)arg2 titleOnly:(BOOL)arg3 secondaryDelegate:(id)arg4;
- (void)dealloc;
- (void)windowDidLoad;
- (id)windowNibName;
- (void)acceptNewBookmark:(id)arg1;
- (void)cancelNewBookmark:(id)arg1;
- (void)toggleAddToSafari:(id)arg1;
- (void)toggleAddToMail:(id)arg1;
- (void)awakeFromNib;
- (id)bookmark;
- (id)bookmarkParent;
- (BOOL)isRestrictedToBookmarksBar;
- (id)suggestedTitle;
- (id)secondaryDelegate;
- (BOOL)shouldAddBookmarkToTopSites;
- (BOOL)shouldAddBookmarkToSafari;
- (BOOL)shouldAddBookmarkToMail;
- (void)windowWillClose:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface NewTabButton : RolloverTrackingButton
{
    int _rolloverStyle;
}

- (void)drawRect:(struct CGRect)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (int)rolloverStyle;
- (void)setRolloverStyle:(int)arg1;

@end

@interface NumberFormatter : NSNumberFormatter
{
    BOOL _strict;
}

- (BOOL)isStrict;
- (void)setStrict:(BOOL)arg1;
- (BOOL)isPartialStringValid:(id *)arg1 proposedSelectedRange:(struct _NSRange *)arg2 originalString:(id)arg3 originalSelectedRange:(struct _NSRange)arg4 errorDescription:(id *)arg5;

@end

@interface SnapshotFetcherWebPreferencesObserver : NSObject
{
    OffscreenSnapshotFetcher_c33c7276 *_fetcher;
}

- (id)initWithFetcher:(struct OffscreenSnapshotFetcher *)arg1;
- (void)dealloc;
- (void)preferencesChanged:(id)arg1;

@end

@interface SnapshotFetcherTaskMonitor : NSObject
{
    NSTask *_task;
    OffscreenSnapshotFetcher_c33c7276 *_fetcher;
}

- (id)initWithFetcher:(struct OffscreenSnapshotFetcher *)arg1;
- (void)dealloc;
- (id)task;
- (void)taskDidTerminate:(id)arg1;

@end

@interface OldGlobalHistory : BookmarkSource <OldSpotlightDataSource>
{
    struct __CFDateFormatter *_dateFormatter;
    NSUndoManager *_undoManager;
    BOOL _performingUndoableAction;
    NSMenu *_historyMenu;
    unsigned int _builtInHistoryMenuItemsCount;
    NSMutableArray *lastVisitedCalendarDates;
}

+ (void)entriesChangedIncludingRemovals:(BOOL)arg1;
- (id)init;
- (void)dealloc;
- (void)setUndoManager:(id)arg1;
- (id)undoManager;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (void)cachePageTextForWebView:(id)arg1;
- (id)URLStringMatchesFromCachedPageTextForString:(id)arg1;
- (void)menuNeedsUpdate:(id)arg1;
- (id)allItemsForSpotlightDataType:(id)arg1;
- (id)itemsToAddForSpotlightDataType:(id)arg1;
- (id)itemsToDeleteForSpotlightDataType:(id)arg1;
- (void)resetAdditionsAndDeletionsForSpotlightDataType:(id)arg1;
- (void)updateDidEndForSpotlightDataType:(id)arg1;
- (void)updateWillBeginForSpotlightDataType:(id)arg1;
- (id)addressStringForContentItem:(id)arg1;
- (id)bookmarkFromContentItem:(id)arg1;
- (id)bookmarkSourceImage;
- (id)bookmarksFromContentItems:(id)arg1;
- (BOOL)canDeleteContents;
- (BOOL)contentItemCanBeSearchResult:(id)arg1;
- (BOOL)contentItemCanHaveChildren:(id)arg1;
- (void)_regenerateLastVisitedCalendarDates;
- (id)contentItemsToInitiallyExpand;
- (id)child:(unsigned int)arg1 ofContentItem:(id)arg2;
- (BOOL)deleteContentItems:(id)arg1 withParentWindow:(id)arg2 undoManager:(id)arg3;
- (id)imageForContentItem:(id)arg1;
- (unsigned int)numberOfChildrenOfContentItem:(id)arg1;
- (id)parentOfContentItem:(id)arg1;
- (id)titleStringForContentItem:(id)arg1;
- (void)clearHistoryUndoActions;
- (void)savePendingChangesBeforeTermination;
- (void)setHistoryMenu:(id)arg1;

@end

@interface OldSearchScopeButtonCell : NSButtonCell
{
    BOOL _mouseInside;
    struct CGSize _titleSize;
}

- (id)initTextCell:(id)arg1;
- (void)setTitle:(id)arg1;
- (BOOL)isPressed;
- (BOOL)isSelected;
- (BOOL)_needsRedrawOnMouseInsideChange;
- (BOOL)_shouldShowRollovers;
- (BOOL)_enablesOnWindowChangedKeyState;
- (BOOL)isEnabled;
- (id)_highlightTextColor;
- (id)_normalTextColor;
- (id)_textAttributes;
- (id)_textWithShadowAttributes;
- (id)attributedTitle;
- (BOOL)_getButtonImageParts:(id *)arg1:(id *)arg2:(id *)arg3;
- (float)buttonHeight;
- (struct CGSize)cellSizeForBounds:(struct CGRect)arg1;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)mouseEntered:(id)arg1;
- (void)mouseExited:(id)arg1;
- (BOOL)_needRedrawOnWindowChangedKeyState;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface SpotlightDataTypeHandler : NSObject
{
    NSString *_type;
    id <OldSpotlightDataSource> _dataSource;
    id <OldSpotlightDataWriter> _dataWriter;
    NSArray *_itemsToDelete;
    NSArray *_itemsToAdd;
    BOOL _fullUpdatePending;
    BOOL _deleteOldCacheFiles;
}

- (id)initWithDataSource:(id)arg1 writer:(id)arg2 type:(id)arg3;
- (id)dataSource;
- (id)dataWriter;
- (id)type;
- (id)itemsToAdd;
- (void)setItemsToAdd:(id)arg1;
- (id)itemsToDelete;
- (void)setItemsToDelete:(id)arg1;
- (BOOL)isFullUpdatePending;
- (void)setFullUpdatePending:(BOOL)arg1;
- (BOOL)shouldDeleteOldCacheFiles;
- (void)setShouldDeleteOldCacheFiles:(BOOL)arg1;
- (void)dealloc;

@end

@interface OldSpotlightCacheController : NSObject <NSFileManagerDelegate>
{
    BOOL _updateInProgress;
    BOOL _needsUpdate;
    BOOL _kickingOffUpdaterThread;
    BOOL _updateImmediately;
    NSMutableDictionary *_handlers;
    NSMutableDictionary *_fileExtensions;
}

+ (id)sharedController;
- (BOOL)fileIsSpotlightCacheFile:(id)arg1;
- (void)fullUpdateNeededForType:(id)arg1;
- (void)fullUpdateNeededForType:(id)arg1 immediately:(BOOL)arg2;
- (void)partialUpdateNeededForType:(id)arg1;
- (void)partialUpdateNeededForType:(id)arg1 immediately:(BOOL)arg2;
- (void)registerSpotlightDataSource:(id)arg1 andWriter:(id)arg2 forType:(id)arg3;
- (void)setSafariIsBusy:(BOOL)arg1;
- (id)URLToVisitFromSpotlightCacheFile:(id)arg1;
- (void)dealloc;

@end

@interface OldSyndicationController : NSObject
{
    BOOL _articleUpdatesEnabled;
}

+ (id)sharedController;
- (BOOL)articleUpdatesAreEnabled;
- (void)setArticleUpdatesEnabled:(BOOL)arg1;
- (BOOL)anyLocationsAreSubscribed;
- (void)adjustSubscribedLocationsToReflectUpdateInterval;
- (void)adjustUpdateIntervalToReflectSubscribedLocations;
- (void)setArticleRemovalInterval:(int)arg1;
- (int)articleRemovalInterval;
- (void)setArticleUpdateInterval:(int)arg1;
- (int)articleUpdateInterval;
- (void)removeArticles;
- (BOOL)clickToMarkArticlesRead;
- (void)setClickToMarkArticlesRead:(BOOL)arg1;
- (BOOL)colorUnreadArticles;
- (void)setColorUnreadArticles:(BOOL)arg1;
- (id)feedURLFromArticleFile:(id)arg1;
- (id)feedsInURL:(id)arg1;
- (id)feedURLFromURL:(id)arg1;
- (id)feedURLFromDOM:(id)arg1 baseURL:(id)arg2;
- (id)feedLinksOrURLsFromDOM:(id)arg1 baseURL:(id)arg2;
- (id)feedURLFromWebBookmark:(id)arg1;
- (id)homePageOfFeed:(id)arg1;
- (void)sendAllUnreadCounts;
- (void)setDelegate:(id)arg1;
- (void)setSafariIsBusy:(BOOL)arg1;
- (id)unfilteredSyndicationURL:(id)arg1;
- (BOOL)syndicationIsEnabled;

@end

@interface OtherUserAgentSheetController : NSWindowController
{
    NSString *_userAgentString;
    NSTextView *userAgentTextView;
    NSButton *acceptButton;
}

- (id)initWithUserAgentString:(id)arg1;
- (void)dealloc;
- (id)windowNibName;
- (void)updateAcceptButton;
- (void)awakeFromNib;
- (void)textDidChange:(id)arg1;
- (BOOL)textView:(id)arg1 doCommandBySelector:(SEL)arg2;
- (id)userAgentString;
- (void)acceptUserAgentString:(id)arg1;
- (void)cancelUserAgentString:(id)arg1;

@end

@interface OutlineViewPlus : NSOutlineView
{
    BOOL _lockSelection;
    BOOL _acceptsFirstMouse;
    int _doubleClickTimerAction;
    NSTimer *_doubleClickTimer;
    int _clickedRow;
    int _clickedColumn;
}

- (id)delegate;
- (void)setDelegate:(id)arg1;
- (id)dataSource;
- (void)setDataSource:(id)arg1;
- (void)dealloc;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)keyDown:(id)arg1;
- (void)deselectRow:(long long)arg1;
- (void)selectRowIndexes:(id)arg1 byExtendingSelection:(BOOL)arg2;
- (BOOL)selectionShouldChangeFromMouseDownInRow:(long long)arg1 tableColumn:(id)arg2;
- (BOOL)shouldEditOnDoubleClick:(id)arg1 inRow:(long long)arg2 tableColumn:(id)arg3;
- (BOOL)shouldEditOnSingleClick:(id)arg1 inRow:(long long)arg2 tableColumn:(id)arg3;
- (BOOL)_userCanEditTableColumn:(id)arg1 row:(long long)arg2;
- (void)_performDoubleClickTimerAction:(id)arg1;
- (id)dragImageForRowsWithIndexes:(id)arg1 tableColumns:(id)arg2 event:(id)arg3 offset:(struct CGPoint *)arg4;
- (long long)_rowFromEvent:(id)arg1;
- (long long)_columnFromEvent:(id)arg1;
- (void)mouseDown:(id)arg1;
- (unsigned long long)draggingSourceOperationMaskForLocal:(BOOL)arg1;
- (void)draggedImage:(id)arg1 endedAt:(struct CGPoint)arg2 operation:(unsigned long long)arg3;
- (void)setAcceptsFirstMouse:(BOOL)arg1;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (void)sizeToFit;
- (id)menuForEvent:(id)arg1;
- (void)drawGridInClipRect:(struct CGRect)arg1;

@end

@interface Overlay : NSObject
{
    NSView *_targetView;
    NSWindow *_overlayWindow;
    NSView *_overlayView;
    BOOL _sharesKey;
    id _delegate;
}

+ (Class)overlayWindowClass;
- (id)initWithTargetView:(id)arg1 overlayViewClass:(Class)arg2;
- (void)dealloc;
- (void)attachOverlay;
- (BOOL)containsScreenPoint:(struct CGPoint)arg1;
- (void)detachOverlay;
- (BOOL)isAttached;
- (id)targetView;
- (id)overlayView;
- (id)overlayWindow;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (BOOL)ignoresMouseEvents;
- (void)setIgnoresMouseEvents:(BOOL)arg1;
- (BOOL)sharesKeyWithParentWindow;
- (void)setSharesKeyWithParentWindow:(BOOL)arg1;

@end

@interface OverlayViewController : NSObject <ExtendedWindowDelegate>
{
    TransparentOverlayWindow *_childWindow;
    NSView *_targetView;
    BOOL _isAttached;
    struct CGRect _initialBounds;
}

+ (Class)overlayWindowClass;
- (struct CGRect)overlayBounds;
- (id)init;
- (id)initWithBounds:(struct CGRect)arg1;
- (void)setInitialBounds:(struct CGRect)arg1;
- (void)attachInTargetView:(id)arg1;
- (void)attach;
- (void)detach;
- (BOOL)isAttached;
- (struct CGRect)windowFrame;
- (struct CGRect)overlayFrame;
- (void)dealloc;
- (id)overlayView;
- (struct CGPoint)overlayOriginInWindowFrame:(struct CGRect)arg1;
- (struct CGSize)overlaySize;
- (void)positionWindow;
- (void)mouseMoved:(id)arg1;

@end

@interface PageCacheController : NSWindowController <ReopensAtLaunch>
{
    NSMatrix *pageCacheStatisticsMatrix;
    NSOutlineView *outlineView;
    NSButton *pageCacheEnabledCheckbox;
    NSMutableArray *frameItems;
}

+ (id)sharedPageCacheController;
+ (void)reopen;
- (id)windowNibName;
- (void)windowDidLoad;
- (void)windowWillClose:(id)arg1;
- (void)dealloc;
- (void)showWindow:(id)arg1;
- (void)togglePageCacheEnabled:(id)arg1;
- (void)forceAutorelease:(id)arg1;
- (id)recursiveAddFrameItem:(id)arg1;
- (void)refreshDisplayForWebView:(id)arg1;
- (void)refreshCacheability:(id)arg1;
- (void)refreshOverview:(id)arg1;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;

@end

@interface FrameItem : NSObject
{
    NSMutableArray *children;
    NSString *name;
    NSMutableDictionary *cacheabilityDictionary;
    BOOL isSecure;
    BOOL hasNetworkError;
    BOOL hasChildFrames;
    BOOL hasPlugins;
    BOOL hasScriptExceptions;
    BOOL hasRestrictedHTML5Features;
}

- (id)initWithWebFrame:(id)arg1;
- (void)dealloc;

@end

@interface PageLoadTestController : NSWindowController <ReopensAtLaunch, NSComboBoxDataSource>
{
    NSPopUpButton *testModePopupButton;
    NSComboBox *testSuiteComboBox;
    NSButton *startStopButton;
    PageLoadTestTableView *pageLoadTableView;
    NSTextField *totalTimeLabel;
    NSTextField *totalTimeField;
    NSTextField *averageTimeField;
    NSTextField *rmsTimeField;
    NSTextField *memoryUseLabel;
    NSPopUpButton *windowTypePopUpButton;
    NSPopUpButton *cacheDirectivePopUpButton;
    NSPopUpButton *repetitionsPopUpButton;
    NSButton *hideWindowDuringTestButton;
    NSButton *checkForWorldLeaksButton;
    NSPopUpButton *profilingToolPopUpButton;
    NSTextField *repetitionMessage;
    NSButton *goToNextButton;
    NSButton *goToPreviousButton;
    PageLoadTestRunner *testRunner;
    NSMutableArray *testSuiteList;
    NSMutableArray *singleURLList;
    int testMode;
    BOOL readyToGoBack;
    BOOL doGoBackTest;
    BOOL doingGoBackTest;
    BOOL shouldSuppressWorldLeaksDialog;
}

+ (id)sharedPageLoadTestController;
+ (void)reopen;
- (id)init;
- (void)dealloc;
- (void)updateViews;
- (void)windowDidLoad;
- (void)loadSingleURL:(id)arg1;
- (void)changeTestMode:(id)arg1;
- (void)comboBoxAction:(id)arg1;
- (void)loadTestSuite:(id)arg1;
- (void)startStopTest:(id)arg1;
- (void)setCacheClearDirective:(id)arg1;
- (void)toggleHideWindowDuringTest:(id)arg1;
- (void)toggleCheckForWorldLeaks:(id)arg1;
- (void)setProfilingDirective:(id)arg1;
- (void)setWindowType:(id)arg1;
- (id)windowNibName;
- (long long)numberOfRowsInTableView:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfItemsInComboBox:(id)arg1;
- (id)comboBox:(id)arg1 objectValueForItemAtIndex:(long long)arg2;
- (unsigned long long)comboBox:(id)arg1 indexOfItemWithStringValue:(id)arg2;
- (void)pageLoadTestRunnerStartedPageLoad:(id)arg1;
- (void)pageLoadTestRunnerFinishedPageLoad:(id)arg1;
- (void)pageLoadTestRunnerStartedTest:(id)arg1;
- (void)pageLoadTestRunnerFinishedTest:(id)arg1;
- (void)pageLoadTestRunner:(id)arg1 detectedWorldLeak:(id)arg2;
- (void)windowWillClose:(id)arg1;
- (void)cut:(id)arg1;
- (void)copy:(id)arg1;
- (void)paste:(id)arg1;
- (void)delete:(id)arg1;
- (void)selectAll:(id)arg1;
- (void)showWindow:(id)arg1;
- (void)changeRepetitions:(id)arg1;
- (void)goToNextPage:(id)arg1;
- (void)goToPreviousPage:(id)arg1;
- (void)refresh:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (void)didCloseWebViews:(id)arg1;
- (void)webViewsDidClose;
- (void)shuffle;
- (void)setCurrentItem;
- (void)setShouldSuppressWorldLeaksDialog:(BOOL)arg1;

@end

@interface PageLoadTestLogger : NSObject
{
}

- (void)pageLoadTestRunnerFinishedTest:(id)arg1;

@end

@interface PageLoadTestRunner : NSObject
{
    NSObject *delegate;
    PageLoadTestLogger *testLogger;
    BOOL running;
    NSMutableArray *commands;
    NSMutableArray *pageLoadArray;
    int repetitions;
    BrowserDocument *document;
    WebView *webView;
    unsigned int currentPage;
    int currentRepetition;
    BOOL goingBack;
    double totalTime;
    int pagesTimed;
    double totalSquareRootsOfTime;
    double longestTime;
    int cacheClearDirective;
    int profilingDirective;
    int windowType;
    BOOL checkForWorldLeaks;
    BOOL forceDisplay;
    double savedDefaultTimeoutInterval;
}

+ (BOOL)shouldPerformAutomatedPageLoadTest;
+ (void)performAutomatedPageLoadTest;
+ (void)addLeakToArray:(id)arg1 count:(int)arg2 name:(id)arg3;
+ (BOOL)closingBrowserWindowsForWorldLeakTest;
+ (id)worldLeaksString;
+ (CDStruct_81cc75c8)heapStatistics;
- (void)setSingleTestURL:(id)arg1;
- (void)runOneCommand;
- (void)runTestCommands:(id)arg1;
- (int)loadTestSuite:(id)arg1;
- (int)loadBundleTestSuiteFile:(id)arg1;
- (int)loadTestSuiteFile:(id)arg1;
- (id)init;
- (void)dealloc;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (id)pageLoadArray;
- (id)currentPageLoad;
- (BOOL)running;
- (void)clearCacheWithURL:(id)arg1;
- (void)createWebView;
- (void)goToPage;
- (void)closeBrowserWindows;
- (BOOL)finishCheckingForWorldLeaks;
- (void)closeBrowserWindowsAndFinishCheckingForWorldLeaks;
- (void)checkForWorldLeaksSoon;
- (BOOL)checkForWorldLeaksNow;
- (void)testDone;
- (void)repetitionDone;
- (void)goBack;
- (void)goToNextPage;
- (void)goToPreviousPage;
- (BOOL)canGoToNextPage;
- (BOOL)canGoToPreviousPage;
- (void)setProfilingDirective:(int)arg1;
- (void)resetPageLoads;
- (BOOL)shouldForceDisplay;
- (void)startTest;
- (void)start;
- (void)startGoBackTest;
- (void)stop;
- (void)addPageLoadTime:(double)arg1;
- (double)totalTime;
- (double)longestTime;
- (double)meanTime;
- (double)squareMeanRootTime;
- (void)setCacheClearDirective:(int)arg1;
- (int)cacheClearDirective;
- (void)pageLoadStarted:(id)arg1;
- (void)forceDisplayIfNeeded:(id)arg1;
- (void)forceFlushIfNeeded:(id)arg1;
- (void)pageLoadDone:(id)arg1 forView:(id)arg2;
- (void)pageLoadPossiblyStarted:(id)arg1;
- (void)pageLoadPossiblyDone:(id)arg1;
- (void)setRepetitions:(int)arg1;
- (int)repetitions;
- (int)currentRepetition;
- (CDStruct_81cc75c8)heapBefore;
- (CDStruct_81cc75c8)heapAfter;
- (CDStruct_81cc75c8)heapDelta;
- (void)setCheckForWorldLeaks:(BOOL)arg1;
- (void)shuffle;
- (void)setCurrentPage:(int)arg1;
- (void)webView:(id)arg1 didStartProvisionalLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 didFinishLoadForFrame:(id)arg2;
- (int)windowType;
- (void)setWindowType:(int)arg1;

@end

@interface PageLoad : NSObject
{
    NSURL *URL;
    NSDate *startDate;
    NSDate *endDate;
    int status;
    CDStruct_81cc75c8 heapBefore;
    CDStruct_81cc75c8 heapAfter;
}

+ (id)pageLoadWithURL:(id)arg1;
- (id)initWithURL:(id)arg1;
- (id)URL;
- (void)start:(id)arg1;
- (void)finish:(id)arg1;
- (double)loadTime;
- (int)status;
- (id)statusString;
- (CDStruct_81cc75c8)heapBefore;
- (CDStruct_81cc75c8)heapAfter;
- (CDStruct_81cc75c8)heapDelta;
- (void)clear;
- (id)description;
- (void)dealloc;

@end

@interface PageLoadTestTableView : NSTableView
{
    PageLoadTestController *_controller;
}

- (void)setController:(id)arg1;
- (id)menuForEvent:(id)arg1;

@end

@interface CredentialAndProtectionSpace : NSObject
{
    NSURLCredential *_credential;
    NSURLProtectionSpace *_protectionSpace;
}

- (id)initWithCredential:(id)arg1 protectionSpace:(id)arg2;
- (void)dealloc;
- (id)credential;
- (id)protectionSpace;

@end

@interface PasswordsEditor : SheetWithTableController
{
    NSDictionary *_credentialsByProtectionSpace;
    NSMutableArray *_credentialAndProtectionSpacePairs;
    BOOL _ignoreNotifications;
}

- (id)addressStringForProtectionSpace:(id)arg1;
- (void)resetCredentials;
- (void)credentialsChanged:(id)arg1;
- (void)startMonitoringCredentials;
- (void)stopMonitoringCredentials;
- (void)dealloc;
- (void)showSheetInWindow:(id)arg1;
- (void)hideSheet:(id)arg1;
- (void)removeSelectedItems:(id)arg1;
- (long long)numberOfRowsInTableView:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;

@end

@interface PlasticButton : NSButton
{
}

+ (void)initialize;
- (void)drawPressedBackgroundImage;
- (void)drawPlainBackgroundImage;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface PlasticButtonCell : EtchedStringButtonCell
{
}

+ (id)updateCellForButton:(id)arg1;
+ (id)topTextColorWhenDisabled;
- (struct CGRect)textRectForFrame:(struct CGRect)arg1;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface PreferencesModule : NSPreferencesModule
{
}

- (id)imageForPreferenceNamed:(id)arg1;
- (id)highResolutionImageName;
- (void)openHelpPage:(id)arg1;
- (id)helpAnchor;
- (void)hideViews:(id)arg1 collapsingSpaceBetweenHiddenView:(id)arg2 andLowerView:(id)arg3 addingVerticalPadding:(double)arg4 inModule:(int)arg5;
- (void)hideViews:(id)arg1 collapsingSpaceBetweenHiddenView:(id)arg2 andLowerView:(id)arg3 inModule:(int)arg4;
- (void)unhideViews:(id)arg1 expandingSpaceBetweenUnhiddenView:(id)arg2 andLowerView:(id)arg3 inModule:(int)arg4;
- (void)unhideViews:(id)arg1 expandingSpaceBetweenUnhiddenView:(id)arg2 andLowerView:(id)arg3 removingVerticalPadding:(double)arg4 inModule:(int)arg5;

@end

@interface PrintingAccessoryViewController : NSViewController <NSPrintPanelAccessorizing>
{
    NSButton *printBackgroundsCheckbox;
    NSButton *printHeadersAndFootersCheckbox;
}

+ (id)sharedController;
- (void)updateViews;
- (void)setRepresentedObject:(id)arg1;
- (BOOL)printBackgrounds;
- (BOOL)printHeadersAndFooters;
- (id)keyPathsForValuesAffectingPreview;
- (id)localizedSummaryItems;
- (void)setPrintBackgrounds:(BOOL)arg1;
- (void)setPrintHeadersAndFooters:(BOOL)arg1;
- (void)togglePrintBackgrounds:(id)arg1;
- (void)togglePrintHeadersAndFooters:(id)arg1;

@end

@interface ProxyKeyView : NSView
{
    NSView *_targetView;
}

- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithFrame:(struct CGRect)arg1 targetView:(id)arg2;
- (void)dealloc;
- (BOOL)canBecomeKeyView;
- (BOOL)becomeFirstResponder;

@end

@interface PurpleButtonCell : NSButtonCell
{
}

+ (id)updateCellForButton:(id)arg1;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;
- (id)attributedTitle;
- (void)drawBezelWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (BOOL)startTrackingAt:(struct CGPoint)arg1 inView:(id)arg2;

@end

@interface PurplePopUpButtonCell : NSPopUpButtonCell
{
}

+ (id)updateCellForPopUpButton:(id)arg1;
- (id)attributedTitle;
- (BOOL)_getButtonImageLeftCap:(id *)arg1 rightCap:(id *)arg2 fill:(id *)arg3;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;

@end

@interface ReaderOverlayController : OverlayViewController
{
    struct ReaderController *_readerController;
    ReaderWebView *_readerWebView;
    ProxyKeyView *_proxyKeyView;
    BOOL _detachOnNextFlush;
}

+ (Class)overlayWindowClass;
- (id)initWithBounds:(struct CGRect)arg1;
- (id)initWithReaderWebView:(id)arg1 controller:(struct ReaderController *)arg2;
- (void)dealloc;
- (id)readerWebView;
- (id)overlayView;
- (struct ReaderJSController *)readerJSController;
- (struct CGPoint)overlayOriginInWindowFrame:(struct CGRect)arg1;
- (struct CGSize)overlaySize;
- (void)positionWindow;
- (void)attach;
- (void)detach;
- (id)windowWillReturnUndoManager:(id)arg1;
- (BOOL)window:(id)arg1 willHandleMouseDownEvent:(id)arg2;
- (void)selectKeyViewFollowingProxyView;
- (void)selectKeyViewPrecedingProxyView;
- (void)targetWebViewWillMoveToWindow:(id)arg1;
- (void)browserWindowDidFlush;
- (void)targetWebViewDidMoveToWindow;

@end

@interface ReaderOverlayWindow : TransparentOverlayWindow <LockableFirstResponder>
{
    ReaderOverlayController *_overlayController;
    NSMutableArray *_mirroredTrackingAreas;
    BOOL _firstResponderIsLocked;
    NSResponder *_incomingFirstResponder;
}

- (BOOL)_runningDocModal;
- (void)sendEvent:(id)arg1;
- (void)cancel:(id)arg1;
- (BOOL)performKeyEquivalent:(id)arg1;
- (void)dealloc;
- (void)setOverlayController:(id)arg1;
- (void)setFrame:(struct CGRect)arg1 display:(BOOL)arg2;
- (void)updateEventRegion;
- (void)selectKeyViewFollowingView:(id)arg1;
- (void)selectKeyViewPrecedingView:(id)arg1;
- (BOOL)makeFirstResponder:(id)arg1;
- (BOOL)firstResponderIsLocked;
- (void)setFirstResponderIsLocked:(BOOL)arg1;

@end

@interface ReaderWebView : BrowserContentWebView
{
    struct ReaderController *_readerController;
    struct OwnPtr<Safari::ReaderJSController> _readerJSController;
}

- (id)initWithFrame:(struct CGRect)arg1 frameName:(id)arg2 groupName:(id)arg3;
- (id)initWithFrame:(struct CGRect)arg1 frameName:(id)arg2 groupName:(id)arg3 readerController:(struct ReaderController *)arg4;
- (void)close;
- (void)dealloc;
- (id)browserWebView;
- (struct ReaderJSController *)readerJSController;
- (void)scrollPageUp:(id)arg1;
- (void)scrollPageDown:(id)arg1;
- (void)scrollLineUp:(id)arg1;
- (void)scrollLineDown:(id)arg1;
- (void)scrollToBeginningOfDocument:(id)arg1;
- (void)scrollToEndOfDocument:(id)arg1;
- (BOOL)isLoading;
- (void)stopLoading:(id)arg1;
- (void)reload:(id)arg1;
- (void)reloadFromOrigin:(id)arg1;
- (BOOL)canGoBack;
- (BOOL)canGoForward;
- (BOOL)goBack;
- (BOOL)goForward;
- (BOOL)canZoomIn;
- (BOOL)canMakeTextLarger;
- (void)zoomIn:(id)arg1;
- (void)makeTextLarger:(id)arg1;
- (BOOL)canZoomOut;
- (BOOL)canMakeTextSmaller;
- (void)zoomOut:(id)arg1;
- (void)makeTextSmaller:(id)arg1;
- (BOOL)canZoomToStandardSize;
- (BOOL)canMakeTextStandardSize;
- (void)zoomToStandardSize:(id)arg1;
- (void)makeTextStandardSize:(id)arg1;
- (id)webFrameForSelectAllCopy;
- (void)updateResizeIndicator;
- (void)webView:(id)arg1 didClearWindowObject:(id)arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 didFinishLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 mouseDidMoveOverElement:(id)arg2 modifierFlags:(unsigned long long)arg3;
- (id)webView:(id)arg1 createWebViewWithRequest:(id)arg2 windowFeatures:(id)arg3;
- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface RenderTree : NSObject
{
    NSOutlineView *outlineView;
    NSWindow *window;
    id <NSOutlineViewDataSource> dataSource;
}

- (id)window;
- (void)createTreeFromWebView:(id)arg1;
- (void)windowWillClose:(id)arg1;
- (void)dealloc;

@end

@interface RenderTreeDataSource : NSObject
{
    WebRenderNode *root;
}

- (id)initWithWebFrame:(id)arg1;
- (void)dealloc;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;

@end

@interface WindowReopener : NSObject
{
    NSTimer *saveWindowsTimer;
}

+ (void)reopenWindows;
- (void)dealloc;
- (id)arrayOfWindowControllerNamesToReopenAtLaunch;
- (void)reopenWithArrayOfWindowControllerNames:(id)arg1;
- (void)saveWindows;
- (void)_reallySaveWindows;
- (void)windowWillClose:(id)arg1;
- (id)init;

@end

@interface ResetDialogController : NSWindowController
{
    NSMatrix *optionsMatrix;
}

+ (void)_deleteAllCookies;
+ (void)_removeAllCredentials;
+ (void)_resetWithOptions:(int)arg1;
+ (void)runModalDialog;
- (id)windowNibName;
- (int)_readOptionsMaskFromViews;
- (void)_updateViewsToMatchOptionsMask:(int)arg1;
- (void)_removeOrUpdateExperimentalOptions;
- (void)windowDidLoad;
- (void)cancel:(id)arg1;
- (void)confirm:(id)arg1;
- (void)showHelp:(id)arg1;

@end

@interface ResourceProgressEntry : NSObject <Activity>
{
    NSError *_error;
    NSURL *_URL;
    NSString *_URLString;
    long long _bytesLoaded;
    long long _bytesExpected;
    int count;
    int resultCode;
    BOOL _done;
    FrameProgressEntry *_parent;
}

- (id)initWithURL:(id)arg1 bytesLoaded:(long long)arg2 bytesExpected:(long long)arg3 error:(id)arg4 parent:(id)arg5 statusCode:(int)arg6 done:(BOOL)arg7;
- (void)dealloc;
- (void)resetParent;
- (void)_valueChange;
- (id)error;
- (void)setError:(id)arg1;
- (long long)bytesLoaded;
- (void)setBytesLoaded:(long long)arg1;
- (long long)bytesExpected;
- (void)setBytesExpected:(long long)arg1;
- (int)count;
- (void)setCount:(int)arg1;
- (int)statusCode;
- (void)setStatusCode:(int)arg1;
- (id)title;
- (id)URL;
- (void)setURL:(id)arg1;
- (id)busyStatus;
- (int)stage;
- (id)statusString;
- (int)displayOrder;
- (void)setDone:(BOOL)arg1;
- (void)open;
- (void)download;

@end

@interface RolloverImageButton : RolloverTrackingButton
{
    NSImage *_rolloverImage;
}

- (void)_setAttributes;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)awakeFromNib;
- (void)dealloc;
- (void)setRolloverImage:(id)arg1;
- (id)rolloverImage;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface RolloverTextButton : RolloverTrackingButton
{
}

+ (void)_updateCellClass;
+ (id)font;
- (id)description;
- (void)_setAttributes;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)init;
- (void)setTitle:(id)arg1;
- (void)sizeToFit;

@end

@interface RolloverTextButtonCell : NSButtonCell
{
}

- (BOOL)_shouldDrawBezel;
- (BOOL)shouldDrawFocusRing;

@end

@interface RolloverTextButtonCellOld : EtchedStringButtonCell
{
    BOOL _drawsLightText;
}

+ (id)bottomColorForDarkText;
+ (id)topColorForDarkText;
+ (id)bottomColorForLightText;
+ (id)topColorForLightText;
- (struct CGSize)cellSize;
- (struct CGRect)textRectForFrame:(struct CGRect)arg1;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)setDrawsLightText:(BOOL)arg1;
- (BOOL)drawsLightText;

@end

@interface RolloverTrackingButton : ButtonPlus
{
    BOOL _mouseOver;
    BOOL _redrawOnMouseEnteredAndExited;
    BOOL _trackingMouseDown;
    BOOL _trackingRectUpdatePending;
    long long _trackingRectTag;
}

- (void)initTrackingRect;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)setFrameOrigin:(struct CGPoint)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)setFrameRotation:(double)arg1;
- (void)setBoundsOrigin:(struct CGPoint)arg1;
- (void)setBoundsSize:(struct CGSize)arg1;
- (void)setBoundsRotation:(double)arg1;
- (void)awakeFromNib;
- (void)dealloc;
- (BOOL)mouseIsOver;
- (void)mouseEnteredOrExited:(BOOL)arg1;
- (void)mouseDown:(id)arg1;
- (void)setRedrawOnMouseEnteredAndExited:(BOOL)arg1;
- (BOOL)redrawOnMouseEnteredAndExited;
- (BOOL)shouldUseRolloverAppearance;
- (void)updateMouseIsOver:(int)arg1;
- (void)removeTrackingRect;
- (void)updateTrackingRect;
- (void)_updateTrackingRectSoon;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)viewDidMoveToWindow;
- (void)mouseEntered:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)rightMouseDown:(id)arg1;

@end

@interface RSSBookmarksController : BookmarkSource
{
    NSArray *_bookmarks;
}

+ (id)sharedController;
- (void)dealloc;
- (void)refreshContents;
- (BOOL)canDeleteContents;
- (id)child:(unsigned int)arg1 ofContentItem:(id)arg2;
- (unsigned int)numberOfChildrenOfContentItem:(id)arg1;
- (id)addressStringForContentItem:(id)arg1;
- (id)titleStringForContentItem:(id)arg1;
- (id)bookmarkSourceMenuTitle;
- (id)bookmarkSourceImage;
- (BOOL)isFilteredFromOtherSources;

@end

@interface RSSPreferences : PreferencesModule
{
    NSButton *subscribeRSSBookmarksInMenuCheckbox;
    NSButton *subscribeRSSBookmarksInBarCheckbox;
    NSButton *colorizeUnreadArticlesCheckbox;
    NSPopUpButton *defaultRSSReaderPopUp;
    NSPopUpButton *updateIntervalPopUp;
    NSPopUpButton *removalIntervalPopUp;
    NSPopUpButton *unreadPolicyPopUp;
    DefaultWebAppPopUpController *_defaultRSSReaderController;
}

+ (void)defaultFeedHandlerChanged;
+ (BOOL)SafariIsNotDefaultFeedURLHandler;
- (id)preferencesNibName;
- (void)toggleRSSBookmarksInMenuAreSubscribed:(id)arg1;
- (void)toggleRSSBookmarksInBarAreSubscribed:(id)arg1;
- (void)toggleColorizeUnreadArticles:(id)arg1;
- (void)takeDefaultRSSReaderFrom:(id)arg1;
- (void)takeUpdateIntervalFrom:(id)arg1;
- (void)takeRemovalIntervalFrom:(id)arg1;
- (void)removeAllArticlesConfirmationDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)removeAllArticles:(id)arg1;
- (void)takeUnreadPolicyFrom:(id)arg1;
- (void)awakeFromNib;
- (void)updateColorViews;
- (void)updateViews;
- (void)initializeFromDefaults;
- (void)dealloc;
- (BOOL)isResizable;
- (id)helpAnchor;

@end

@interface SafariAlert : NSAlert
{
    int _modalResult;
}

- (int)runSheetAppModalForWindow:(id)arg1;

@end

@interface SafariModalPanelController : NSWindowController
{
    NSTextField *titleField;
    NSTextField *messageField;
    NSButton *defaultButton;
    NSButton *alternateButton;
    NSButton *suppressionButton;
}

- (id)windowNibName;
- (id)initWithTitle:(id)arg1 message:(id)arg2 defaultButton:(id)arg3 alternateButton:(id)arg4;
- (void)beginSheetModalForWindow:(id)arg1 modalDelegate:(id)arg2 didEndSelector:(SEL)arg3 contextInfo:(void *)arg4;
- (long long)runModal;
- (void)setShowsSuppressionButton:(BOOL)arg1;
- (BOOL)showsSuppressionButton;
- (id)suppressionButton;
- (void)_buttonActivated:(id)arg1;

@end

@interface SafariPanel : NSPanel
{
    BOOL _allowsTerminationWhenModal;
}

- (BOOL)_blocksActionWhenModal:(SEL)arg1;
- (BOOL)safari_allowsTerminationWhenModal;
- (void)safari_setAllowsTerminationWhenModal:(BOOL)arg1;

@end

@interface SAlertDialogModalDelegate : NSObject
{
    struct SAlertDialog *_alertDialog;
    void *_callback;
}

- (id)initWithSAlertDialog:(struct SAlertDialog *)arg1 callback:(void *)arg2;
- (void)alertDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;

@end

@interface SearchableWebView : WebViewPlus
{
    FindBanner *_findInPageBanner;
}

- (id)findInPageBanner;
- (BOOL)isShowingFindInPageBanner;
- (BOOL)canFocusSearchField;
- (BOOL)canShowFindInPageBanner;
- (BOOL)canHideFindInPageBanner;
- (BOOL)canFindNext;
- (void)findNext;
- (BOOL)canFindPrevious;
- (void)findPrevious;
- (unsigned long long)matchCountForString:(id)arg1 limit:(unsigned long long)arg2;
- (BOOL)findBanner:(id)arg1 doSearchFieldCommandBySelector:(SEL)arg2;
- (void)findInPageBannerNeedsUpdateInRect:(struct CGRect)arg1;
- (BOOL)currentPageIsSearchable;
- (void)showFindInPageBannerAllowingAnimation:(BOOL)arg1;
- (void)hideFindInPageBannerAllowingAnimation:(BOOL)arg1;
- (void)focusSearchField;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1 frameName:(id)arg2 groupName:(id)arg3;
- (void)close;
- (void)awakeFromNib;
- (void)viewDidMoveToWindow;
- (void)webView:(id)arg1 didDrawRect:(struct CGRect)arg2;
- (void)webView:(id)arg1 didScrollDocumentInFrameView:(id)arg2;

@end

@interface SearchField : NSSearchField
{
    NSColor *_savedInsertionPointColor;
    NSColor *_savedSelectionColor;
    SEL _focusAction;
    SEL _blurAction;
    long long _trackingRectNumber;
    BOOL _cursorWasSetToIBeam;
    BOOL _updatesCursorWhenParentWindowIsKey;
}

- (void)setUpdatesCursorWhenParentWindowIsKey:(BOOL)arg1;
- (BOOL)updatesCursorWhenParentWindowIsKey;
- (void)dealloc;
- (BOOL)becomeFirstResponder;
- (void)textDidEndEditing:(id)arg1;
- (void)viewDidMoveToWindow;
- (void)mouseEntered:(id)arg1;
- (void)mouseExited:(id)arg1;
- (SEL)focusAction;
- (void)setFocusAction:(SEL)arg1;
- (SEL)blurAction;
- (void)setBlurAction:(SEL)arg1;

@end

@interface SearchScopeButton : NSButton
{
}

+ (Class)cellClass;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface SecurePageIndicator : RolloverImageButton
{
    NSImage *_mainWindowImage;
    NSImage *_nonMainWindowImage;
}

- (void)dealloc;
- (BOOL)mouseDownCanMoveWindow;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)viewDidMoveToWindow;
- (id)initWithMainWindowImage:(id)arg1 nonMainWindowImage:(id)arg2 rolloverImage:(id)arg3 pressedImage:(id)arg4;

@end

@interface SecurityInfo : NSObject
{
    NSURL *url;
    int urlSecurityAssessment;
    int urlSecurityProvider;
    BOOL hasWarnedUser;
}

- (void)dealloc;
- (id)description;
- (id)assessedURL;
- (void)setAssessedURL:(id)arg1;
- (int)urlSecurityAssessment;
- (void)setURLSecurityAssessment:(int)arg1;
- (BOOL)isKnownToBeUnsafe;
- (BOOL)hasWarnedUser;
- (void)setHasWarnedUser:(BOOL)arg1;
- (int)urlSecurityProvider;
- (void)setURLSecurityProvider:(int)arg1;

@end

@interface SecurityPreferences : PreferencesModule
{
    NSButton *javaScriptEnabledCheckbox;
    NSButton *blockPopUpsCheckbox;
    NSButton *javaEnabledCheckbox;
    NSButton *pluginsEnabledCheckbox;
    NSMatrix *cookiePolicyMatrix;
    NSButton *showCookiesButton;
    AcceptedCookies *cookiesEditor;
    NSPopUpButton *databaseQuotaPopUp;
    NSButton *showDatabasesButton;
    AcceptedDatabases *databasesEditor;
    NSButton *askBeforeSubmittingInsecureFormsCheckbox;
    NSTextField *antiPhishingLabel;
    NSButton *antiPhishingEnabled;
    NSTextField *antiPhishingStatusLabel;
    NSImageView *antiPhishingStatusImageView;
    NSTextField *geolocationLabel;
    NSButton *geolocationCheckbox;
    NSButton *helpButton;
    int cookiePolicy;
    BOOL _handlingChangedDefaults;
    BOOL m_showingAntiPhishingStatus;
    BOOL m_didUpdateAntiPhishingStatus;
    struct OwnPtr<Safari::SObjCNotifier> m_notifier;
    struct RefPtr<SafeBrowsingLastUpdateObserver> _lastUpdateObserver;
    NSTimer *_statusUpdateTimer;
}

- (void)awakeFromNib;
- (void)initializeFromDefaults;
- (BOOL)isResizable;
- (void)moduleWasInstalled;
- (void)moduleWillBeRemoved;
- (id)helpAnchor;
- (void)showCookies:(id)arg1;
- (void)showDatabases:(id)arg1;
- (void)takeCookiePolicyFrom:(id)arg1;
- (void)takeDatabaseSiteQuotaFrom:(id)arg1;
- (void)toggleAntiPhishingEnabled:(id)arg1;
- (void)toggleAskBeforeSubmittingInsecureForms:(id)arg1;
- (void)openSecurityPreferences;
- (void)geolocationSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)toggleGeolocationEnabled:(id)arg1;
- (void)toggleJavaEnabled:(id)arg1;
- (void)toggleJavaScriptEnabled:(id)arg1;
- (void)toggleJavaScriptCanOpenWindows:(id)arg1;
- (void)togglePluginsEnabled:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface ServicesProvider : NSObject
{
}

- (void)searchWithGoogle:(id)arg1 userData:(id)arg2 error:(id *)arg3;

@end

@interface SheetRequest : NSObject
{
    NSWindow *_window;
    id _modalDelegate;
    SEL _didCloseSelector;
    void *_contextInfo;
}

- (id)icon;
- (id)label;
- (id)window;
- (void)displaySheetInWindow:(id)arg1;
- (void)displaySheet;

@end

@interface SheetWithTableController : NSWindowController <NSWindowDelegate>
{
    NSTableView *tableView;
    NSButton *removeButton;
    NSButton *removeAllButton;
}

- (void)awakeFromNib;
- (BOOL)canRemoveSelectedItems;
- (BOOL)canRemoveAllItems;
- (void)updateRemoveButtons;
- (void)showSheetInWindow:(id)arg1;
- (void)hideSheet:(id)arg1;
- (void)removeSelectedItems:(id)arg1;
- (void)removeAllItems:(id)arg1;
- (void)reloadTableData;
- (void)delete:(id)arg1;
- (BOOL)tableView:(id)arg1 keyDown:(id)arg2;
- (void)tableViewSelectionDidChange:(id)arg1;
- (BOOL)outlineView:(id)arg1 keyDown:(id)arg2;
- (void)outlineViewSelectionDidChange:(id)arg1;

@end

@interface SimpleSheetRequest : SheetRequest
{
    NSString *_title;
    NSString *_message;
    NSString *_label;
    NSString *_helpAnchor;
}

+ (id)simpleSheetRequestWithTitle:(id)arg1 message:(id)arg2 label:(id)arg3 helpAnchor:(id)arg4;
- (void)dealloc;
- (id)initWithTitle:(id)arg1 message:(id)arg2 label:(id)arg3 helpAnchor:(id)arg4;
- (void)displaySheet;
- (id)title;
- (id)message;
- (id)label;

@end

@interface SlidingAnimation : NSObject
{
    id _delegate;
    NSMutableDictionary *_views;
    BOOL _sliding;
    BOOL _paused;
}

- (id)init;
- (void)dealloc;
- (void)updateViewPosition:(id)arg1 forTime:(double)arg2;
- (void)updateTimer;
- (void)showNextFrame;
- (void)setDestinationForView:(id)arg1 to:(struct CGRect)arg2 duration:(double)arg3;
- (void)sendViewToDestination:(id)arg1;
- (struct CGRect)destinationForView:(id)arg1;
- (void)stopView:(id)arg1;
- (void)stop;
- (void)setDelegate:(id)arg1;
- (BOOL)isSliding;
- (void)pause;
- (void)resume;

@end

@interface SlidingView : NSObject
{
    NSView *view;
    struct CGRect startFrame;
    struct CGRect endFrame;
    double startTime;
    double duration;
}

- (id)initWithStartFrame:(struct CGRect)arg1 endFrame:(struct CGRect)arg2 duration:(double)arg3;
- (struct CGRect)endFrame;
- (struct CGRect)frameForTime:(double)arg1;

@end

@interface SlidingImageView : NSView
{
    NSImage *_stableImage;
    NSImage *_movingImage;
    NSImage *_shadow;
    BOOL _slidesUpwards;
    float _slideAmount;
    struct CGSize _shadowSize;
}

- (void)dealloc;
- (struct CGRect)movingImageTargetRectIncludingShadowRect:(BOOL)arg1;
- (struct CGRect)stableImageTargetRect;
- (struct CGRect)shadowRect;
- (void)drawRect:(struct CGRect)arg1;
- (id)stableImage;
- (void)setStableImage:(id)arg1;
- (id)movingImage;
- (void)createShadow;
- (void)setMovingImage:(id)arg1;
- (BOOL)slidesUpwards;
- (void)setSlidesUpwards:(BOOL)arg1;
- (float)slideAmount;
- (void)setSlideAmount:(float)arg1;
- (BOOL)isOpaque;

@end

@interface SlidingViewsBar : BarBackground
{
    unsigned long long _dragSourceIndex;
    unsigned long long _dropIndex;
    double _draggedItemWidth;
    NSMutableArray *_buttons;
    ClippedItemsIndicator *_rightClipIndicator;
    SlidingAnimation *_animation;
}

- (id)initWithFrame:(struct CGRect)arg1;
- (void)dealloc;
- (unsigned long long)lastNonSlidingViewIndex;
- (double)maxButtonXWithoutClipIndicator;
- (double)maxButtonXWithClipIndicator;
- (double)maxButtonX;
- (double)minButtonX;
- (double)minSlidingViewX;
- (struct CGRect)_constrainProposedButtonFrame:(struct CGRect)arg1;
- (double)paddingBetweenButtons;
- (double)buttonBottomOffset;
- (void)reorderedSlidingView:(id)arg1;
- (void)draggedSlidingView:(id)arg1;
- (void)refreshButtons;
- (unsigned long long)dropIndexFromDraggingInfo:(id)arg1;
- (unsigned long long)dropIndexFromLocalPoint:(struct CGPoint)arg1;
- (void)slideButtonsIntoPlace;
- (unsigned long long)dropIndex;
- (void)setDropIndex:(unsigned long long)arg1;
- (id)_lastDraggedEventFollowing:(id)arg1;
- (id)_lastDraggedOrUpEventFollowing:(id)arg1;
- (BOOL)reorderSlidingView:(id)arg1 fromMouseDownEvent:(id)arg2;
- (void)pauseAnimation;
- (void)resumeAnimation;
- (double)widthOfDraggingInfo:(id)arg1;
- (double)slidingWidthForView:(id)arg1;
- (unsigned long long)updateDropTarget:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (void)draggingExited:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (void)draggingEnded:(id)arg1;
- (BOOL)isSliding;
- (void)moveSlidingViewToCurrentDropIndex:(id)arg1;
- (id)viewPinnedToOverflowIndicator;
- (void)viewWillBeginDragging:(id)arg1;

@end

@interface SnippetEditorDelegate : NSObject <NSWindowDelegate>
{
    struct SnippetEditorController *_controller;
    BOOL _windowClosing;
}

- (id)initWithController:(struct SnippetEditorController *)arg1;
- (void)webView:(id)arg1 didClearWindowObject:(id)arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5;
- (void)webView:(id)arg1 decidePolicyForNewWindowAction:(id)arg2 request:(id)arg3 newFrameName:(id)arg4 decisionListener:(id)arg5;
- (id)webView:(id)arg1 contextMenuItemsForElement:(id)arg2 defaultMenuItems:(id)arg3;
- (void)windowWillClose:(id)arg1;
- (BOOL)windowClosing;

@end

@interface SourceListSectionTitleCell : NSCell
{
}

- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface Heartbeat : NSObject
{
    NSLock *_clientsLock;
    NSMutableDictionary *_windowToClients;
    NSTimer *_timer;
    double _birthDate;
    BOOL _running;
}

+ (id)sharedHeartbeat;
- (id)init;
- (void)_heartbeat;
- (void)_startHeartbeatRunLoop;
- (void)addHeartbeatView:(id)arg1;
- (void)removeHeartbeatView:(id)arg1;
- (id)clients;
- (double)birthDate;

@end

@interface SpinningProgressIndicator : NSView
{
    BOOL _delayedStartup;
    BOOL _isSpinning;
    BOOL _backgroundNeedsUpdate;
    BOOL _isPaused;
    BOOL _observingFlushes;
    unsigned int _lastImageIndex;
    id _delegate;
    NSMutableArray *_images;
}

+ (void)setUpWindowPosing;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_addWindowFlushObserver;
- (void)_removeWindowFlushObserver;
- (void)dealloc;
- (void)_startSpinning;
- (void)_stopSpinning;
- (void)setFrameOrigin:(struct CGPoint)arg1;
- (void)windowDidFlush;
- (BOOL)_recompositeImages;
- (void)drawImageAtIndex:(unsigned int)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)startSpinning;
- (void)stopSpinning;
- (BOOL)isSpinning;
- (BOOL)isDisplaying;
- (void)pauseSpinning;
- (void)resumeSpinning;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (void)backgroundImageNeedsUpdate;
- (unsigned int)_currentIndexWithBirthDate:(double)arg1 currentDate:(double)arg2;
- (int)_currentIndex;
- (BOOL)heartbeatWithBirthDate:(double)arg1 currentDate:(double)arg2 context:(id)arg3;
- (BOOL)isOpaque;

@end

@interface SplitView : NSSplitView
{
    float _dividerBottomDelta;
    NSColor *_customDividerColor;
    float _dividerThickness;
    BOOL _hasCustomThickness;
    int _style;
    BOOL _userResizingDisabled;
}

- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)hitTest:(struct CGPoint)arg1;
- (void)mouseDown:(id)arg1;
- (void)resetCursorRects;
- (void)viewDidEndLiveResize;
- (void)viewWillStartLiveResize;
- (double)dividerThickness;
- (void)drawDividerInRect:(struct CGRect)arg1;
- (void)setDividerBottomMarginDelta:(double)arg1;
- (void)setDividerThickness:(double)arg1;
- (void)setSplitViewStyle:(int)arg1;
- (void)setUserResizingDisabled:(BOOL)arg1;
- (BOOL)userResizingDisabled;

@end

@interface SpotlightBookmarksWriter : NSObject <OldSpotlightDataWriter>
{
}

- (void)deleteSpotlightCacheFilesForItems:(id)arg1 ofDataType:(id)arg2 inDirectory:(id)arg3;
- (void)addSpotlightCacheFilesForItems:(id)arg1 ofDataType:(id)arg2 inDirectory:(id)arg3;
- (id)fileExtensionForDataType:(id)arg1;
- (id)URLToVisitFromSpotlightCacheFile:(id)arg1 ofDataType:(id)arg2;

@end

@interface SpotlightHistoryWriter : NSObject <OldSpotlightDataWriter>
{
    NSString *_cacheFilesDirectory;
    NSMutableDictionary *_trackedFilenames;
    BOOL _trackedFilenamesNeedsWrite;
}

- (void)deleteSpotlightCacheFilesForItems:(id)arg1 ofDataType:(id)arg2 inDirectory:(id)arg3;
- (void)addSpotlightCacheFilesForItems:(id)arg1 ofDataType:(id)arg2 inDirectory:(id)arg3;
- (id)fileExtensionForDataType:(id)arg1;
- (id)URLToVisitFromSpotlightCacheFile:(id)arg1 ofDataType:(id)arg2;
- (void)dealloc;

@end

@interface StressHUD : NSWindow
{
    NSTimer *clock;
}

- (id)init;
- (void)becameActive;
- (void)becameInactive;
- (id)initWithContentRect:(struct CGRect)arg1 styleMask:(unsigned long long)arg2 backing:(unsigned long long)arg3 defer:(BOOL)arg4;
- (void)tick;
- (void)start;
- (void)stop;

@end

@interface StressView : NSView
{
}

- (BOOL)mouseDownCanMoveWindow;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface PlatformFrameLoadDelegateForwarder : NSObject
{
    struct SWebFrameLoadDelegate *_delegate;
}

- (id)initWithDelegate:(struct SWebFrameLoadDelegate *)arg1;
- (void)webView:(id)arg1 didStartProvisionalLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 didReceiveServerRedirectForProvisionalLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 didCommitLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 didReceiveTitle:(id)arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 didFinishLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 didFailLoadWithError:(id)arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 willPerformClientRedirectToURL:(id)arg2 delay:(double)arg3 fireDate:(id)arg4 forFrame:(id)arg5;
- (void)webView:(id)arg1 didCancelClientRedirectForFrame:(id)arg2;
- (void)webView:(id)arg1 didClearWindowObjectForFrame:(id)arg2 inScriptWorld:(id)arg3;
- (void)webView:(id)arg1 didFirstLayoutInFrame:(id)arg2;
- (void)webView:(id)arg1 didFinishDocumentLoadForFrame:(id)arg2;

@end

@interface PlatformPolicyDelegateForwarder : NSObject
{
    struct SWebPolicyDelegate *_delegate;
}

- (id)initWithDelegate:(struct SWebPolicyDelegate *)arg1;
- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5;

@end

@interface PlatformResourceLoadDelegateForwarder : NSObject
{
    struct SWebResourceLoadDelegate *_delegate;
}

- (id)initWithDelegate:(struct SWebResourceLoadDelegate *)arg1;
- (id)webView:(id)arg1 resource:(id)arg2 willSendRequest:(id)arg3 redirectResponse:(id)arg4 fromDataSource:(id)arg5;
- (void)webView:(id)arg1 resource:(id)arg2 didReceiveAuthenticationChallenge:(id)arg3 fromDataSource:(id)arg4;
- (void)webView:(id)arg1 resource:(id)arg2 didReceiveContentLength:(long long)arg3 fromDataSource:(id)arg4;
- (id)webView:(id)arg1 resource:(id)arg2 willCacheResponse:(id)arg3 fromDataSource:(id)arg4;

@end

@interface PlatformUIDelegateForwarder : NSObject
{
    struct SWebUIDelegate *_delegate;
}

- (id)initWithDelegate:(struct SWebUIDelegate *)arg1;
- (void)webView:(id)arg1 addMessageToConsole:(id)arg2;
- (BOOL)webViewShouldInterruptJavaScript:(id)arg1;
- (void)webView:(id)arg1 runJavaScriptAlertPanelWithMessage:(id)arg2 initiatedByFrame:(id)arg3;
- (BOOL)webView:(id)arg1 runJavaScriptConfirmPanelWithMessage:(id)arg2 initiatedByFrame:(id)arg3;

@end

@interface SingleFeedSynBookmark : NSObject <SynBookmark>
{
    struct RetainPtr<NSString> _urlString;
}

- (id)initWithURL:(const struct SURL *)arg1;
- (id)title;
- (id)URLString;
- (id)UUID;
- (id)children;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface SynBookmarksTemporaryList : NSObject <SynBookmark>
{
    NSMutableArray *_children;
}

- (id)init;
- (void)dealloc;
- (id)title;
- (id)URLString;
- (id)UUID;
- (id)children;
- (void)addBookmark:(id)arg1;

@end

@interface TabBarEnclosureView : NSView
{
}

+ (double)collapsedHeight;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface TabBarView : SlidingViewsBar <MorphingDragImageDropTarget, NSTabViewDelegate>
{
    BrowserWindowController *browserWindowController;
    NSTabView *tabView;
    NSImage *_windowBackgroundImage;
    NSLock *_windowBackgroundImageLock;
    BrowserTabViewItem *_tabViewItemForOverflowButton;
    BOOL _isReadyToUse;
    BOOL _areCloseButtonsVisible;
    BOOL _reorderingButton;
    BOOL _reorderingTabs;
    int _modeOfSeparatorBeforeSpecialButtons;
    int _directionOfSeparatorBeforeSpecialButtons;
    BOOL _separatorBeforeSpecialButtonsUsesActiveTabColor;
    TabButton *_draggedTab;
    TabButton *_tabSelectedBeforeTabDrag;
    NewTabButton *_newTabButton;
}

+ (id)acceptedDragTypesForTabViewItems;
+ (id)activeTabBackgroundForMainWindow;
+ (id)inactiveTabBackgroundForMainWindow;
+ (id)activeTabBackgroundForNonMainWindow;
+ (id)inactiveTabBackgroundForNonMainWindow;
+ (double)tabBackgroundImageHeight;
- (void)_installNewTabButton;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)dealloc;
- (void)drawRect:(struct CGRect)arg1;
- (BOOL)isOpaque;
- (void)mouseDown:(id)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)viewDidMoveToWindow;
- (id)menuForEvent:(id)arg1;
- (double)maxButtonXWithoutClipIndicator;
- (double)maxButtonXWithClipIndicator;
- (double)minSlidingViewX;
- (double)maxSlidingViewX;
- (double)minButtonX;
- (BOOL)isReorderingTabViews;
- (BOOL)reorderSlidingView:(id)arg1 fromMouseDownEvent:(id)arg2;
- (void)reorderedSlidingView:(id)arg1;
- (void)draggedSlidingView:(id)arg1;
- (void)refreshButtons;
- (void)setDropIndex:(unsigned long long)arg1;
- (unsigned long long)updateDropTarget:(id)arg1;
- (id)viewPinnedToOverflowIndicator;
- (double)widthOfDraggingInfo:(id)arg1;
- (double)slidingWidthForView:(id)arg1;
- (id)newTabButton;
- (void)replaceTabView:(id)arg1;
- (void)setReadyToUse;
- (id)windowBackgroundImage;
- (struct CGRect)clipRectForSlidingButton:(id)arg1;
- (unsigned long long)dragOperationForTabViewItem:(id)arg1 draggingInfo:(id)arg2;
- (void)performDragOperationForTabViewItem:(id)arg1 draggingInfo:(id)arg2;
- (unsigned long long)indexOfTabViewItem:(id)arg1;
- (void)moveTabViewItem:(id)arg1 toIndex:(unsigned long long)arg2;
- (unsigned long long)numberOfTabs;
- (id)selectedTabViewItem;
- (void)selectTabViewItem:(id)arg1;
- (void)willDragTab:(id)arg1;
- (void)didDragTab:(id)arg1;
- (void)detachTab:(id)arg1 event:(id)arg2;
- (void)detachTabAndPositionUnderCursor:(id)arg1 sourceView:(id)arg2;
- (void)disconnectFromBrowserWindowController;
- (struct CGSize)dragImageSizeForTab:(id)arg1;
- (void)getButtonWidth:(double *)arg1 leftover:(unsigned long long *)arg2 isClipping:(char *)arg3 forTabCount:(unsigned long long)arg4;
- (void)updateTabTitlesNow;
- (BOOL)performDragOperation:(id)arg1;
- (void)concludeDragOperation:(id)arg1;
- (void)animation:(id)arg1 didSlideView:(id)arg2;
- (void)tabView:(id)arg1 willSelectTabViewItem:(id)arg2;
- (void)tabView:(id)arg1 didSelectTabViewItem:(id)arg2;
- (void)tabViewDidChangeNumberOfTabViewItems:(id)arg1;
- (id)menuItemsForClippedItemsIndicator:(id)arg1;
- (unsigned long long)morphingDragImage:(id)arg1 draggingEntered:(id)arg2;
- (unsigned long long)morphingDragImage:(id)arg1 draggingUpdated:(id)arg2;
- (void)morphingDragImage:(id)arg1 draggingExited:(id)arg2;
- (BOOL)morphingDragImage:(id)arg1 performDragOperation:(id)arg2;
- (id)accessibilityAttributeNames;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1;

@end

@interface TabButton : RolloverTrackingButton <NSAnimationDelegate>
{
    BrowserTabViewItem *_tabViewItem;
    RolloverImageButton *_closeButton;
    SEL _closeAction;
    SpinningProgressIndicator *_progressIndicator;
    BOOL _isShowingProgressIndicator;
    NSImageView *_errorIndicator;
    int _leftSeparatorMode;
    int _rightSeparatorMode;
    int _leftSeparatorDirection;
    int _rightSeparatorDirection;
    struct CGRect _stackingFrame;
    BOOL _settingCellTitle;
    NSMutableArray *_fadeInAnimations;
    BOOL _drawsDetached;
    BOOL _windowBackgroundMightBeStale;
    NSString *_toolTip;
    long long _toolTipTag;
    NSImage *_tabDragImage;
    NSImage *_miniWindowDragImage;
    struct CGRect _miniWindowStartFrame;
    struct CGRect _miniWindowEndFrame;
    NSWindow *_miniWindowDragWindow;
    NSWindow *_miniWindowBrowserWindow;
    struct CGAffineTransform _originalBrowserTransform;
}

+ (void)initialize;
+ (BOOL)isMiniWindowDrag:(id)arg1;
+ (BOOL)isTabDrag:(id)arg1;
+ (id)leftActiveTabSeparatorImageForMainWindow;
+ (id)leftActiveTabSeparatorImageForNonMainWindow;
+ (id)leftInactiveTabSeparatorImageForMainWindow;
+ (id)leftInactiveTabSeparatorImageForNonMainWindow;
+ (id)rightActiveTabSeparatorImageForMainWindow;
+ (id)rightActiveTabSeparatorImageForNonMainWindow;
+ (id)rightInactiveTabSeparatorImageForMainWindow;
+ (id)rightInactiveTabSeparatorImageForNonMainWindow;
- (void)dealloc;
- (id)description;
- (void)mouseDown:(id)arg1;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (void)drawRect:(struct CGRect)arg1;
- (id)hitTest:(struct CGPoint)arg1;
- (id)menuForEvent:(id)arg1;
- (void)resetCursorRects;
- (void)setFrameOrigin:(struct CGPoint)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)setNeedsDisplayInRect:(struct CGRect)arg1;
- (void)setTitle:(id)arg1;
- (void)setToolTip:(id)arg1;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)setState:(long long)arg1;
- (void)mouseEnteredOrExited:(BOOL)arg1;
- (BOOL)shouldUseRolloverAppearance;
- (id)backgroundImageForProgressIndicator:(id)arg1;
- (void)concludeDragOperation:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (void)morphingDragImage:(id)arg1 movedToPointOnScreen:(struct CGPoint)arg2;
- (void)morphingDragImage:(id)arg1 wasDroppedAtPointOnScreen:(struct CGPoint)arg2;
- (void)morphingDragImageEnded:(id)arg1;
- (SEL)closeAction;
- (id)closeButton;
- (void)closeTab:(id)arg1;
- (void)destroy;
- (id)initWithFrame:(struct CGRect)arg1 tabViewItem:(id)arg2;
- (BOOL)isShowingProgressIndicator;
- (unsigned int)lastMouseDownModifierFlagsForCloseButton;
- (int)leftSeparatorMode;
- (id)miniWindowDragImage;
- (void)pauseProgressIndication;
- (double)maximumTextWidth;
- (void)resumeProgressIndication;
- (int)rightSeparatorMode;
- (void)setCloseAction:(SEL)arg1;
- (void)setLeftSeparatorDirection:(int)arg1;
- (void)setLeftSeparatorMode:(int)arg1;
- (void)setRightSeparatorDirection:(int)arg1;
- (void)setRightSeparatorMode:(int)arg1;
- (void)setShowingProgressIndicator:(BOOL)arg1;
- (void)setSlidingFrame:(struct CGRect)arg1;
- (void)setStackingFrame:(struct CGRect)arg1;
- (id)sheetRequestIcon;
- (void)showSheetRequestIcon:(id)arg1;
- (struct CGRect)slidingFrame;
- (struct CGRect)stackingFrame;
- (void)tabButtonsClipRectDidChange;
- (id)tabDragImage;
- (id)tabViewItem;
- (void)windowBackgroundDidChange;

@end

@interface GrowMiniWindowAnimation : NSAnimation
{
}

- (void)setCurrentProgress:(float)arg1;

@end

@interface TableHeaderView : NSTableHeaderView
{
    NSDictionary *_referenceColumnWidths;
    BOOL _noSeparatorLines;
}

+ (id)updateHeaderViewForTableView:(id)arg1;
- (void)dealloc;
- (void)setReferenceColumnWidths:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)resetReferenceColumnWidths;
- (id)referenceColumnWidths;
- (BOOL)drawsSeparatorLines;
- (void)setDrawsSeparatorLines:(BOOL)arg1;
- (BOOL)_drawingEndSeparator;

@end

@interface TableViewPlus : NSTableView
{
    BOOL _startEditTimerOnMouseUp;
    BOOL _highlightsWithITunesStyleGradient;
    int _clickedRow;
    int _clickedColumn;
}

- (id)delegate;
- (void)setDelegate:(id)arg1;
- (id)dataSource;
- (void)setDataSource:(id)arg1;
- (void)keyDown:(id)arg1;
- (BOOL)shouldEditOnDoubleClick:(id)arg1 inRow:(long long)arg2 tableColumn:(id)arg3;
- (BOOL)shouldEditOnSingleClick:(id)arg1 inRow:(long long)arg2 tableColumn:(id)arg3;
- (BOOL)_userCanEditTableColumn:(id)arg1 row:(long long)arg2;
- (void)_editClickedCell:(id)arg1;
- (void)_cancelEditOnMouseUp;
- (id)dragImageForRowsWithIndexes:(id)arg1 tableColumns:(id)arg2 event:(id)arg3 offset:(struct CGPoint *)arg4;
- (int)_rowFromEvent:(id)arg1;
- (int)_columnFromEvent:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)sizeToFit;
- (id)menuForEvent:(id)arg1;
- (unsigned long long)draggingSourceOperationMaskForLocal:(BOOL)arg1;
- (void)draggedImage:(id)arg1 endedAt:(struct CGPoint)arg2 operation:(unsigned long long)arg3;
- (BOOL)highlightsWithITunesStyleGradient;
- (void)setHighlightsWithITunesStyleGradient:(BOOL)arg1;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface TabLocation : NSObject
{
    BrowserWebView *_webView;
    BrowserDocument *_document;
}

+ (id)tabLocationWithBrowserDocument:(id)arg1 browserWebView:(id)arg2;
- (id)initWithBrowserDocument:(id)arg1 browserWebView:(id)arg2;
- (void)dealloc;
- (id)browserDocument;
- (id)browserWebView;

@end

@interface TabsPreferences : PreferencesModule
{
    NSPopUpButton *tabCreationPolicyPopUp;
    NSButton *commandClickMakesTabsCheckbox;
    NSButton *selectNewTabsCheckbox;
    NSButton *confirmClosingMultiplePagesCheckbox;
    NSTabView *finePrintSwitcher;
}

- (id)preferencesNibName;
- (void)_updateTabCreationPolicyPopUp;
- (void)updateViews;
- (void)moduleWasInstalled;
- (void)moduleWillBeRemoved;
- (void)_createTabsAlwaysConfirmationDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)takeTabCreationPolicyFrom:(id)arg1;
- (void)toggleCommandClickMakesTabs:(id)arg1;
- (void)toggleSelectNewTabs:(id)arg1;
- (void)toggleConfirmClosingMultiplePages:(id)arg1;
- (void)initializeFromDefaults;
- (BOOL)isResizable;
- (id)helpAnchor;

@end

@interface Task : NSTask
{
    NSString *_launchPath;
    NSArray *_arguments;
    NSDictionary *_environment;
    id _standardInput;
    id _standardOutput;
    int _pid;
    BOOL _didSpawn;
    struct __CFFileDescriptor *_monitoringFileDescriptor;
}

- (void)dealloc;
- (void)setLaunchPath:(id)arg1;
- (void)setArguments:(id)arg1;
- (void)setEnvironment:(id)arg1;
- (void)setStandardInput:(id)arg1;
- (void)setStandardOutput:(id)arg1;
- (id)launchPath;
- (id)arguments;
- (id)environment;
- (id)standardInput;
- (id)standardOutput;
- (void)launch;
- (void)terminate;
- (int)processIdentifier;
- (void)_childProcessDidTerminate;

@end

@interface TextCell : NSTextFieldCell
{
    BOOL _highlightsWithITunesStyleGradient;
    BOOL _suppressDefaultSelectionHighlight;
    NSString *_truncationAlternateString;
    NSString *_secondTruncationAlternateString;
    double _leftMargin;
    double _rightMargin;
    NSFont *_baselineFont;
}

+ (id)updateCellForColumn:(id)arg1 inView:(id)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)_drawHighlightWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)editWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 event:(id)arg5;
- (void)selectWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 start:(long long)arg5 length:(long long)arg6;
- (struct CGRect)drawingRectForBounds:(struct CGRect)arg1;
- (void)suppressDefaultSelectionHighlight:(BOOL)arg1;
- (id)highlightColorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (BOOL)_usingAlternateHighlightColorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)baselineFont;
- (void)setBaselineFont:(id)arg1;
- (BOOL)highlightsWithITunesStyleGradient;
- (double)leftMargin;
- (double)rightMargin;
- (void)setLeftMargin:(double)arg1;
- (void)setRightMargin:(double)arg1;
- (id)secondTruncationAlternateString;
- (void)setHighlightsWithITunesStyleGradient:(BOOL)arg1;
- (void)setSecondTruncationAlternateString:(id)arg1;
- (void)setTextColorForEnabledState;
- (void)setTruncationAlternateString:(id)arg1;
- (id)truncationAlternateString;

@end

@interface TextFieldEditor : NSTextView
{
    BOOL _pasteReplacesLineEndingsWithSpaces;
}

- (id)init;
- (BOOL)pasteReplacesLineEndingsWithSpaces;
- (void)setPasteReplacesLineEndingsWithSpaces:(BOOL)arg1;
- (void)replaceCarriageReturnsAfterPaste;
- (void)paste:(id)arg1;
- (void)pasteAsPlainText:(id)arg1;
- (void)doCommandBySelector:(SEL)arg1;

@end

@interface TitleBarButton : NSView
{
    NSString *_title;
    NSTextFieldCell *_titleCell;
    BOOL _noDragRectComputed;
}

- (id)initWithFrame:(struct CGRect)arg1;
- (void)dealloc;
- (struct CGRect)titleRect;
- (struct CGRect)titleRectInWindow;
- (void)drawRect:(struct CGRect)arg1;
- (BOOL)isFlipped;
- (void)doNothing:(id)arg1;
- (void)goToMenuItemURL:(id)arg1;
- (void)showPathPopUpMenu;
- (BOOL)shouldShowPathPopUpMenuFromMouseDown:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)rightMouseDown:(id)arg1;
- (void)mouseUp:(id)arg1;
- (id)title;
- (void)flagsChanged:(id)arg1;
- (void)resetNoDragRect;
- (void)updateFrame;
- (void)updateFrameUsingAvailableSpace:(float)arg1;
- (void)setFrame:(struct CGRect)arg1;
- (void)setFrame:(struct CGRect)arg1 ignoringInternalGeometry:(BOOL)arg2;
- (void)viewDidEndLiveResize;
- (void)windowDidEndSheet:(id)arg1;
- (void)windowDidDeminiaturize:(id)arg1;
- (void)setTitle:(id)arg1;
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityActionDescription:(id)arg1;
- (void)accessibilityPerformAction:(id)arg1;

@end

@interface BrowserToolbar : NSToolbar
{
}

- (BOOL)_allowsDisplayMode:(unsigned long long)arg1;
- (BOOL)_allowsSizeMode:(unsigned long long)arg1;
- (id)_customMetrics;
- (BOOL)_drawsBackground;
- (void)_userInsertItemWithItemIdentifier:(id)arg1 atIndex:(long long)arg2;
- (void)removeItemWithIdentifier:(id)arg1;

@end

@interface BrowserToolbarItem : NSToolbarItem
{
    unsigned int _handledMouseDownModifiersMask;
}

- (unsigned int)handledMouseDownModifiersMask;
- (void)setHandledMouseDownModifiersMask:(unsigned int)arg1;
- (BOOL)_viewMightProcessModifiedMouseDownEvent;
- (BOOL)_allowToolbarToStealEvent:(id)arg1;
- (id)initWithItemIdentifier:(id)arg1 target:(id)arg2 view:(id)arg3;
- (id)initWithItemIdentifier:(id)arg1 target:(id)arg2 boxOfButtons:(id)arg3 label:(id)arg4;
- (id)initWithItemIdentifier:(id)arg1 target:(id)arg2 button:(id)arg3;
- (void)validate;

@end

@interface NSToolbarViewMethodsHolder : NSToolbarView
{
}

- (unsigned long long)dstDraggingEnteredAtPoint:(struct CGPoint)arg1 draggingInfo:(id)arg2;
- (unsigned long long)dstDraggingExitedAtPoint:(struct CGPoint)arg1 draggingInfo:(id)arg2;
- (BOOL)dstDraggingDepositedAtPoint:(struct CGPoint)arg1 draggingInfo:(id)arg2;
- (void)_dragEndedNotification:(id)arg1;

@end

@interface ToolbarController : NSObject <NSSplitViewDelegate, NSToolbarDelegate>
{
    BrowserWindowController *_browserWindowController;
    NSWindow *_toolbarWindow;
    NSWindow *nibWindow;
    NSSegmentedControl *backForwardSegmentedControl;
    NSSegmentedControl *backForwardCustomizeSegmentedControl;
    NSSegmentedControl *textSizeSegmentedControl;
    NSSegmentedControl *textSizeCustomizeSegmentedControl;
    ButtonPlus *openInDashboardButton;
    ButtonPlus *addBookmarkButton;
    ButtonPlus *addBookmarkCustomizeButton;
    ButtonPlus *autoFillButton;
    ButtonPlus *homeButton;
    TopSitesButton *topSitesButton;
    SplitView *inputFieldsView;
    LocationTextField *locationField;
    WebSearchField *searchField;
    ButtonPlus *reportBugButton;
    ButtonPlus *printButton;
    SplitView *inputFieldsCustomizeView;
    ButtonPlus *detachedAddBookmarkButton;
    ButtonPlus *bookmarksButton;
    ButtonPlus *historyButton;
    ButtonPlus *mailPageButton;
    ButtonPlus *showDownloadsWindowButton;
    ButtonPlus *showWebInspectorButton;
    ButtonPlus *bookmarksBarButton;
    ButtonPlus *newTabButton;
    BrowserToolbarItem *_backForwardItem;
    BrowserToolbarItem *_createWebClipItem;
    BrowserToolbarItem *_autoFillItem;
    BrowserToolbarItem *_topSitesItem;
    BrowserToolbarItem *_homeItem;
    BrowserToolbarItem *_inputFieldsItem;
    BrowserToolbarItem *_textSizeItem;
    BrowserToolbarItem *_reportBugItem;
    BrowserToolbarItem *_printItem;
    BrowserToolbarItem *_detachedAddBookmarkItem;
    BrowserToolbarItem *_bookmarksItem;
    BrowserToolbarItem *_historyItem;
    BrowserToolbarItem *_mailPageItem;
    BrowserToolbarItem *_showDownloadsWindowItem;
    BrowserToolbarItem *_showWebInspectorItem;
    BrowserToolbarItem *_bookmarksBarItem;
    BrowserToolbarItem *_newTabItem;
    BrowserToolbarItem *_backForwardCustomizeItem;
    BrowserToolbarItem *_inputFieldsCustomizeItem;
    BrowserToolbarItem *_textSizeCustomizeItem;
    BrowserToolbarItem *_customizeToolbarCustomizeItem;
    struct OwnPtr<Safari::SObjCNotifier> m_notifier;
    BOOL _validatingExtensionToolbarItemsSoon;
    float _inputFieldsWidthRatio;
}

- (id)initWithBrowserWindowController:(id)arg1;
- (void)disconnectFromBrowserWindowController;
- (void)dealloc;
- (void)setToolbarForWindow:(id)arg1;
- (id)toolbarWindow;
- (void)_migrateOldSafariToolbarConfiguration;
- (void)_removeAutomaticallyInsertedReportBugButton;
- (void)_extensionWasEnabled:(const struct SNotification *)arg1;
- (void)_extensionWasDisabled:(const struct SNotification *)arg1;
- (void)validateExtensionToolbarItems;
- (void)validateExtensionToolbarItemsSoon;
- (id)toolbarDefaultItemIdentifiers:(id)arg1;
- (id)toolbarAllowedItemIdentifiers:(id)arg1;
- (id)toolbar:(id)arg1 itemForItemIdentifier:(id)arg2 willBeInsertedIntoToolbar:(BOOL)arg3;
- (id)_toolbarItemForBackForward:(BOOL)arg1;
- (void)_prepareBackForwardSegmentedControl:(id)arg1;
- (id)_toolbarItemForInputFields:(BOOL)arg1 attachedButton:(BOOL)arg2;
- (id)_toolbarItemForReportBug:(BOOL)arg1;
- (id)_toolbarItemForAutoFill:(BOOL)arg1;
- (id)_toolbarItemForTopSites:(BOOL)arg1;
- (id)_toolbarItemForHome:(BOOL)arg1;
- (id)_toolbarItemForTextSize:(BOOL)arg1;
- (id)_toolbarItemForDetachedAddBookmark:(BOOL)arg1;
- (id)_toolbarItemForBookmarks:(BOOL)arg1;
- (id)_toolbarItemForHistory:(BOOL)arg1;
- (id)_toolbarItemForMailWebPage:(BOOL)arg1;
- (id)_toolbarItemForShowDownloadsWindow:(BOOL)arg1;
- (id)_toolbarItemForShowWebInspector:(BOOL)arg1;
- (id)_toolbarItemForBookmarksBar:(BOOL)arg1;
- (id)_toolbarItemForNewTab:(BOOL)arg1;
- (void)_prepareTextSizeSegmentedControl:(id)arg1;
- (id)_toolbarItemForPrint:(BOOL)arg1;
- (id)_toolbarItemForWebClip:(BOOL)arg1;
- (id)backForwardSegmentedControl;
- (id)locationField;
- (id)searchField;
- (BOOL)shouldShowWebSearchField;
- (BOOL)canShowInputFields;
- (BOOL)isBackForwardVisible;
- (void)_layOutInputFields;
- (void)_updateToolbarSettings;
- (void)_updateZoomTextLabel;
- (void)_parentalControlsDidChange;
- (void)_zoomTextOnlyDidChange;
- (id)_zoomTextLabel;
- (double)splitView:(id)arg1 constrainMaxCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(id)arg1 constrainMinCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (void)splitView:(id)arg1 resizeSubviewsWithOldSize:(struct CGSize)arg2;
- (void)splitViewDidEndLiveResize:(id)arg1;
- (void *)_replaceToolbarViewMethodImplementation:(SEL)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface TopSitesButton : NSButton
{
}

- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithCoder:(id)arg1;
- (void)prepareForFavoritesBar;
- (id)_clipViewAncestor;
- (unsigned long long)draggingEntered:(id)arg1;
- (void)draggingExited:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (void)concludeDragOperation:(id)arg1;

@end

@interface InnerSearchFieldDelegate : NSObject <NSTextFieldDelegate>
{
    struct TopSitesSearchField *_searchField;
    struct TopSitesSearchFieldClient *_client;
}

- (void)setClient:(struct TopSitesSearchFieldClient *)arg1;
- (void)setSearchField:(struct TopSitesSearchField *)arg1;
- (void)searchCancelled:(id)arg1;
- (void)searchFieldBecameFocused:(id)arg1;
- (void)searchFieldLostFocus:(id)arg1;
- (BOOL)searchFieldKeyDown:(id)arg1;
- (BOOL)searchFieldKeyUp:(id)arg1;
- (void)takeSearchStringFromSearchField:(id)arg1;
- (void)startForcingSearchFieldCancelButtonToShow;
- (void)stopForcingSearchFieldCancelButtonToShow;
- (BOOL)control:(id)arg1 textView:(id)arg2 doCommandBySelector:(SEL)arg3;

@end

@interface TopSitesView : EventSendingLKView <WebDocumentView, NSTextFieldDelegate, SafariWebDocumentCustomSearchField>
{
    BOOL _allowedToShowSearchField;
    BOOL _immediatelyResignFirstResponder;
}

- (id)initWithFrame:(struct CGRect)arg1;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (void)viewWillMoveToSuperview:(id)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)_updateResizeIndicator;
- (void)viewDidMoveToWindow;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (void)setDataSource:(id)arg1;
- (void)dataSourceUpdated:(id)arg1;
- (void)setNeedsLayout:(BOOL)arg1;
- (void)layout;
- (void)viewWillMoveToHostWindow:(id)arg1;
- (void)viewDidMoveToHostWindow;
- (void)drawRect:(struct CGRect)arg1;
- (void)contextDidChange;
- (void)setCoreAnimationLayer:(PassRefPtr_0865e063)arg1;
- (struct EventSendingLayer *)eventSendingLayer;
- (BOOL)canFocusSearchField;
- (void)focusSearchField;
- (BOOL)canFindNext;
- (void)findNext;
- (BOOL)canFindPrevious;
- (void)findPrevious;
- (BOOL)isShowingWall;
- (void)setSearchFieldHidden:(BOOL)arg1;
- (void)hideSearchFieldAfterNextDraw;
- (void)showWall;
- (void)setFrameOrigin:(struct CGPoint)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)getVisibleURLStrings:(struct ListHashSet<Safari::SString, 256ul, Safari::SCFObjectSubclassHash<Safari::SString>> *)arg1;
- (BOOL)hasEnoughVisibleSnapshotPlaceholdersToWarrantPrompt;

@end

@interface TopSitesWebDocumentRepresentation : NSObject <WebDocumentRepresentation>
{
}

- (void)setDataSource:(id)arg1;
- (void)receivedData:(id)arg1 withDataSource:(id)arg2;
- (void)receivedError:(id)arg1 withDataSource:(id)arg2;
- (void)finishedLoadingWithDataSource:(id)arg1;
- (BOOL)canProvideDocumentSource;
- (id)documentSource;
- (id)title;

@end

@interface TransparentOverlayWindow : Panel
{
    BOOL _resigningKey;
}

- (id)initWithContentRect:(struct CGRect)arg1;
- (id)initWithContentRect:(struct CGRect)arg1 styleMask:(unsigned long long)arg2 backing:(unsigned long long)arg3 defer:(BOOL)arg4;
- (BOOL)willHandleMouseDownEvent:(id)arg1;
- (void)becomeKeyWindow;
- (BOOL)canBecomeKeyWindow;
- (BOOL)canBecomeMainWindow;
- (void)resignKeyWindow;
- (void)endEditingFor:(id)arg1;

@end

@interface ViewTree : NSObject
{
    NSOutlineView *outlineView;
    NSWindow *window;
    id <NSOutlineViewDataSource> dataSource;
}

- (id)window;
- (void)createTreeFromWebView:(id)arg1;
- (void)windowWillClose:(id)arg1;
- (void)dealloc;

@end

@interface ViewTreeDataSource : NSObject
{
    NSView *root;
}

- (id)initWithWebView:(id)arg1;
- (void)dealloc;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;

@end

@interface VoiceOverInfo : NSObject
{
    id _parentOverride;
    struct AccessibilityObject *_object;
}

+ (id)voiceOverRoleForAccessibilityObject:(struct AccessibilityObject *)arg1;
+ (id)voiceOverRoleDescriptionForAccessibilityObject:(struct AccessibilityObject *)arg1;
+ (id)voiceOverActionForAction:(int)arg1;
+ (id)voiceOverNotificationForNotification:(int)arg1;
+ (int)accessibilityActionForVoiceOverAction:(id)arg1;
- (id)initWithAccessibilityObject:(struct AccessibilityObject *)arg1;
- (void)dealloc;
- (id)accessibilityAttributeNames;
- (id)accessibilityParent;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityActionDescription:(id)arg1;
- (void)accessibilityPerformAction:(id)arg1;
- (void)accessibilityPostNotification:(int)arg1;
- (void)setParentOverride:(id)arg1;
- (id)accessibilityFocusedUIElement;
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (struct CGRect)screenRect;
- (struct CGRect)convertRectToScreenCoordinates:(struct CGRect)arg1;
- (struct CGRect)accessibilityScreenRectForChild:(id)arg1;

@end

@interface VoiceOverLayerInfo : VoiceOverInfo
{
}

- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (void)accessibilitySetValue:(id)arg1 forAttribute:(id)arg2;
- (id)ancestorLKView;
- (struct CGRect)convertRectToScreenCoordinates:(struct CGRect)arg1;

@end

@interface Watchdog : NSObject
{
    BOOL shouldStop;
    double watchdogInterval;
    NSTimer *watchdogTimer;
    NSCondition *watchdogCondition;
}

- (id)init;
- (id)sampleOutput;
- (void)handleHang;
- (void)runWatchdog;
- (void)start;
- (void)stop;
- (void)setWatchdogInterval:(double)arg1;
- (double)watchdogInterval;
- (void)checkIn;
- (void)dealloc;

@end

@interface WBPreferences : NSPreferences
{
    BOOL _isCancelling;
}

+ (id)preferencesModuleNameFromIdentifier:(int)arg1;
+ (void)_setCachedHomePage:(id)arg1;
+ (id)homePage;
+ (id)homeURL;
+ (void)setHomePage:(id)arg1;
+ (long long)newWindowBehavior;
+ (long long)newTabBehavior;
+ (void)resetDownloadPath;
+ (id)_defaultDownloadPathCreatedIfNeeded;
+ (id)_computeDownloadPath;
+ (id)downloadPath;
+ (void)setDownloadPath:(id)arg1;
+ (BOOL)isSafeToOpenFileAtPath:(id)arg1;
+ (void)askBeforeSubmittingInsecureFormsPreferenceDidChange;
+ (BOOL)askBeforeSubmittingInsecureForms;
+ (BOOL)runawayJavaScriptTimerEnabled;
+ (void)setRunawayJavaScriptTimerEnabled:(BOOL)arg1;
- (id)init;
- (void)removeExtensionsPreferences;
- (void)addExtensionsPreferences;
- (BOOL)usesButtons;
- (void)cancel:(id)arg1;
- (BOOL)isCancelling;
- (unsigned long long)validModesForFontPanel:(id)arg1;
- (void)changeFont:(id)arg1;
- (BOOL)windowShouldClose:(id)arg1;
- (void)windowWillClose:(id)arg1;

@end

@interface WebBookmark : NSObject <NSCopying, SynBookmark>
{
    struct Bookmark *_bookmark;
}

+ (id)bookmarkOfType:(int)arg1;
+ (id)_bookmarkFromDictionaryRepresentation:(id)arg1 topLevelOnly:(BOOL)arg2 withGroup:(id)arg3;
+ (id)bookmarkFromDictionaryRepresentation:(id)arg1 withGroup:(id)arg2;
+ (id)bookmarkFromDictionaryRepresentation:(id)arg1 topLevelOnly:(BOOL)arg2 withGroup:(id)arg3;
+ (id)bookmarkFromGlobalHistoryItem:(struct GlobalHistoryItem *)arg1;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)title;
- (void)setTitle:(id)arg1;
- (id)icon;
- (int)bookmarkType;
- (id)description;
- (id)URLString;
- (void)setURLString:(id)arg1;
- (id)identifier;
- (void)setIdentifier:(id)arg1;
- (id)children;
- (unsigned long long)numberOfChildren;
- (unsigned long long)_numberOfDescendants;
- (id)childAtIndex:(unsigned long long)arg1;
- (unsigned long long)indexOfChild:(id)arg1;
- (void)insertChild:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)removeChild:(id)arg1;
- (id)parent;
- (void)_setUUID:(id)arg1;
- (id)UUID;
- (BOOL)_hasUUID;
- (id)group;
- (void)_setGroup:(id)arg1;
- (id)initWithBookmark:(PassRefPtr_83ad4302)arg1;
- (id)initWithIdentifier:(id)arg1 UUID:(id)arg2 group:(id)arg3;
- (id)init;
- (id)initFromDictionaryRepresentation:(id)arg1 topLevelOnly:(BOOL)arg2 withGroup:(id)arg3;
- (id)initFromDictionaryRepresentation:(id)arg1 withGroup:(id)arg2;
- (id)dictionaryRepresentation;
- (struct Bookmark *)bookmark;
- (BOOL)canOpenInTabs;
- (BOOL)automaticallyOpensInTabs;
- (void)setAutomaticallyOpensInTabs:(BOOL)arg1;
- (void)setUnreadRSSCount:(int)arg1;
- (int)unreadRSSCount;
- (BOOL)isRSSBookmark;

@end

@interface WebBookmarkExporter : NSObject
{
    NSError *_error;
}

- (id)leadingWhiteSpaceForIndentLevel:(int)arg1;
- (id)escapeHTML:(id)arg1;
- (id)stringForBookmarkLeaf:(id)arg1 withIndentLevel:(int)arg2;
- (id)stringForBookmarkList:(id)arg1 withIndentLevel:(int)arg2;
- (id)stringForBookmark:(id)arg1 withIndentLevel:(int)arg2;
- (id)stringForRootBookmark:(id)arg1 withIndentLevel:(int)arg2;
- (id)fileContentsWithRootBookmark:(id)arg1;
- (id)initWithRootBookmark:(id)arg1 path:(id)arg2;
- (void)dealloc;
- (id)error;

@end

@interface WebBookmarkGroup : NSObject
{
    struct BookmarkGroup *_group;
}

- (id)initWithBookmarkGroup:(struct BookmarkGroup *)arg1;
- (struct BookmarkGroup *)bookmarkGroup;
- (id)bookmarksForURLString:(id)arg1;
- (id)bookmarkForUUID:(id)arg1;
- (void)transferUUIDFrom:(id)arg1 to:(id)arg2;
- (void)removeBookmark:(id)arg1;
- (id)versionString;
- (id)topBookmark;
- (void)_bookmarksWereReloaded;
- (id)addNewBookmarkListToBookmark:(id)arg1 withTitle:(id)arg2;
- (id)insertNewBookmarkListAtIndex:(unsigned int)arg1 ofBookmark:(id)arg2 withTitle:(id)arg3;
- (id)_insertNewBookmarkAtIndex:(unsigned int)arg1 ofBookmark:(id)arg2 withTitle:(id)arg3 type:(int)arg4;
- (id)file;
- (BOOL)loadBookmarkGroup;
- (BOOL)saveBookmarkGroup;
- (void)suppressNotifications;
- (void)resumeNotifications;
- (BOOL)notificationsSuppressed;
- (void)setShouldNotifyBookmarksControllerOfReloads:(BOOL)arg1;

@end

@interface WebBookmarkImporter : NSObject
{
    WebBookmark *topBookmark;
    NSError *error;
}

- (id)unescapeHTML:(id)arg1;
- (id)initWithPath:(id)arg1;
- (id)topBookmark;
- (id)error;
- (void)dealloc;

@end

@interface WebBookmarkLeaf : WebBookmark
{
}

- (void)dealloc;
- (id)icon;
- (int)bookmarkType;
- (void)setURLString:(id)arg1;

@end

@interface WebBookmarkList : WebBookmark
{
}

- (id)icon;
- (int)bookmarkType;
- (id)children;
- (unsigned long long)numberOfChildren;
- (id)childAtIndex:(unsigned long long)arg1;
- (unsigned long long)indexOfChild:(id)arg1;
- (void)removeChild:(id)arg1;
- (void)insertChild:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)setAutomaticallyOpensInTabs:(BOOL)arg1;

@end

@interface WebBookmarkProxy : WebBookmark
{
}

- (int)bookmarkType;
- (id)icon;

@end

@interface WebClipBanner : BannerWithOverlay <NSTextFieldDelegate>
{
    NSTextField *prompt;
    NSButton *cancelButton;
    NSButton *commitButton;
    struct CGRect _currentCropRect;
    struct OwnPtr<ClipFinder> m_clipFinder;
    struct RefPtr<ClippedNode> m_lastClippedNode;
    int _webClipBannerState;
}

+ (id)bannerColor;
+ (int)bannerSortOrder;
+ (BOOL)bannerHasBottomBorder;
+ (BOOL)overlayAppearsAutomatically;
+ (Class)overlayViewClass;
+ (id)bannerControlTextAttributes;
- (void)dealloc;
- (id)bannerNibName;
- (void)detachWebView;
- (void)didInstallBannerView;
- (void)didUninstallBannerView;
- (id)initWithWebView:(id)arg1;
- (void)webViewDidMoveToWindow;
- (void)willAttachOverlay;
- (void)willDetachOverlay;
- (BOOL)croppingOverlayView:(id)arg1 interceptMouseDown:(id)arg2;
- (void)cancelCropMode:(id)arg1;
- (void)confirmCropMode:(id)arg1;
- (void)firstResponderMightHaveChanged;
- (void)startReshapeMode:(id)arg1;
- (int)webClipBannerState;
- (void)setWebClipBannerState:(int)arg1;
- (void)setDisplaysCroppingHandles:(BOOL)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface WebIconMenuItem : NSMenuItem
{
    NSString *_URLString;
}

+ (void)initialize;
- (id)initWithTitle:(id)arg1 action:(SEL)arg2 keyEquivalent:(id)arg3 URLString:(id)arg4;
- (void)dealloc;
- (void)setMenu:(id)arg1;

@end

@interface WebSearchField : NSSearchField
{
    NSString *_searchTextToolTip;
    NSString *_cancelToolTip;
    NSString *_recentSearchesToolTip;
    NSString *_snapBackToolTip;
    long long _searchTextToolTipTag;
    long long _cancelToolTipTag;
    long long _recentSearchesToolTipTag;
    long long _snapBackToolTipTag;
    BOOL _toolTipRectanglesUpToDate;
    BOOL _inTextDidEndEditing;
    BOOL _becomingFirstResponder;
}

+ (void)initialize;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)snapBackCell;
- (void)setIsShowingSnapBack:(BOOL)arg1;
- (BOOL)isShowingSnapBack;
- (BOOL)performKeyEquivalent:(id)arg1;
- (BOOL)becomeFirstResponder;
- (void)selectText:(id)arg1;
- (void)textDidEndEditing:(id)arg1;
- (void)setSearchTextToolTip:(id)arg1;
- (id)searchTextToolTip;
- (void)setCancelToolTip:(id)arg1;
- (id)cancelToolTip;
- (void)setSnapBackToolTip:(id)arg1;
- (id)snapBackToolTip;
- (void)setRecentSearchesToolTip:(id)arg1;
- (id)recentSearchesToolTip;
- (void)removeAllToolTips;
- (void)setFrameOrigin:(struct CGPoint)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (id)toolTip;
- (void)resetCursorRects;
- (id)view:(id)arg1 stringForToolTip:(long long)arg2 point:(struct CGPoint)arg3 userData:(void *)arg4;

@end

@interface WebSearchFieldCell : NSSearchFieldCell
{
    NSButtonCell *standardCancelCell;
    NSButtonCell *snapBackCell;
    NSString *accessibilityDescription;
}

+ (void)addSearchString:(id)arg1;
+ (void)updateCellForSearchField:(id)arg1;
- (id)init;
- (void)dealloc;
- (BOOL)_textIsEmpty;
- (BOOL)snapBackIsVisibleButSuperclassIsUnaware;
- (BOOL)cancelButtonIsSuppressed;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)snapBackCell;
- (void)setIsShowingSnapBack:(BOOL)arg1;
- (BOOL)isShowingSnapBack;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (void)_addStringToRecentSearches:(id)arg1;
- (void)_searchFieldClearRecents:(id)arg1;
- (void)recentSearchesChanged:(id)arg1;
- (id)_searchMenuTemplate;
- (id)accessibilityAttributeNames;
- (id)accessibilityDescription;
- (void)setAccessibilityDescription:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)editWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 event:(id)arg5;
- (void)selectWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 start:(long long)arg5 length:(long long)arg6;

@end

@interface BannerAction : NSObject
{
    Banner *_banner;
    int _actionType;
    BOOL _animates;
}

- (id)initWithBanner:(id)arg1 actionType:(int)arg2 animates:(BOOL)arg3;
- (void)dealloc;
- (id)banner;
- (int)actionType;
- (BOOL)animates;

@end

@interface WebViewPlus : WebView
{
    BOOL _bannerIsMovingIntoPlace;
    NSMutableArray *_currentBanners;
    NSMutableArray *_bannerActionQueue;
}

- (void)dealloc;
- (void)close;
- (BOOL)maintainsInactiveSelection;
- (void)bannerDidInstall:(id)arg1;
- (void)bannerDidUninstall:(id)arg1;
- (void)bannerWillInstall:(id)arg1;
- (void)bannerWillUninstall:(id)arg1;
- (void)banner:(id)arg1 viewBelow:(id)arg2 wasResizedFromFrame:(struct CGRect)arg3 animationProgress:(float)arg4 installing:(BOOL)arg5;
- (id)viewBelowBanner:(id)arg1;
- (id)currentBanners;
- (void)queueInstallOfBanner:(id)arg1 allowingAnimation:(BOOL)arg2;
- (void)queueUninstallOfBanner:(id)arg1 allowingAnimation:(BOOL)arg2;
- (void)zoomIn:(id)arg1;
- (void)zoomOut:(id)arg1;
- (void)zoomToStandardSize:(id)arg1;
- (BOOL)canZoomIn;
- (BOOL)canZoomOut;
- (BOOL)canZoomToStandardSize;
- (float)zoomMultiplier;
- (void)setZoomMultiplier:(float)arg1;
- (id)currentURL;

@end

@interface Window : NSWindow <LockableFirstResponder>
{
    BOOL _unresizable;
    BOOL _firstResponderIsLocked;
    struct CGSize _savedMinContentSize;
    struct CGSize _savedMaxContentSize;
    NSResponder *_incomingFirstResponder;
}

- (void)dealloc;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (void)close;
- (void)becomeKeyWindow;
- (BOOL)performKeyEquivalent:(id)arg1;
- (void)sendEvent:(id)arg1;
- (void)_setFrameAfterMove:(struct CGRect)arg1;
- (id)findFrontmostOtherWindowOfWidth:(float)arg1;
- (struct CGRect)adjustedFrameForCascade:(struct CGRect)arg1 fromWindow:(id)arg2;
- (struct CGPoint)cascadeTopLeftFromPoint:(struct CGPoint)arg1;
- (BOOL)isResizable;
- (void)setResizable:(BOOL)arg1;
- (BOOL)_safari_inLiveResize;
- (void)_endLiveResize;
- (BOOL)_isTransparentOverlayChild:(id)arg1;
- (BOOL)makeFirstResponder:(id)arg1;
- (BOOL)firstResponderIsLocked;
- (void)setFirstResponderIsLocked:(BOOL)arg1;
- (id)incomingOrCurrentFirstResponder;
- (void)setFrame:(struct CGRect)arg1 display:(BOOL)arg2;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (BOOL)_isKeyWindow;
- (BOOL)canCycle;

@end

@interface WindowController : NSWindowController <ExtendedWindowDelegate>
{
    NSString *_multiWindowFrameAutosaveName;
    BOOL _autosaveFrame;
    BOOL _lastResizeWasProgrammatic;
}

- (void)dealloc;
- (void)_saveFrameIfAllowed;
- (void)windowDidMove:(id)arg1;
- (void)windowDidResize:(id)arg1;
- (void)_safari_windowDidEndLiveResize;
- (void)windowWillClose:(id)arg1;
- (BOOL)setMultiWindowFrameAutosaveName:(id)arg1;
- (id)multiWindowFrameAutosaveName;
- (void)_setFrameWithoutAutosaving:(struct CGRect)arg1 programmatically:(BOOL)arg2;
- (void)setFrameWithoutAutosaving:(struct CGRect)arg1;
- (void)setFrameProgrammatically:(struct CGRect)arg1;
- (BOOL)lastResizeWasProgrammatic;
- (struct CGRect)defaultFrame;
- (void)setFrameToDefault;
- (void)_windowDidLoad;
- (void)setFrameAutosaveEnabled:(BOOL)arg1;
- (BOOL)frameAutosaveEnabled;
- (BOOL)frameAutosaveIsAllowed;

@end

@interface BrowserExtensionToolbarItem : BrowserToolbarItem
{
    struct RefPtr<Safari::ExtensionToolbarItem> _extensionToolbarItem;
    BOOL _addedToToolbar;
}

- (id)initWithExtensionToolbarItem:(struct ExtensionToolbarItem *)arg1;
- (void)dealloc;
- (struct ExtensionToolbarItem *)extensionToolbarItem;
- (id)badgedButton;
- (void)setBadgeText:(id)arg1;
- (id)badgeText;
- (void)toolbarItemAdded:(id)arg1;
- (void)toolbarItemRemoved:(id)arg1;
- (void)validate;
- (void)dispatchCommandEvent:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface PluginStartButton : RolloverImageButton
{
    SEL _menuSelector;
}

- (void)setMenuSelector:(SEL)arg1;
- (id)menu;
- (void)_popUpMenu;
- (void)moveDown:(id)arg1;
- (void)moveUp:(id)arg1;
- (void)mouseDown:(id)arg1;

@end

@interface PlatformHistoryDelegateForwarder : NSObject
{
    struct SWebHistoryDelegate *_delegate;
}

- (id)initWithDelegate:(struct SWebHistoryDelegate *)arg1;
- (void)webView:(id)arg1 didNavigateWithNavigationData:(id)arg2 inFrame:(id)arg3;
- (void)webView:(id)arg1 didPerformClientRedirectFromURL:(id)arg2 toURL:(id)arg3 inFrame:(id)arg4;
- (void)webView:(id)arg1 didPerformServerRedirectFromURL:(id)arg2 toURL:(id)arg3 inFrame:(id)arg4;
- (void)webView:(id)arg1 updateHistoryTitle:(id)arg2 forURL:(id)arg3;
- (void)populateVisitedLinksForWebView:(id)arg1;

@end

@interface BadgeView : NSView
{
    NSString *_text;
    double _maxWidth;
}

- (id)initWithFrame:(struct CGRect)arg1;
- (void)dealloc;
- (void)drawRect:(struct CGRect)arg1;
- (void)sizeToFit;
- (void)setText:(id)arg1;
- (id)text;
- (void)setMaxWidth:(double)arg1;
- (double)maxWidth;

@end

@interface BadgedButton : ButtonPlus
{
    BadgeView *_badgeView;
    struct CGSize _badgeOutset;
}

- (id)initWithFrame:(struct CGRect)arg1;
- (void)dealloc;
- (void)_updateBadge;
- (void)_updateMaxWidth;
- (void)setBadgeOutset:(struct CGSize)arg1;
- (struct CGSize)badgeOutset;
- (void)setBadgeText:(id)arg1;
- (id)badgeText;
- (void)setFrame:(struct CGRect)arg1;
- (void)viewDidMoveToSuperview;

@end

@interface DownloadFile : NSObject
{
    NSString *_initialDownloadPath;
    int _type;
    struct AliasRecord **_alias;
    BOOL _isAliasOrSymlink;
    BOOL _isDiskImageVolume;
    BOOL _isSubFile;
    BOOL _isTrashed;
    NSDictionary *_securityAssessment;
    NSArray *_temporaryFiles;
    BOOL _isApproved;
    BOOL _areTemporaryFilesApproved;
}

+ (id)filesForUnarchivedFileAtPath:(id)arg1;
- (id)_MIMETypeFromExtension;
- (BOOL)_isMIMEType:(id)arg1;
- (BOOL)_isBOM;
- (BOOL)_isDiskImage;
- (BOOL)_isGZIP;
- (id)aliasData;
- (void)setAlias:(struct AliasRecord **)arg1;
- (void)setAliasData:(id)arg1;
- (void)_setInitialDownloadPath:(id)arg1;
- (void)setPath:(id)arg1;
- (id)initWithPath:(id)arg1;
- (id)initWithAliasData:(id)arg1 pathString:(id)arg2;
- (void)dealloc;
- (id)aliasedOrOriginalPath;
- (id)path;
- (BOOL)isArchive;
- (BOOL)isBOM;
- (BOOL)isDiskImage;
- (BOOL)isGZIP;
- (int)type;
- (void)setType:(int)arg1;
- (void)setTypeWithEncoding:(id)arg1;
- (BOOL)isDiskImageVolume;
- (void)setIsDiskImageVolume:(BOOL)arg1;
- (BOOL)isSubFile;
- (void)setIsSubFile:(BOOL)arg1;
- (BOOL)isTrashed;
- (void)setIsTrashed:(BOOL)arg1;
- (BOOL)isMovableOrRemovable;
- (id)description;
- (id)securityAssessment;
- (void)resetSecurityAssessment;
- (BOOL)isRiskSafeOrUnknown;

@end

@interface DownloadRow : NSControl
{
    NSProgressIndicator *_progressIndicator;
    struct CGRect _iconFrame;
    struct CGRect _filenameFrame;
    struct CGRect _statusFrame;
    struct CGRect _revealFrame;
    struct CGRect _stopResumeFrame;
    DownloadProgressEntry *_entry;
    NSTimer *_progressTimer;
    BOOL _isSelected;
    int _buttonState;
    int _pressedButton;
    TextCell *_filenameTextCell;
    TextCell *_statusTextCell;
    NSImage *_iconImage;
    NSImage *_stopResumeImage;
    NSImage *_revealImage;
    long long _revealTrackingRectTag;
    long long _stopResumeTrackingRectTag;
}

- (id)_listView;
- (void)_removeTrackingRects;
- (void)_updateTrackingRects;
- (void)_updateFrames:(BOOL)arg1;
- (id)initWithEntry:(id)arg1;
- (void)dealloc;
- (void)setFrameSize:(struct CGSize)arg1;
- (BOOL)_stopResumeButtonEnabled;
- (void)_drawIcon:(struct CGRect)arg1;
- (void)_drawFilename:(struct CGRect)arg1;
- (void)_drawStatus:(struct CGRect)arg1;
- (void)_drawStopResume:(struct CGRect)arg1;
- (void)_drawReveal:(struct CGRect)arg1;
- (void)updateCell:(id)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (id)_resumeImageForCurrentState;
- (id)_stopImageForCurrentState;
- (id)_revealImageForCurrentState;
- (void)_updateButtons;
- (void)_updateIconAndFilename;
- (void)_updateProgressAnimation;
- (void)_startProgressAnimation;
- (void)_startDiskCopyAnimation;
- (void)_stopProgressAnimation;
- (id)_timeRemainingString;
- (id)_rateString;
- (id)_errorSummary;
- (id)displayableFileType;
- (id)_statusAndRateText;
- (id)_statusAndTimeRemainingText;
- (id)_openHelpString;
- (id)_revealHelpString;
- (id)_stopResumeHelpString;
- (id)_stopResumeAccessibilityDescription;
- (id)_statusText;
- (void)_updateStatusField;
- (void)stageDidChange;
- (void)currentFileDidChange;
- (void)progressDidChange;
- (void)_updateTextColor;
- (unsigned long long)draggingSourceOperationMaskForLocal:(BOOL)arg1;
- (void)windowDidBecomeOrResignKey:(id)arg1;
- (id)entry;
- (float)bestWidth;
- (void)setSelected:(BOOL)arg1;
- (BOOL)isSelected;
- (void)open:(id)arg1;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (BOOL)allowsRowSelectionAtPoint:(struct CGPoint)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)_updateButtonStateAndStatusField;
- (void)mouseEntered:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)viewDidMoveToWindow;
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (id)accessibilityDescriptionForButtonInfo:(id)arg1;
- (BOOL)accessibilityButtonInfoIsEnabled:(id)arg1;
- (void)accessibilityPerformActionForButtonInfo:(id)arg1;
- (id)accessibilityHelpStringForChildInfo:(id)arg1;
- (struct CGRect)accessibilityScreenRectForChild:(id)arg1;

@end

@interface SecureDownloadProgressEntry : DownloadProgressEntry <NSURLConnectionDelegate>
{
    struct OpaqueSecureDownload *_secureDownload;
    NSURLConnection *_ticketDownloadConnection;
    NSURLResponse *_ticketResponse;
    NSURLRequest *_ticketRequest;
    NSMutableData *_ticketData;
    NSArray *_downloadURLs;
    BOOL _ticketDownloaded;
}

- (id)initWithDictionary:(id)arg1;
- (id)initWithRequest:(id)arg1 mayOpenWhenDone:(BOOL)arg2 allowOverwrite:(BOOL)arg3;
- (void)dealloc;
- (id)dictionaryRepresentation;
- (id)filename;
- (id)createDownloadBundleWithFilename:(id)arg1;
- (void)resume;
- (void)_setDownload:(id)arg1;
- (id)_newWebDownloadResumedAtPath:(id)arg1;
- (id)_newWebDownload;
- (void)_fetchTicket;
- (id)_ticketPath;
- (long long)bytesExpected;
- (struct OpaqueSecureDownload *)secureDownload;
- (void)reportCorruptDownload;
- (void)reportInvalidTicket;
- (void)deleteDownload;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connection:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (id)connection:(id)arg1 willCacheResponse:(id)arg2;

@end

@interface DownloadViewController : NSResponder
{
    ListView *_listView;
    NSMutableArray *_rows;
    NSMutableDictionary *_entryToRow;
}

- (void)_insertEntry:(id)arg1 atIndex:(unsigned int)arg2;
- (void)_addAllEntries;
- (void)awakeFromNib;
- (void)dealloc;
- (struct CGSize)bestSize;
- (void)_removeEntry:(id)arg1;
- (void)downloadsDidChange:(id)arg1;
- (void)downloadDidStart:(id)arg1;
- (BOOL)acceptsFirstResponder;
- (id)_selectedEntries;
- (BOOL)_validateEntries:(id)arg1 withBooleanKey:(id)arg2;
- (void)_openEntries:(id)arg1;
- (BOOL)_canOpenEntries:(id)arg1;
- (BOOL)_canOpenSelection;
- (void)_openSelection;
- (void)open:(id)arg1;
- (void)_revealEntries:(id)arg1;
- (BOOL)_canRevealEntries:(id)arg1;
- (BOOL)_canRevealSelection;
- (void)_revealSelection;
- (void)reveal:(id)arg1;
- (void)_resumeEntries:(id)arg1;
- (BOOL)_canResumeEntries:(id)arg1;
- (BOOL)_canResumeSelection;
- (void)_resumeSelection;
- (void)_stopEntries:(id)arg1;
- (BOOL)_canStopEntries:(id)arg1;
- (BOOL)_canStopSelection;
- (void)_stopSelection;
- (void)stopLoading:(id)arg1;
- (void)cancel:(id)arg1;
- (void)stopResume:(id)arg1;
- (void)_copyEntries:(id)arg1;
- (BOOL)_canCopyEntries:(id)arg1;
- (BOOL)_canCopySelection;
- (void)_copySelection;
- (void)copy:(id)arg1;
- (void)_redoRemoveEntries:(id)arg1;
- (void)_undoRemoveEntries:(id)arg1;
- (void)_removeEntries:(id)arg1;
- (BOOL)_canRemoveEntries:(id)arg1;
- (BOOL)_canRemoveSelection;
- (void)_removeSelection;
- (void)removeIdleEntries;
- (void)keyDown:(id)arg1;
- (void)delete:(id)arg1;
- (void)cut:(id)arg1;
- (void)_downloadURLs:(id)arg1;
- (BOOL)_canPaste;
- (void)paste:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (void)concludeDragOperation:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (id)listView:(id)arg1 menuForView:(id)arg2;
- (void)listView:(id)arg1 didSelect:(BOOL)arg2 view:(id)arg3;
- (BOOL)allowsRowSelectionAtPoint:(struct CGPoint)arg1 inView:(id)arg2;

@end

@interface SecureDownload : WebDownload
{
    SecureDownloadProgressEntry *_entry;
}

- (id)initWithRequest:(id)arg1 delegate:(id)arg2 entry:(id)arg3;
- (id)initWithResumeInformation:(id)arg1 delegate:(id)arg2 path:(id)arg3 entry:(id)arg4;
- (void)connection:(id)arg1 didReceiveData:(id)arg2 lengthReceived:(long long)arg3;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)setEntry:(id)arg1;

@end

@interface LocationFieldEditor : TextFieldEditor
{
    LocationTextField *field;
    NSString *_previousMarkedText;
}

- (id)initWithField:(id)arg1;
- (void)dealloc;
- (unsigned long long)validModesForFontPanel:(id)arg1;
- (void)changeFont:(id)arg1;
- (id)acceptableDragTypes;
- (unsigned long long)draggingEntered:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (void)concludeDragOperation:(id)arg1;
- (void)_notifyFieldIfMarkedTextDidChange;
- (void)didChangeText;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;
- (void)smartInsertForString:(id)arg1 replacingRange:(struct _NSRange)arg2 beforeString:(id *)arg3 afterString:(id *)arg4;

@end

@interface ExtensionContextMenuItemWrapper : NSObject
{
    struct RefPtr<Safari::ExtensionContextMenuItem> _contextMenuItem;
}

- (id)initWithItem:(struct ExtensionContextMenuItem *)arg1;
- (struct ExtensionContextMenuItem *)contextMenuItem;
- (id).cxx_construct;
- (void).cxx_destruct;

@end

@interface ExtensionBuilderControllerWrapper : NSObject <NSWindowDelegate>
{
    struct ExtensionBuilderController *_controller;
}

- (id)initWithController:(struct ExtensionBuilderController *)arg1;
- (void)windowWillClose:(id)arg1;
- (void)choseExtensionBundleFromPanel:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)choseExtensionBuildLocationFromPanel:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)choseNewExtensionLocationFromPanel:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;

@end

@interface Panel : NSPanel
{
}

- (id)delegate;
- (void)setDelegate:(id)arg1;
- (BOOL)performKeyEquivalent:(id)arg1;
- (void)sendEvent:(id)arg1;

@end

@interface ExtensionsControllerDelegate : NSObject
{
}

- (void)installConfirmSheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;

@end

@interface BlackScopeButtonCell : NSButtonCell
{
    BOOL _mouseInside;
    struct CGSize _titleSize;
}

+ (id)highlightedTextColor;
+ (id)normalTextColor;
- (void)setTitle:(id)arg1;
- (BOOL)isSelected;
- (BOOL)_needsRedrawOnMouseInsideChange;
- (BOOL)_shouldShowRollovers;
- (id)_textAttributes;
- (id)_textWithShadowAttributes;
- (id)attributedTitle;
- (BOOL)_getButtonImageParts:(id *)arg1:(id *)arg2:(id *)arg3;
- (double)buttonHeight;
- (struct CGSize)cellSizeForBounds:(struct CGRect)arg1;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface ReaderDynamicScrollBarsView : WebDynamicScrollBarsView
{
    NSImageView *_growBoxImageView;
    BOOL _isShowingGrowBoxNearHorizontalScroller;
}

- (id)initWithFrame:(struct CGRect)arg1;
- (void)setShowingGrowBoxNearHorizontalScroller:(BOOL)arg1;
- (void)tile;
- (struct CGRect)_growBoxFrame;

@end

@interface SAlertDialogSheetRequest : SheetRequest
{
    struct SAlertDialog *_alertDialog;
    void *_callback;
    void *_context;
}

- (id)initWithSAlertDialog:(struct SAlertDialog *)arg1 callback:(void *)arg2 context:(void *)arg3;
- (void)dealloc;
- (void)displaySheet;

@end

@interface ABPerson (BrowserExtras)
- (id)displayName;
@end

@interface WebBookmark (ABHomePagesControllerExtras)
- (int)compareTitles:(id)arg1;
@end

@interface AcceptedDatabases (FileInternal)
- (void)_chooseQuotaFromMenuItem:(id)arg1;
- (BOOL)_confirmRemoveForAllItems:(BOOL)arg1;
- (void)_didModifyDatabase:(id)arg1;
- (void)_didModifySecurityOrigin:(id)arg1;
- (id)_outlineView;
- (void)_refreshAllDataNow;
- (void)_refreshAllDataSoon;
- (void)_willPopUpMenuFromCell:(id)arg1;
@end

@interface NSObject (AccessibilityParentHelper)
- (id)accessibilityHitTestUsingChildScreenRects:(struct CGPoint)arg1;
@end

@interface ActivityViewer (FileInternal)
- (void)_activityWindowWillBecomeVisible;
- (void)_activityWindowDidBecomeInvisible;
@end

@interface AddressBookLabelPopUpCell (FileInternal)
- (double)_titleWidthIncludingPadding;
@end

@interface AddressBookPropertyView (FileInternal)
- (id)_enclosingEntryView;
- (void)_menuItemSelected:(id)arg1;
- (void)_updateContents;
@end

@interface AppController (FileInternal)
+ (void)_initializeNSUserDefaults;
+ (void)_initializeURLCache;
+ (void)_initializeSQLiteDatabases;
+ (void)_initializeWebIconDatabase;
+ (void)_registerForCustomURLSchemes;
+ (id)_settingsDirectoryPath;
+ (void)_workAroundHiddenCursorBug;
- (BOOL)_openUntitledFileWhileLaunching:(BOOL)arg1;
- (void)_cancelModalCloseAllConfirmation;
- (id)_closeCurrentTabMenuItem;
- (id)_closeInactiveTabsMenuItem;
- (id)_closeMenuItem;
- (id)_closeAllMenuItem;
- (void)_computeLastSessionStateIfNecessary;
- (BOOL)_confirmStealthMode;
- (void)_parentalControlsDidChange;
- (void)_defaultsDidChange;
- (id)_editMenu;
- (void)_enableStealthMode;
- (id)_fileMenu;
- (void)_handleURLEvent:(id)arg1 withReplyEvent:(id)arg2;
- (void)_hideBookmarksMenu;
- (void)_insertReaderMenuItem;
- (void)_updateExtensionBarMenuItems;
- (id)_lastSessionFile;
- (id)_lastSessionState;
- (void)_newWindowFromDock:(id)arg1;
- (BOOL)_OKToCloseBrowserWindowsForExplicitCloseAllCommand:(BOOL)arg1;
- (void)_performDelayedLaunchOperations;
- (void)_savePendingData:(id)arg1;
- (void)_reopenWindows;
- (void)_setKeyEquivalentForMenuItem:(id)arg1 toIncludeShiftKey:(BOOL)arg2;
- (void)_showBookmarksMenu;
- (void)_showHTMLResourceFile:(id)arg1;
- (void)_showResourceFileWithName:(id)arg1 extension:(id)arg2;
- (void)_startBonjourSearchIfNecessary;
- (void)_togglePrivateBrowsingSuppressingConfirmation:(BOOL)arg1;
- (void)_updateCloseKeyEquivalents;
- (BOOL)_updateLastClosedWindowStateForWindow:(id)arg1;
- (void)_updateTextEncodingMenu;
- (BOOL)_userHasEmptyHomePage;
@end

@interface Banner (FileInternal)
- (void)_advanceAnimation;
- (struct CGRect)_computeAnimationEnclosingRect;
- (id)_createBannerView;
- (void)_moveBannerIntoPlace:(BOOL)arg1 withAnimation:(BOOL)arg2;
- (void)_populateBannerViewFromNib:(id)arg1;
- (void)_setViewBelowBanner:(id)arg1;
@end

@interface BannerWithOverlay (FileInternal)
- (void)_animateFadeIn:(id)arg1;
- (void)_detachAnimation;
- (id)_fadingOverlayTargetView;
@end

@interface NSNetService (BonjourControllerExtras)
- (long long)_compareNameAndDomain:(id)arg1;
@end

@interface BonjourController (FileInternal)
- (BOOL)_addServicesFromCategory:(id)arg1 toMenu:(id)arg2;
- (void)_goToContentItem:(id)arg1 windowPolicy:(int)arg2 tabLocation:(id)arg3;
- (id)_goToURL:(id)arg1 windowPolicy:(int)arg2 tabLocation:(id)arg3;
- (BOOL)_multipleNonEmptyCategories;
- (id)_nameToDisplayForService:(id)arg1;
- (void)_reportErrorForServiceName:(id)arg1;
- (void)_serviceMenuItemSelected:(id)arg1;
- (void)_setServiceToVisit:(id)arg1 windowPolicy:(int)arg2 tabLocation:(id)arg3;
- (void)_setTabLocationForServiceToVisit:(id)arg1;
- (id)_titleForCategory:(id)arg1;
- (void)_updateInterface;
- (void)_setInitiallyCollapsed:(BOOL)arg1 forCategory:(id)arg2;
- (id)_keyForCollapsedPreferenceForCategory:(id)arg1;
@end

@interface BonjourServiceCollector (FileInternal)
- (void)_addServiceToServiceNamesDictionary:(id)arg1;
- (void)_populateServiceNamesDictionaryIfNeeded;
- (void)_removeServiceFromServiceNamesDictionary:(id)arg1;
@end

@interface BookmarkChooser (FileInternal)
- (void)_cancel:(id)arg1;
- (BOOL)_canChooseBookmark:(id)arg1;
- (id)_collectionAtRow:(long long)arg1;
- (void)_confirm:(id)arg1;
- (void)_refreshAllFromNotification;
- (void)_refreshContentsFromCollectionChange;
- (id)_selectedCollection;
- (void)_sheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)_startObservingBookmarkAndIconChanges;
- (void)_stopObservingBookmarkAndIconChanges;
- (void)_updateConfirmButton;
- (void)_updatePrompt;
- (BOOL)_visibleSheetIsBlockingPropertyChanges;
@end

@interface NSView (BookmarkExtras)
- (void)startDragFromEvent:(id)arg1 withBookmark:(id)arg2 andImage:(id)arg3;
@end

@interface BookmarksSearchBar (FileInternal)
- (BOOL)_isBlackToMatchCoverflow;
- (struct CGRect)_resizerRect;
- (void)_resizeSearchCollectionScopeButtonToFit;
- (void)_searchCriteriaChanged;
- (int)_searchScopeFromDefaults;
- (void)_updateLayout;
- (void)_updateSingleCollectionScopeButtonTitle;
- (void)_updateScopeButtonsState;
- (void)_updateScopeButtonsVisibility;
- (void)_updateStatusField;
- (void)_updateStatusFieldVisibility;
@end

@interface BookmarksSearcher (FileInternal)
- (void)_collectSearchResultsMatchingStrings:(id)arg1 orWithAddressInSet:(id)arg2 inCollection:(id)arg3;
- (void)_resetResults;
- (id)_searchWordsFromString:(id)arg1;
@end

@interface NSArray (BookmarksViewExtras)
- (BOOL)containsAnyAncestorOfBookmark:(id)arg1;
- (BOOL)containsBookmarkOrAnyAncestor:(id)arg1;
- (id)arrayByRemovingRedundantDescendantBookmarks;
- (BOOL)containsOnlyBookmarkFolders;
@end

@interface BookmarksViewController (Internal)
+ (id)autoTabColumnTitle;
+ (id)parentColumnTitle;
+ (void)setDraggedBookmarks:(id)arg1;
- (void)installBookmarksSearchBar;
- (void)installFlowListSplitView;
- (void)startObservingWhileOnScreen;
- (void)stopObservingWhileOffScreen;
- (void)allIconsRemoved:(id)arg1;
- (void)bookmarkSourceContentsChanged:(id)arg1;
- (void)bookmarksChanged:(const struct SNotification *)arg1;
- (void)bookmarksReloaded:(const struct SNotification *)arg1;
- (void)iconChanged:(id)arg1;
- (void)preferenceValueChanged:(id)arg1;
- (void)redrawCollection:(id)arg1;
- (void)reloadAllDisplayedBookmarks;
- (void)reloadFlowView;
- (void)updateFlowViewSelection;
- (void)updateNewContentsFolderControl;
- (void)updateSelectedCollection;
- (void)updateUIForChangeToBookmark:(id)arg1 typeOfChange:(int)arg2;
- (BOOL)canAddToDisplayedContents;
- (BOOL)canCopy;
- (BOOL)canCopyFromSelectedCollection;
- (BOOL)canCopyContentItemAtRow:(int)arg1;
- (BOOL)canCut;
- (BOOL)canDelete;
- (BOOL)canDeleteSelectedContentItems;
- (BOOL)canDeleteContentItemAtRow:(int)arg1;
- (BOOL)canEditAddressOfContentItemAtRow:(int)arg1;
- (BOOL)canEditSelectedBookmarkAddress;
- (BOOL)canEditSelectedBookmarkTitle;
- (BOOL)canEditTitleOfCollection:(id)arg1;
- (BOOL)canEditTitleOfContentItemAtRow:(int)arg1;
- (BOOL)canGoToContentItem:(id)arg1;
- (BOOL)canPaste;
- (id)addTemporaryColumnWithID:(id)arg1 title:(id)arg2;
- (void)adjustWidthOfOutlineViewColumnWithID:(id)arg1 forToggledTableColumn:(id)arg2;
- (id)createAndAddParentColumn;
- (id)createAndAddAutoTabColumn;
- (BOOL)shouldShowAddressColumnForCollection:(id)arg1;
- (BOOL)shouldShowAutoTabColumnForCollection:(id)arg1;
- (void)updateAddressColumnVisibility;
- (void)updateAutoTabColumnVisibility;
- (void)updateCollectionSpecificColumns;
- (void)updateParentColumnVisibility;
- (id)collectionAtRow:(int)arg1;
- (BOOL)isCollectionSectionTitleAtRowIndex:(int)arg1;
- (BOOL)collectionsTableViewIsFirstResponder;
- (int)collectionIndexFromRowIndex:(int)arg1;
- (BOOL)flowViewIsShowing;
- (int)indexInParentForPastingIntoCollections;
- (int)bestIndexInAllCollectionsForCollectionAtRow:(int)arg1;
- (BOOL)isShowingFilteredBookmarks;
- (BOOL)isShowingFilteredSource;
- (long long)rowForCollection:(id)arg1;
- (int)rowIndexForBuiltInCollectionsSectionTitle;
- (int)rowIndexForUserCollectionsSectionTitle;
- (id)selectedCollection;
- (id)selectedContentItems;
- (void)editSelectedColumnWithID:(id)arg1;
- (void)endEditing;
- (void)expandAncestorsOfBookmark:(id)arg1;
- (void)expandInitialContentsOfSelectedCollection;
- (void)expandContentsOfSelectedCollection;
- (void)focusOnNewlyCreatedCollection:(id)arg1;
- (void)focusOnNewlyCreatedContentItem:(id)arg1;
- (void)moveFirstResponderFromFlowViewToOutlineView;
- (void)redrawForIconChanges;
- (void)redrawContents;
- (void)refreshContentsAndDeselectAll:(BOOL)arg1;
- (void)refreshContentsForSelectedProxy;
- (void)rememberCurrentListHeightInSplitView;
- (double)rememberCurrentSidebarWidth;
- (void)_resizeFlowViewFromDoubleClick;
- (BOOL)revealBookmarkInCurrentCollection:(id)arg1 expand:(BOOL)arg2;
- (BOOL)selectCollection:(id)arg1;
- (void)setSelectionToBookmarks:(id)arg1;
- (void)_startResizingFlowViewFromMouseDown:(id)arg1;
- (id)bookmarkFromContentItem:(id)arg1;
- (id)bookmarksFromContentItems:(id)arg1;
- (id)collectionForDisplayedContentItem:(id)arg1;
- (BOOL)contentItemCanHaveChildren:(id)arg1;
- (BOOL)contentItemShouldShowAutoTabCheckbox:(id)arg1 inCollection:(id)arg2;
- (int)numberOfChildrenOfContentItem:(id)arg1;
- (BOOL)shouldEditTableColumn:(id)arg1 forContentItem:(id)arg2;
- (void)activateItem:(id)arg1;
- (void)activateSelectedItems;
- (void)doubleClick:(id)arg1;
- (void)goToChildrenOfContentItemInTabs:(id)arg1;
- (void)goToChildrenOfSelectedCollectionInTabs;
- (void)goToChildrenOfSelectedContentItemInTabs;
- (void)goToContentItem:(id)arg1;
- (void)goToContentItemInNewTab:(id)arg1 tabLocation:(id)arg2;
- (void)goToContentItemInNewWindow:(id)arg1;
- (void)goToSelectedContentItem;
- (void)goToSelectedContentItemInNewTab;
- (void)goToSelectedContentItemsInNewTabsOrWindows;
- (void)goToSelectedContentItemInNewWindow;
- (id)badgeImageFromItemCount:(int)arg1;
- (void)cleanUpAfterDraggingBookmarksWithOperation:(unsigned long long)arg1;
- (id)dragImageWithoutBadge;
- (id)dragImageForRowCount:(int)arg1 dragImageOffset:(struct CGPoint *)arg2;
- (id)namesOfPromisedFilesDroppedAtDestination:(id)arg1;
- (void)prepareForDraggingBookmarks:(id)arg1 fromView:(id)arg2;
- (unsigned long long)_writeContentItems:(id)arg1 fromView:(id)arg2 toPasteboard:(id)arg3;
- (void)changeAddressForBookmark:(id)arg1 to:(id)arg2;
- (void)changeAutoTabForBookmark:(id)arg1 to:(BOOL)arg2;
- (void)changeTitleForBookmark:(id)arg1 to:(id)arg2;
- (void)undoAddressChange:(id)arg1;
- (void)undoTitleChange:(id)arg1;
- (id)collectBookmarksToMoveToNewFolder;
- (void)deleteSelectedContentItems;
- (void)deleteSelectedContentItemsGuts;
- (void)moveBookmarks:(id)arg1 toNewFolder:(id)arg2;
- (id)newCollection;
- (id)newContentsFolderWithTitle:(id)arg1 positionIgnoresSelection:(BOOL)arg2;
- (void)redoNewBookmark:(id)arg1;
- (void)redoPasteBookmarks:(id)arg1;
- (void)redoRemoveBookmarks:(id)arg1;
- (void)removeBookmarksWithUndoInfo:(id)arg1 undoSelector:(SEL)arg2;
- (void)removeSelectedCollection;
- (void)replaceBookmarks:(id)arg1 undoSelector:(SEL)arg2 reverseOrder:(BOOL)arg3;
- (void)undoNewBookmark:(id)arg1;
- (void)undoPasteBookmarks:(id)arg1;
- (void)undoRemoveBookmarks:(id)arg1;
- (void)cancelPendingFilterSearch;
- (void)collectFilterSearchResults;
- (BOOL)isShowingFilterSearchResults;
- (void)performFilterSearch;
- (void)performFilterSearchGuts;
- (void)performFilterSearchSoon;
- (void)revealSelectedFilteredItem;
- (void)setUpAddFolderControls;
- (void)updateUIAfterFilterSearchChanged;
- (void)bookmarkUnreadRSSCountChanged:(const struct SNotification *)arg1;
- (id)RSSLabelImage;
- (BOOL)setUpUnreadRSSCounts;
- (BOOL)handleKeyDown:(id)arg1 inCollectionsColumn:(BOOL)arg2;
- (BOOL)optionKeyDown;
- (id)tabLocation;
@end

@interface BookmarkURLConfirmer (FileInternal)
+ (BOOL)_bookmarkRequiresConfirmation:(id)arg1 inWindow:(id)arg2;
+ (void)_performCallbackWithDelegate:(id)arg1 didEndSelector:(SEL)arg2 bookmark:(id)arg3 result:(BOOL)arg4 contextInfo:(void *)arg5;
- (void)_beginConfirmationModalForWindow:(id)arg1;
- (id)_initWithBookmark:(id)arg1 modalDelegate:(id)arg2 didEndSelector:(SEL)arg3 contextInfo:(void *)arg4;
- (void)_performCallbackWithResult:(BOOL)arg1;
- (void)_URLConfirmationAlertDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
@end

@interface ABAddressBook (BrowserExtras)
- (BOOL)openAddressBookWithURLString:(id)arg1;
- (BOOL)openAddressBook;
- (BOOL)openAddressBookToPerson:(id)arg1 andEdit:(BOOL)arg2;
- (BOOL)editMeCard;
@end

@interface NSWindow (BrowserApplicationExtras)
- (id)isVisibleWithObjectReturnValue;
- (id)closeWithObjectReturnValue;
@end

@interface BrowserCoachMark (FileInternal)
- (void)_animateFadeOut;
- (void)_animatePulse;
- (void)_startPulse;
- (void)_startFadeOut:(id)arg1;
@end

@interface BrowserDocumentController (FileInternal)
- (BOOL)_browserDocumentIsAvailable:(id)arg1 usingWindowPolicy:(int)arg2;
- (BOOL)_canShowInputFields;
- (BOOL)_canShowTopSitesWall;
- (id)_createEmptyBrowserDocumentAndDisplay:(BOOL)arg1;
- (id)_findAutoSelectableTabWithURL:(id)arg1 usingWindowPolicy:(int)arg2 tabLocation:(id)arg3;
- (id)_frontmostBrowserDocumentIfAvailableUsingWindowPolicy:(int)arg1;
- (id)_goToEachRequest:(id)arg1 tabLabels:(id)arg2 windowPolicy:(int)arg3 tabLocation:(id)arg4 frameName:(id)arg5;
- (id)_openDocumentWithContentsOfRequest:(id)arg1 behind:(BOOL)arg2 display:(BOOL)arg3;
- (id)_openDocumentWithContentsOfRequest:(id)arg1 behind:(BOOL)arg2 display:(BOOL)arg3 frameName:(id)arg4;
- (void)_reuseWebView:(id)arg1 forRequest:(id)arg2;
- (BOOL)_tab:(id)arg1 isAutoSelectableWithURL:(id)arg2;
- (id)_URLFromShortcutFile:(id)arg1;
- (id)_URLToVisitFromURL:(id)arg1;
@end

@interface DOMElement (BrowserExtras)
- (BOOL)inDocument;
- (BOOL)isHidden;
@end

@interface DOMNode (BrowserExtras)
- (id)documentView;
- (id)mainDocumentView;
- (void)detachAndReattach;
@end

@interface NSAppleEventDescriptor (BrowserNSAppleEventDescriptorExtras)
+ (id)descriptorWithProcessSerialNumber:(struct ProcessSerialNumber)arg1;
- (BOOL)sendWithTenSecondTimeout;
- (BOOL)sendWithTimeout:(int)arg1;
- (BOOL)sendWithoutWaitingForReply;
@end

@interface NSMutableArray (BrowserNSArrayExtras)
- (BOOL)removeUselessMenuItemSeparators;
- (id)_safari_recursivelyMakeObjectsPerformSelector:(SEL)arg1 withObject:(id)arg2;
@end

@interface NSString (BrowserNSBundleExtras)
+ (id)_safari_userVisibleSafariBundleVersionFromFullVersion:(id)arg1;
@end

@interface NSDictionary (NSBundleExtras)
- (id)shortVersionFromInfoDictionary;
@end

@interface NSBundle (BrowserExtras)
- (id)shortVersion;
- (id)localizedShortVersion;
- (BOOL)isSystemFramework;
@end

@interface NSButtonCell (BrowserControlExtras)
- (void)updateNonAppearancePropertiesToMatchButtonCell:(id)arg1;
- (void)updateToMatchButtonCell:(id)arg1;
- (id)initWithButtonCell:(id)arg1 andType:(unsigned long long)arg2;
@end

@interface NSColor (BrowserExtras)
+ (id)_safari_etchedBoldTextColor;
+ (id)_safari_backgroundTabBoldTextColor;
+ (id)_safari_etchedNonBoldTextColor;
+ (id)_safari_etchedTextHighlightColor;
+ (id)_safari_enabledMenuItemTextColor;
+ (id)_safari_disabledMenuItemTextColor;
+ (void)configureColorMenu:(id)arg1;
+ (id)createSwatchForColor:(id)arg1;
+ (id)colorWithCGColorRef:(struct CGColor *)arg1;
+ (id)colorWithIntValue:(int)arg1;
- (int)intValue;
@end

@interface NSData (BrowserExtras)
- (int)indexOfCharacterInCString:(const char *)arg1;
- (int)indexOfCharacterInCString:(const char *)arg1 startOffset:(int)arg2;
- (int)indexOfCString:(const char *)arg1;
- (int)indexOfCString:(const char *)arg1 startOffset:(int)arg2;
- (int)indexOfByteString:(const char *)arg1 length:(int)arg2;
- (int)indexOfByteString:(const char *)arg1 length:(int)arg2 startOffset:(int)arg3;
- (id)certificateFromMultipartData;
@end

@interface NSMutableData (BrowserExtras)
- (void)appendFormat:(id)arg1;
- (void)appendEncodedString:(unsigned long long)arg1 format:(id)arg2;
@end

@interface NSDictionary (BrowserAdditions)
- (id)_safari_stringForKey:(id)arg1;
- (id)_safari_numberForKey:(id)arg1;
- (id)_safari_dataForKey:(id)arg1;
- (void)_safari_setObject:(id)arg1 forUncopiedKey:(id)arg2;
@end

@interface NSError (BrowserAdditions)
+ (id)browserErrorWithCode:(int)arg1;
+ (id)cancelledErrorWithURL:(id)arg1;
- (id)errorSummary;
- (BOOL)errorIsInDomain:(id)arg1;
- (BOOL)isCancelledError;
- (BOOL)isPolicyChangeError;
- (id)failingURL;
@end

@interface NSEvent (BrowserExtras)
+ (id)eventWithCGEvent:(struct __CGEvent *)arg1 location:(struct CGPoint)arg2;
+ (BOOL)mouseButtonIsDown;
- (id)eventByChangingKeyEventToCharacters:(id)arg1;
- (id)eventByChangingMouseLocation:(struct CGPoint)arg1;
- (unsigned short)firstCharacter;
- (unsigned short)firstCharacterIgnoringModifiers;
- (BOOL)isDictionaryHotKeyEvent;
- (BOOL)isCommandBacktickKeyDown;
- (BOOL)isCommandHomeKeyDown;
- (BOOL)isCommandPeriodKeyDown;
- (BOOL)isCommandLeftArrowKeyDown;
- (BOOL)isCommandRightArrowKeyDown;
- (unsigned short)characterCodeWithCarbonModifiers:(unsigned int)arg1;
- (BOOL)isCommandUnderscoreAboveMinusKeyDown;
- (BOOL)isContextMenuEvent;
- (BOOL)isMiddleButtonEvent;
@end

@interface NSFileManager (BrowserNSFileManagerExtras)
- (BOOL)moveDownloadedPath:(id)arg1 toPath:(id)arg2;
- (id)pathForSingleItemAtPath:(id)arg1;
- (BOOL)unmountDevNodeAtPath:(id)arg1;
- (BOOL)unmountVolumeAtPath:(id)arg1;
@end

@interface NSMenu (BrowserDatabaseQuotaAdditions)
- (id)addItemRepresentingQuota:(unsigned long long)arg1 withAction:(SEL)arg2;
@end

@interface NSMenu (BrowserMenuAdditions)
- (id)initWithDictionaryRepresentation:(id)arg1;
- (void)popUpInRect:(struct CGRect)arg1 ofView:(id)arg2 didInsertInitialSeparator:(char *)arg3;
- (id)addAlwaysDisabledItemWithTitle:(id)arg1;
- (id)addItemWithTitle:(id)arg1 action:(SEL)arg2 target:(id)arg3 tag:(int)arg4;
- (id)addItemWithTitle:(id)arg1 action:(SEL)arg2 target:(id)arg3;
- (id)addItemWithTitle:(id)arg1 action:(SEL)arg2 tag:(int)arg3;
- (void)removeAllItems;
- (void)removeItemsAfterIndex:(int)arg1;
- (id)itemWithTarget:(id)arg1 andAction:(SEL)arg2;
- (void)removeUselessMenuItemSeparators;
- (void)transferAllItemsFromMenu:(id)arg1;
- (void)cancelTrackingImmediately:(BOOL)arg1;
@end

@interface NSMenuItem (BrowserExtras)
+ (id)menuItemForFileAtPath:(id)arg1;
- (id)initWithDictionaryRepresentation:(id)arg1;
- (void)resetKeyEquivalent;
- (void)hideKeyEquivalent;
- (void)showKeyEquivalent;
@end

@interface NSNetService (BrowserNSNetServiceExtras)
- (id)portString;
- (id)URL;
- (id)path;
@end

@interface NSOutlineView (BrowserNSOutlineViewExtras)
- (double)columnWidthForCellWidth:(double)arg1 atRow:(long long)arg2;
- (long long)findParentRowOfRow:(long long)arg1;
- (void)expandItems:(id)arg1;
- (id)expandedItems;
- (long long)lastRowForAnyItemInHierarchicalSelection;
@end

@interface NSPasteboard (BrowserExtras)
- (void)writeURLs:(id)arg1 andTitles:(id)arg2;
- (id)URLs;
- (id)URLsFromString;
- (BOOL)containsAnyURLs;
- (BOOL)containsAnyURLsViableForTopSites;
@end

@interface NSScreen (BrowserNSScreenExtras)
+ (id)screenForMouseLocation;
+ (id)shortestScreen;
+ (struct CGPoint)coreGraphicsScreenPointForAppKitScreenPoint:(struct CGPoint)arg1;
+ (id)safari_menuBarScreen;
@end

@interface NSScriptCommand (NSScriptCommandAdditions)
- (id)_safari_subjectParameter;
- (id)_safari_subjectSpecifier;
@end

@interface NSScrollView (BrowserNSScrollViewExtras)
- (struct CGSize)frameSizeForContentSize:(struct CGSize)arg1;
- (void)scrollVerticallyIfNotAtBottomBy:(float)arg1;
@end

@interface NSSegmentedControl (BrowserNSSegmentedControlExtras)
+ (id)segmentedControlFromMiniButton:(id)arg1 withImageNamed:(id)arg2;
@end

@interface NSSplitView (BrowserExtras)
- (BOOL)safari_isSubviewCollapsed:(id)arg1;
- (void)tileHorizontallyWithWidthRatio:(float)arg1 minimumLeftItemWidth:(float)arg2 minimumRightItemWidth:(float)arg3;
- (void)tileHorizontallyWithWidth:(double)arg1 forSubview:(id)arg2;
- (void)tileVerticallyWithHeight:(float)arg1 forSubview:(id)arg2;
- (float)widthRatio;
@end

@interface NSString (BrowserNumberFormattingAdditions)
+ (id)stringRepresentationForBytes:(long long)arg1 requireDecimal:(BOOL)arg2;
+ (id)stringRepresentationForBytes:(long long)arg1;
+ (id)stringRepresentationForBytes:(long long)arg1 ofTotal:(long long)arg2 requireDecimal:(BOOL)arg3;
+ (id)stringRepresentationForBytes:(long long)arg1 ofTotal:(long long)arg2;
@end

@interface NSString (BrowserAdditions)
+ (id)identityPreferenceDomainForURLString:(id)arg1;
+ (id)stringByBase64EncodingBytes:(const char *)arg1 length:(int)arg2;
+ (id)stringByBase64EncodingBytes:(const char *)arg1 length:(int)arg2 breakLines:(BOOL)arg3;
- (id)stringByTrimmingWhitespace;
- (id)possibleURLsForUserTypedString;
- (id)bestURLForUserTypedString;
- (id)bestURLStringForUserTypedString;
- (long long)compareDomain:(id)arg1;
- (long long)compareVersionString:(id)arg1;
- (void)drawAsFallbackTextInRect:(struct CGRect)arg1;
- (void)drawDoubledInRect:(struct CGRect)arg1 withTopColor:(id)arg2 bottomColor:(id)arg3 font:(id)arg4 centered:(BOOL)arg5 flipped:(BOOL)arg6 topColorInFront:(BOOL)arg7;
- (id)stringByDeletingStartingSlash;
- (id)stringByDeletingTrailingSlash;
- (id)stringByDeletingCharactersInSet:(id)arg1;
- (id)stringByReplacingLineEndingsWithString:(id)arg1;
- (id)stringByReplacingLineEndingsWithSpaces;
- (id)stringByStrippingLineEndings;
- (id)stringBySubstitutingHTMLEntitiesForAmpersandAndAngleBrackets;
- (id)stringBySubstitutingHTMLEntitiesForAmpersandAndQuote;
- (id)encodeStringBase64;
- (int)countOfString:(id)arg1;
- (id)domainFromHost;
- (id)fixedStringByExpandingTildeInPath;
- (BOOL)isFileURLString;
- (BOOL)isSearchProviderHomePageURLString;
- (BOOL)isSyndicationScheme;
- (BOOL)isSyndicationURLString;
- (BOOL)isStandardSyndicationURLString;
- (id)dispositionTypeFromContentDispositionHeader;
@end

@interface NSTableView (BrowserNSTableViewExtras)
- (id)columnMeasurementsForType:(int)arg1;
- (void)setColumnMeasurements:(id)arg1 forType:(int)arg2;
- (id)columnWidths;
- (id)columnMinWidths;
- (id)columnMaxWidths;
- (void)setColumnMinWidths:(id)arg1;
- (void)setColumnMaxWidths:(id)arg1;
- (float)heightRequiredToShowAllContent;
- (double)columnWidthForCellWidth:(double)arg1 atRow:(long long)arg2;
- (float)widthRequiredToShowAllContentForColumn:(id)arg1;
- (float)constrainProposedWidth:(float)arg1 forColumn:(id)arg2;
- (BOOL)resizesColumnsProportionally;
- (void)columnsChanged;
- (id)columnWidthsMaintainingProportions;
- (float)bestWidthNonProportional;
- (float)bestWidthProportional;
- (float)bestWidth;
- (struct CGSize)bestSize;
- (void)collapseSelectionToSingleRow;
- (void)selectPreviousRow;
- (void)scrollToBeginning;
- (void)scrollToEnd;
- (void)scrollPageUp;
- (void)scrollPageDown;
- (BOOL)handleScrollKeyEvent:(id)arg1;
@end

@interface NSTextFieldCell (BrowserNSTextFieldCellExtras)
- (id)initWithCell:(id)arg1;
@end

@interface NSTextField (BrowserNSTextFieldExtras)
- (id)safeCurrentEditor;
- (id)safeStringValue;
- (void)safeSetStringValue:(id)arg1;
- (BOOL)hasNonWhitespaceCharacters;
- (BOOL)isFirstResponder;
- (BOOL)convertCommandReturnOrEnterToNewline:(id)arg1;
@end

@interface NSTextView (BrowserNSTextViewExtras)
- (BOOL)canTakeFindStringFromSelection;
- (void)takeFindStringFromSelection:(id)arg1;
- (BOOL)validate_takeFindStringFromSelection:(id)arg1;
@end

@interface NSToolbar (BrowserNSToolbarExtras)
- (void)autoSaveConfigurationNow;
- (void)setKeyboardLoopNeedsUpdating:(BOOL)arg1;
- (unsigned long long)indexOfFirstItemWithIdentifier:(id)arg1;
- (id)toolbarClipView;
@end

@interface NSURL (BrowserAdditions)
+ (id)bookmarksURL;
+ (id)topSitesURL;
- (BOOL)isBookmarksURL;
- (BOOL)isTopSitesURL;
- (BOOL)isDataURL;
- (BOOL)isSyndicationURL;
- (BOOL)isAggregateSyndicationURL;
- (BOOL)isSecureURL;
- (BOOL)isSecureDownloadURL;
- (BOOL)isDashboardURL;
- (id)URLByRemovingUserAndPath;
- (id)userVisibleHost;
- (id)childAccessDomain;
@end

@interface NSView (BrowserNSViewExtras)
- (void)retileAllScrollViews;
- (void)drawForDraggingImageInRect:(struct CGRect)arg1;
- (id)draggingImage;
- (void)startDragFromEvent:(id)arg1 withPasteBoard:(id)arg2 andImage:(id)arg3;
- (struct CGSize)currentEventOffsetFromEvent:(id)arg1;
- (id)firstKeyViewInChain;
- (id)lastKeyViewInChain;
- (void)setParentalControlledToolTip;
- (struct CGRect)_safari_convertRect:(struct CGRect)arg1 toView:(id)arg2;
- (BOOL)_safari_isDirtyInRect:(struct CGRect)arg1 outsideOfRect:(struct CGRect)arg2;
- (BOOL)_safari_autoscroll:(id)arg1;
- (struct CGSize)roundSizeInWindowCoordinates:(struct CGSize)arg1;
@end

@interface NSWindow (BrowserNSWindowExtras)
+ (BOOL)_safari_shouldMiniaturizeOnDoubleClick;
- (struct CGSize)constrainProposedFrameSize:(struct CGSize)arg1;
- (struct CGRect)standardFrameForProposedSize:(struct CGSize)arg1;
- (id)scaledBackground;
- (id)texturePattern;
- (BOOL)firstResponderIsDescendantOf:(id)arg1;
- (id)imageForRect:(struct CGRect)arg1;
- (struct CGImage *)createCGImageForRect:(struct CGRect)arg1 excludingChildWindows:(id)arg2;
- (BOOL)makeNonDeferred;
- (void)setBottomBorderThickness:(float)arg1 showingSeparator:(BOOL)arg2;
- (void)_safari_setCollectionBehavior:(unsigned long long)arg1;
- (BOOL)_safari_hasActiveAppearanceIgnoringKeyFocus;
- (id)safari_contentSeparatorColor;
- (id)safari_contentInsetColor;
- (id)safari_toolbarBottomEdgeUpperColor;
- (id)safari_toolbarBottomEdgeLowerColor;
- (id)safari_windowForSheet;
- (BOOL)safari_isKeyOrMainWindow;
@end

@interface NSWorkspace (BrowserNSWorkspaceExtras)
+ (id)safari_userDesktopDirectory;
- (BOOL)removeFileFromQuarantineAtPath:(id)arg1;
- (BOOL)openURL:(id)arg1 withApplicationAtPath:(id)arg2;
- (BOOL)openWebClipWidgetWithURL:(id)arg1 positionWidgetAtPoint:(struct CGPoint)arg2;
- (BOOL)openDashboardURL:(id)arg1;
- (BOOL)openURL:(id)arg1 withApplicationWithBundleIdentifier:(id)arg2;
- (id)infoForLaunchedApplicationWithBundleID:(id)arg1 preferringPath:(id)arg2;
- (id)pathForApplicationWithBundleIdentifier:(id)arg1;
- (id)pathForApplicationForURLScheme:(id)arg1;
- (id)pathForApplicationOfFileAtPath:(id)arg1;
- (id)pathForApplicationForMIMEType:(id)arg1;
- (BOOL)launchApplicationAtPath:(id)arg1 processSerialNumber:(struct ProcessSerialNumber *)arg2 alreadyOpen:(char *)arg3 event:(id)arg4;
- (id)infoForLaunchedApplicationAtPath:(id)arg1;
- (BOOL)isLaunchedApplicationAtPath:(id)arg1;
- (BOOL)processSerialNumber:(struct ProcessSerialNumber *)arg1 forApplicationAtPath:(id)arg2;
- (BOOL)moveFileToTrash:(id)arg1;
- (id)_internetLocationFileExtensions;
- (id)_internetLocationFileExtensionsArray;
- (BOOL)isInternetLocationFileAtPath:(id)arg1;
- (id)internetLocationFileExtensionForURL:(id)arg1;
- (BOOL)URL:(id *)arg1 title:(id *)arg2 forInternetLocationFileAtPath:(id)arg3;
- (id)URLForInternetLocationFileAtPath:(id)arg1;
- (id)createInternetLocationFileInDirectory:(id)arg1 withURL:(id)arg2 title:(id)arg3;
- (void)sendDistributedNotificationForFinishedDownloadAtPath:(id)arg1;
- (void)sendDistributedNotificationForChangeToDownloadFileAtPath:(id)arg1;
- (id)downloadAssessmentForPath:(id)arg1;
- (BOOL)isFilePackageOrAliasToFilePackageAtPath:(id)arg1;
@end

@interface BrowserParentalControls (BrowserParentalControlsInternal)
- (BOOL)_parentalControlsEnabled;
- (void)_updateParentalControlsEnabled;
- (void *)_familyControlsFramework;
- (BOOL)_isManagedUser;
- (BOOL)_userHasWebSiteRestrictions;
- (void)_mcxPreferencesChanged:(id)arg1;
- (id)init;
- (void)dealloc;
@end

@interface BrowserTabViewItem (Internal)
- (id)_computeTabLabel;
@end

@interface WebBookmark (UserInterfaceOperations)
- (void)deleteWithUndo;
- (void)deleteWithUndoWithoutAuthorization;
- (void)goToWithWindowPolicy:(int)arg1 tabLocation:(id)arg2;
- (void)goToInNewWindow;
- (void)goToInNewTabWithTabLocation:(id)arg1;
- (void)goToUsingWindowPolicyFromCurrentEventWithTabLocation:(id)arg1;
- (void)goToFromMenuItem:(id)arg1;
- (void)goToAllInTabsFromMenuItem:(id)arg1;
- (void)_addFlattenedDescendantsToArray:(id)arg1;
- (id)_flattenedDescendants;
- (id)URLsForGoToAllWithTitles:(id *)arg1 combineNewsFeeds:(BOOL)arg2;
- (void)_openInTabsConfirmationDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(id)arg3;
- (void)goToAllInTabsCombiningNewsFeeds:(BOOL)arg1 withTabLocation:(id)arg2 confirmQuantity:(BOOL)arg3;
- (void)goToAllInTabsWithTabLocation:(id)arg1;
- (void)goToAllInTabsCombiningNewsFeedsWithTabLocation:(id)arg1 confirmQuantity:(BOOL)arg2;
- (id)browserWindowController;
- (void)editAddressWithTabLocation:(id)arg1;
- (void)editTitleWithTabLocation:(id)arg1;
- (void)editContentsWithTabLocation:(id)arg1;
- (void)revealFavoriteWithTabLocation:(id)arg1;
@end

@interface WebBookmark (BrowserAdditions)
+ (id)defaultTitleFromURL:(id)arg1;
+ (id)bookmarkWithURL:(id)arg1 title:(id)arg2;
+ (id)bookmarkPasteboardTypes;
+ (id)_bookmarkForFileOrFolderAtPath:(id)arg1 directoryDepth:(unsigned int)arg2;
+ (BOOL)isAcceptableBookmarkObjectPath:(id)arg1;
+ (id)bookmarkForFileOrFolderAtPath:(id)arg1;
+ (void)writeBookmarks:(id)arg1 toPasteboard:(id)arg2 withOwner:(id)arg3;
+ (BOOL)anyBookmarksOnPasteboard:(id)arg1;
+ (int)numberOfBookmarksOnPasteboard:(id)arg1;
+ (int)numberOfFoldersOnPasteboard:(id)arg1;
+ (id)_bookmarksFromPasteboard:(id)arg1 topLevelOnly:(BOOL)arg2;
+ (id)bookmarksFromPasteboard:(id)arg1;
+ (id)topLevelBookmarksFromPasteboard:(id)arg1;
- (BOOL)isOrHasAnyLeaves;
- (BOOL)isAncestorOf:(id)arg1;
- (id)titleWithUnreadRSSCount;
- (id)createInternetLocationFileHierarchyInDirectory:(id)arg1;
- (void)_viewAllRSSArticles:(id)arg1;
- (BOOL)addViewArticlesItemToMenu:(id)arg1 withPrecedingSeparator:(BOOL)arg2 tabLocation:(id)arg3;
- (void)insertChildren:(id)arg1 atIndex:(int)arg2;
- (void)insertChild:(id)arg1 atIndex:(unsigned int)arg2 preserveUUID:(BOOL)arg3;
- (void)addChildAccessDomainToSet:(id)arg1;
@end

@interface WebFrame (BrowserAdditions)
- (BOOL)isMainFrame;
- (id)_topFrame;
- (void)_collectFormFieldElementsIntoArray:(id)arg1 upToLimit:(unsigned int)arg2 onlyIncludeFocusedElements:(BOOL)arg3;
- (id)allFormFields;
- (BOOL)containsAnyFormFields;
- (BOOL)containsAnyFocusedFormFields;
- (BOOL)isOrphaned;
- (void)reloadIfParentallyRestricted;
- (id)largestFrame;
@end

@interface WebSecurityOrigin (SafariExtras)
- (id)safari_userVisibleName;
- (long long)safari_compareByUserVisibleName:(id)arg1;
@end

@interface WebStringTruncator (BrowserExtras)
+ (id)centerTruncateStringForMenu:(id)arg1;
+ (id)rightTruncateStringForMenu:(id)arg1;
@end

@interface BrowserWebView (FileInternal)
+ (void)_addWebViewToClose:(id)arg1;
+ (void)_closeNextWebViewBatch;
+ (void)_decrementLoadingCount;
+ (void)_dequeueRequest;
- (void)_addFavoriteForParentControlledPageInFrame:(id)arg1;
- (void)_cancelDetectStallsTimer;
- (void)_cancelStallTimer;
- (BOOL)_canParentalControlledChildNavigateToURL:(id)arg1 withAction:(id)arg2;
- (void)_cleanUpAfterTopSitesZoomToPageFadeOutAnimation;
- (void)_closeDataSources:(id)arg1;
- (int)_computePageTypeFromURL:(id)arg1;
- (BOOL)_confirmIncreaseInQuotaWithMessage:(id)arg1 informativeText:(id)arg2;
- (void)_confirmSendSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)_considerStartingStallTimer;
- (BOOL)_contentsPrecludeChangingTextSize;
- (BOOL)_contentsPrecludeZoomingPage;
- (void)_decidePolicyForAction:(id)arg1 request:(id)arg2 frame:(id)arg3 newFrameName:(id)arg4 decisionListener:(id)arg5;
- (void)_detectStallsTimerFired;
- (BOOL)_displayRequestedSheetSoonIfAppropriate;
- (void)_displayRequestedSheetNow;
- (void)_displayUIForAbortedLoadAttemptForURL:(id)arg1 withTitle:(id)arg2 message:(id)arg3;
- (id)_failedURL;
- (struct CGImage *)_generateSnapshotForCoreAnimationView;
- (struct CGImage *)_generateSnapshotFromWindowBackingStore;
- (void)_goBackFromParentalControlsErrorPage;
- (void)_goToURL:(id)arg1 withFallbackURLs:(id)arg2;
- (void)_informDecisionListener:(id)arg1 ofPolicyDecision:(int)arg2;
- (BOOL)_isShowingExtensionPage;
- (id)_javaScriptDialogTitleForFrame:(id)arg1;
- (void)_loadBookmarksNibIfNecessary;
- (void)_loadRequestInMainFrameAndRelease:(id)arg1;
- (void)_openFileExternallyWithRequest:(id)arg1 inFrame:(id)arg2;
- (BOOL)_openURLExternallyWithRequest:(id)arg1 inFrame:(id)arg2 displayError:(BOOL)arg3;
- (void)_progressStarted;
- (void)_queueRequest:(id)arg1;
- (id)_removeRequestFromQueue;
- (void)_resetStallTimer;
- (void)_revealInFinderWithRequest:(id)arg1 inFrame:(id)arg2;
- (void)_searchWebWithTextFromErrorPage;
- (void)_selectTabAndOrderFront;
- (void)_setAbortedLoadSheetRequestWithTitle:(id)arg1 message:(id)arg2;
- (void)_setAnimatingTopSitesView:(id)arg1;
- (void)_setFallbackURLs:(id)arg1;
- (void)_sheetRequestConditionsChanged:(id)arg1;
- (BOOL)_shouldDisplayRequestedSheet;
- (BOOL)_shouldRedirectSubframeNavigationsToMainFrame;
- (BOOL)_shouldCreateTabForRequestWithWindowFeatures:(id)arg1;
- (void)_showErrorPageForURL:(id)arg1 withErrorPageHTML:(id)arg2 inFrame:(id)arg3;
- (void)_showParentalControlsErrorPageForURL:(id)arg1;
- (void)_stallOccurred;
- (void)_startDetectStallsTimer;
- (void)_startObservingNotificationsThatDisplayRequestedSheet;
- (void)_stopLoading:(id)arg1;
- (void)_stopObservingNotificationsThatDisplayRequestedSheet;
- (void)_tellListenerToIgnoreContentPolicyAndRelease:(id)arg1;
- (void)_tellListenerToUseContentPolicyAndRelease:(id)arg1;
- (void)_updateCachedPageTypeFromURL:(id)arg1;
- (void)_updateStatusInBrowserWindow;
- (BOOL)webView:(id)arg1 shouldReplaceUploadFile:(id)arg2 usingGeneratedFilename:(id *)arg3;
- (id)webView:(id)arg1 generateReplacementFile:(id)arg2;
- (void)activityWindowWillBecomeVisible:(id)arg1;
- (void)activityWindowDidBecomeInvisible:(id)arg1;
@end

@interface BrowserWebView (BrowserWebViewPrinting)
- (void)webView:(id)arg1 printFrameView:(id)arg2;
- (float)webViewHeaderHeight:(id)arg1;
- (float)webViewFooterHeight:(id)arg1;
- (void)drawLeftString:(id)arg1 rightString:(id)arg2 inRect:(struct CGRect)arg3 atBaseline:(float)arg4 withFont:(id)arg5;
- (void)webView:(id)arg1 drawHeaderInRect:(struct CGRect)arg2;
- (void)webView:(id)arg1 drawFooterInRect:(struct CGRect)arg2;
@end

@interface BrowserWindowController (Internal)
- (id)_browserDocument;
- (id)_attachedSheet;
- (id)_windowURL;
- (id)_firstResponderView;
- (void)_makeFirstResponder:(id)arg1;
- (void)_parentalControlsDidChange;
- (void)_allIconsRemoved:(id)arg1;
- (void)_defaultsDidChange;
- (void)_webPreferencesChanged:(id)arg1;
- (void)_iconDidChange:(id)arg1;
- (void)_preloadImages;
- (void)_collectTopLevelViewInfoForResizing;
- (void)_insertTopLevelView:(id)arg1 atIndex:(unsigned long long)arg2 withOriginalHeight:(double)arg3;
- (void)_removeTopLevelView:(id)arg1 needsDisplay:(BOOL)arg2;
- (void)_replaceTopLevelView:(id)arg1 withView:(id)arg2;
- (double)_originalHeightForTopLevelView:(id)arg1;
- (void)_tellUserThatAppIsHosed;
- (BOOL)_canPrintFromToolbar;
- (void)_applyNewWebViewBehavior:(long long)arg1 usingReferenceWebView:(id)arg2;
- (void)_dismissPrivateBrowsingSheet;
- (void)_postPrivateBrowsingSheetWasCanceledNotification;
- (void)_startObservingPrivateBrowsingSheetWasCanceledNotifications;
- (void)_stopObservingPrivateBrowsingSheetWasCanceledNotifications;
- (void)_confirmDisablePrivateBrowsingSheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (id)_selectedMainWebFrame;
- (id)_currentDocumentView;
- (id)_currentTabLocation;
- (id)_findTabForWebView:(id)arg1;
- (void)_setUpTabBar;
- (BOOL)_shouldShowTabBar;
- (void)_toggleTabBarWithAnimation:(BOOL)arg1;
- (BOOL)_moreThanOneTabShowing;
- (BOOL)_canCloseTab:(id)arg1;
- (BOOL)_alwaysShowTabBar;
- (void)_setTabBarVisible:(BOOL)arg1;
- (void)_automaticallyShowTabBarForTabDrag;
- (void)_automaticallyHideTabBarForTabDrag;
- (id)_setUpTabForWebView:(id)arg1 addToRightSide:(BOOL)arg2;
- (id)_setUpTabForWebView:(id)arg1;
- (void)_showTabBarAndUpdateCloseKeyEquivalentsIfNeeded;
- (id)_createTabWithWebView:(id)arg1 atIndex:(unsigned int)arg2 andShow:(BOOL)arg3;
- (id)_createTabWithFrameName:(id)arg1 andShow:(BOOL)arg2 addToRightSide:(BOOL)arg3;
- (id)_setUpTabForWebView:(id)arg1 atIndex:(unsigned int)arg2;
- (void)_moveTabToNewWindow:(id)arg1;
- (void)_reloadTab:(id)arg1;
- (void)_showTab:(id)arg1;
- (void)_showTabAtIndex:(int)arg1;
- (id)_tabToSelectBeforeClosingSelectedTab;
- (void)_closeTabWithoutConfirming:(id)arg1;
- (void)_closeTabWithoutConfirming:(id)arg1 allowUndo:(BOOL)arg2;
- (void)_closeOtherTabsWithoutConfirming:(id)arg1;
- (void)_closeWindowIfNoTabs;
- (void)_undoCloseTabAtIndex:(unsigned long long)arg1 andShow:(BOOL)arg2;
- (void)_removeAllTabCloseUndoActions;
- (id)_replaceTabSwitcher:(id)arg1 visitedTabs:(id)arg2;
- (void)_releaseTabSwitcher:(id)arg1;
- (void)_releaseTabSwitchersForBackForward;
- (void)_releaseTabSwitcherForGoingBack;
- (void)_releaseTabSwitcherForGoingForward;
- (id)_lastVisitedTabIgnoring:(id)arg1;
- (void)_removeTabViewItem:(id)arg1;
- (void)_updateCloseKeyEquivalents;
- (void)_updateDocumentIsEdited;
- (void)_confirmCloseWindowDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (BOOL)_displayCloseConfirmation;
- (void)_updateUnsubmittedFormTextPreference;
- (void)_confirmCloseTabForEditedFormDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(id)arg3;
- (void)_confirmClosingEditedTab:(id)arg1;
- (void)_confirmClosingOtherTabsIfAnyAreEditedDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(id)arg3;
- (void)_confirmClosingOtherTabsIfAnyAreEdited:(id)arg1;
- (void)_confirmReloadingEditedWebView:(id)arg1;
- (void)_confirmReloadWebViewForEditedFormDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(id)arg3;
- (void)_updateEVCertificateButton;
- (void)_updateReaderButton;
- (void)_updateRSSButton;
- (id)_createIncomingImageForRSSTransition;
- (void)_startRSSAnimation;
- (void)_startRSSAnimationAfterSpecificInterval;
- (void)_startRSSAnimationWithSlowMotion:(BOOL)arg1;
- (void)_startRSSAnimationForFrame:(id)arg1 error:(id)arg2;
- (void)_advanceRSSAnimation;
- (void)_stopRSSTransitionTimer;
- (void)_cleanUpRSSAnimationAndDisplay:(BOOL)arg1;
- (void)_cancelRSSAnimationAfterSpecificInterval;
- (void)_installRSSTransitionImageView;
- (void)_removeRSSTransitionImageViewAndDisplay:(BOOL)arg1;
- (id)_rssMenuWithFormat:(id)arg1;
- (void)_popUpReaderRSSMenu;
- (void)_popUpRSSMenu;
- (void)_goToDefaultURLForRSS;
- (void)_goToCounterpartURLForRSSFromMenuItem:(id)arg1;
- (void)_goToCounterpartURLForRSSAtIndex:(unsigned int)arg1 withSlowMotion:(BOOL)arg2;
- (void)_updateSearchFieldProviderText;
- (void)_setUpSearchField;
- (BOOL)_searchFieldIsFirstResponder;
- (BOOL)_makeSearchFieldFirstResponder;
- (BOOL)_searchFieldIsEmpty;
- (void)_chooseSearchString:(id)arg1;
- (struct WebSearchCompletionController *)_searchCompletionController;
- (void)_recentSearchesCleared:(id)arg1;
- (void)_updateSearchSnapBackButton;
- (void)_setUpFavoritesBar;
- (void)_toggleFavoritesBarWithAnimation:(BOOL)arg1;
- (id)_currentBookmarksViewController;
- (BOOL)_canAddBookmark;
- (BOOL)_isShowingBookmarks;
- (BOOL)_isShowingTopSites;
- (BOOL)_goToBookmarks;
- (id)_goToBookmarksUsingWindowPolicyFromCurrentEvent;
- (id)_goToTopSitesWallUsingWindowPolicyFromCurrentEvent;
- (void)_oneTimeSetUpForToggleBookmarksButton;
- (void)_updateToggleBookmarksButton;
- (void)_setUpLocationBar;
- (BOOL)_locationFieldIsFirstResponder;
- (BOOL)_makeLocationFieldFirstResponder;
- (void)_hideLocationBarIfTemporary;
- (void)_showLocationBarTemporarilyIfHidden;
- (void)_toggleLocationBarWithoutSavingConfiguration;
- (void)_makeLocationBarPermanentIfTemporary;
- (id)_locationFieldURL;
- (id)_locationFieldText;
- (BOOL)_setLocationFieldText:(id)arg1;
- (BOOL)_locationFieldIsEmpty;
- (BOOL)_locationFieldIsShowing;
- (BOOL)_locationFieldTextIsCurrentURL;
- (BOOL)_locationFieldTextIsLocationFieldURL;
- (void)_fixFocusRingAroundLocationField;
- (void)_updateLocationFieldIconNow;
- (BOOL)_updateLocationFieldTextNow;
- (struct URLCompletionController *)_URLCompletionController;
- (id)_urlStringForLocationFieldIcon;
- (void)_completionListDidShow:(const struct SNotification *)arg1;
- (void)_completionListSelectionDidChange:(const struct SNotification *)arg1;
- (void)_completionListDidHide:(const struct SNotification *)arg1;
- (void)_performCoalescedUpdateSoon:(int)arg1;
- (void)_performCoalescedUpdates;
- (void)_cancelCoalescedUpdate:(int)arg1;
- (void)_startPostponingCoalescedToolbarUpdates;
- (void)_stopPostponingCoalescedToolbarUpdates;
- (void)_toggleToolbarIgnoringCurrentEvent:(id)arg1;
- (void)_toggleBar:(id)arg1 withAnimation:(BOOL)arg2 isShowing:(BOOL)arg3;
- (BOOL)_isShowingBar:(id)arg1;
- (void)_setUpStatusBar;
- (void)_toggleStatusBarWithAnimation:(BOOL)arg1;
- (void)_updateStatusMessage;
- (id)_defaultStatus;
- (void)_clearStatus;
- (void)_setStatusMessageNow;
- (void)_setStatusMessage:(id)arg1 ellipsize:(BOOL)arg2;
- (void)_stopSetStatusMessageTimer;
- (BOOL)_canGoBack;
- (BOOL)_canGoForward;
- (BOOL)_canCreateWebClip;
- (BOOL)_canGoHome;
- (BOOL)_canAutoFill;
- (void)_goToToolbarLocationWithWindowPolicy:(int)arg1;
- (void)_setLoading:(BOOL)arg1;
- (id)_backListMenuForButton:(id)arg1;
- (id)_forwardListMenuForButton:(id)arg1;
- (BOOL)_updateDisplayedLoadingStateNow;
- (void)_tryMultipleURLs:(id)arg1 windowPolicy:(int)arg2;
- (void)_updateDisplayedLoadingStateSoon;
- (void)_tryToAutoFillAfterLoadingFrame:(id)arg1;
- (void)_tryToAutofillMainFrameSoonForWebView:(id)arg1;
- (void)_updateWindowTitleNow;
- (void)_updateWindowTitleSoon;
- (void)_updateSecurityUI;
- (void)_updateKeyboardLoop;
- (BOOL)_windowIsFullHeight;
- (double)_bestWindowWidthForCurrentPage;
- (void)_reloadParentallyRestrictedFrames;
- (void)_scheduleSpringToFront;
- (id)_screenForWindow;
- (void)_cancelSpringToFront;
- (void)_performSpringToFront;
- (void)_setExtensionBarsVisible:(BOOL)arg1;
- (void)_setExtensionBar:(struct ExtensionBar *)arg1 visible:(BOOL)arg2 withAnimation:(BOOL)arg3;
- (void)_updateExtensionBarDividers;
- (void)_setUpExtensionBar:(struct ExtensionBar *)arg1 withFrame:(struct CGRect)arg2;
- (void)_setupExtensionBars;
- (BOOL)_anyExtensionBarsVisible;
- (BOOL)_anyExtensionBarsVisibleExcludingBar:(const struct ExtensionBar *)arg1;
- (void)_extensionWasDisabled:(const struct SNotification *)arg1;
- (void)_extensionWasEnabled:(const struct SNotification *)arg1;
- (void)_insertExtensionBars:(const Vector_961780af *)arg1 withAnimation:(BOOL)arg2;
- (void)_updateLocationFieldProgressBarNow;
- (void)_updateLocationFieldProgressBarSoon;
- (void)_showCompleteLocationFieldProgressBarSoon;
- (void)_showCompleteLocationFieldProgressBarNow;
@end

@interface NSTabView (BrowserExtras)
- (void)makeWebViewsPerformSelector:(SEL)arg1 withObject:(id)arg2;
- (void)setHostWindow:(id)arg1;
- (void)stopLoading;
@end

@interface CALayer (SafariCAImageExporterLayerCloning)
- (id)safari_deepCopy;
@end

@interface NSURLResponse (CertificateUtilities)
- (struct OpaqueSecTrustRef *)peerTrust;
- (id)peerCertificates;
- (id)extendedValidationCertificateOrganizationName;
@end

@interface NSHTTPURLResponse (CertificateUtilities)
- (id)_safari_peerCertificateChain;
@end

@interface ClippedItemsIndicator (FileInternal) <NSMenuDelegate>
- (void)_updateImages;
- (double)_convertYFromMenuViewToRootView:(double)arg1;
- (void)_drawOverlayInContext:(struct CGContext *)arg1;
- (void)_setMenuWindow:(struct OpaqueWindowPtr *)arg1;
- (void)menuWillOpen:(id)arg1;
- (void)_popUpMenu;
@end

@interface CompletionControllerObjCAdapter (FileInternal)
- (void)_abortCompletionFromNotification:(id)arg1;
@end

@interface CompletionListTableView (FileInternal)
- (long long)_rowFromMouseEvent:(id)arg1;
- (BOOL)_rowIsSelectableByUser:(long long)arg1;
- (id)_accessibilityDescription;
@end

@interface BrowserContentWebView (BrowserContextMenu)
- (void)downloadURLUsingSavePanel:(id)arg1;
- (void)downloadLinkUsingSavePanel:(id)arg1;
- (void)choseDownloadLocationFromPanel:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (id)saveToDownloadsFolderMenuTitleForImage:(BOOL)arg1;
- (BOOL)haveSupportediPhotoVersion;
- (void)onExtensionContextMenuItemSelected:(id)arg1;
- (id)webView:(id)arg1 contextMenuItemsForElement:(id)arg2 defaultMenuItems:(id)arg3;
- (void)addLinkToBookmarks:(id)arg1;
- (void)viewFrameSource:(id)arg1;
- (void)saveDocumentAs:(id)arg1;
- (void)printFrame:(id)arg1;
- (void)printWindow:(id)arg1;
- (void)openWithITunes:(id)arg1;
- (void)openWithQuickTime:(id)arg1;
- (void)performWebSearch:(id)arg1;
- (id)URLFromSelectedStringInElement:(id)arg1;
- (void)goToAddress:(id)arg1;
- (void)openURLInNewTab:(id)arg1 tabLocation:(id)arg2;
- (void)openURLInNewWindow:(id)arg1;
- (id)tabLocationFromElement:(id)arg1;
- (void)goToAddressInNewTab:(id)arg1;
- (void)goToAddressInNewWindow:(id)arg1;
- (void)openLinkInNewTab:(id)arg1;
- (void)openLinkInNewWindow:(id)arg1;
- (void)openImageInNewTab:(id)arg1;
- (void)openImageInNewWindow:(id)arg1;
- (void)openFrameInNewTab:(id)arg1;
- (void)openFrameInNewWindow:(id)arg1;
- (void)copyEmailAddresses:(id)arg1;
- (void)copyImageAddress:(id)arg1;
- (void)saveFileWrapperForURLKey:(id)arg1 menuItem:(id)arg2;
- (void)saveFileWrapperToDownloadsFolderForURLKey:(id)arg1 menuItem:(id)arg2;
- (void)saveImageAs:(id)arg1;
- (void)saveLinkAs:(id)arg1;
- (void)saveImageToDownloadsFolder:(id)arg1;
- (void)saveLinkToDownloadsFolder:(id)arg1;
- (void)saveDocumentToDownloadsFolder:(id)arg1;
- (void)reportiPhotoErrorWithMessage:(id)arg1;
- (void)sendImagesToiPhoto;
- (void)didLaunchApplication:(id)arg1;
- (void)useImageAsDesktopPicture:(id)arg1;
- (void)addImageToiPhotoLibrary:(id)arg1;
@end

@interface WebDataSource (BrowserContextMenu)
- (BOOL)isDataLocalForURL:(id)arg1;
@end

@interface NSMutableArray (BrowserContextMenu)
- (id)addMenuItemWithTag:(int)arg1 fromArray:(id)arg2;
- (id)addMenuItemWithTitle:(id)arg1 action:(SEL)arg2;
- (id)addMenuItemWithTag:(int)arg1 fromArray:(id)arg2 newAction:(SEL)arg3 newTarget:(id)arg4 newRepresentedObject:(id)arg5;
@end

@interface NSArray (BrowserContextMenu)
- (BOOL)containsMenuItemWithTag:(int)arg1;
@end

@interface NSURL (BrowserContextMenu)
- (id)emailAddresses;
@end

@interface CroppingOverlayView (FileInternal)
- (struct CGRect)_constrainedCropRectFromUnconstrainedRect:(struct CGRect)arg1 withResizeHandle:(int)arg2;
- (struct CGRect)_convertRectFromTargetView:(struct CGRect)arg1;
- (struct CGRect)_convertRectToTargetView:(struct CGRect)arg1;
- (BOOL)_cropRectIsValid;
- (int)_handleContainingPoint:(struct CGPoint)arg1;
- (void)_invalidateCropRect;
- (BOOL)_moveCropRectWithMouseDownPoint:(struct CGPoint)arg1;
- (void)_reconstrainCropRect;
- (struct CGRect)_rectForHandle:(int)arg1;
- (BOOL)_resizeCropRectWithMouseDownPoint:(struct CGPoint)arg1;
- (id)_targetDocumentView;
- (id)_targetView;
@end

@interface DashboardWebClipController (FileInternal)
- (id)_clipSignatureDictionaryFromDOMHTMLElement:(id)arg1 cropRectInMainDocumentView:(struct CGRect)arg2;
- (id)_webWidgetURLWithParameters:(id)arg1;
@end

@interface NSApplication (DebugExtras)
- (BOOL)validate_toggleAlwaysCheckForWorldLeaks:(id)arg1;
- (void)toggleAlwaysCheckForWorldLeaks:(id)arg1;
@end

@interface NSMenu (DebugExtras)
- (id)addItemWithTitle:(id)arg1 target:(id)arg2 action:(SEL)arg3 keyEquivalent:(id)arg4;
@end

@interface BrowserDocument (DebugExtras)
- (void)showRenderTree:(id)arg1;
- (BOOL)validate_showRenderTree:(id)arg1;
- (void)showViewTree:(id)arg1;
- (void)forceRepaint:(id)arg1;
- (BOOL)validate_forceRepaint:(id)arg1;
- (void)toggleBackForwardCacheDisabled:(id)arg1;
- (BOOL)validate_toggleBackForwardCacheDisabled:(id)arg1;
- (void)toggleWebArchiveDebugMode:(id)arg1;
- (BOOL)validate_toggleWebArchiveDebugMode:(id)arg1;
- (void)toggleLocalFileContentSniffing:(id)arg1;
- (BOOL)validate_toggleLocalFileContentSniffing:(id)arg1;
- (void)toggleAcceleratedCompositingDisabled:(id)arg1;
- (void)toggleAcceleratedCompositingDebugBorders:(id)arg1;
- (BOOL)validate_toggleAcceleratedCompositingDisabled:(id)arg1;
- (BOOL)validate_toggleAcceleratedCompositingDebugBorders:(id)arg1;
- (void)toggleTransparentWindow:(id)arg1;
- (BOOL)validate_toggleTransparentWindow:(id)arg1;
- (void)goToAboutBlankSoon:(id)arg1;
- (void)toggleDOMPasteAllowed:(id)arg1;
- (BOOL)validate_toggleDOMPasteAllowed:(id)arg1;
- (void)showSecurityWarningPageForURLSecurityAssessment:(int)arg1 urlSecurityProvider:(int)arg2;
- (void)showPhishingWarning:(id)arg1;
- (void)showMalwareWarning:(id)arg1;
- (void)showMultiplePhishingWarning:(id)arg1;
- (void)showMultipleMalwareWarning:(id)arg1;
- (void)showUserInfoWarning:(id)arg1;
@end

@interface AppController (DebugExtras)
- (void)toggleAlwaysUseComplexTextCodePath:(id)arg1;
- (void)toggleUseViewlessWebKit:(id)arg1;
- (BOOL)validate_toggleUseViewlessWebKit:(id)arg1;
- (void)toggleUnsubmittedFormTextConfirmationsDisabled:(id)arg1;
- (BOOL)validate_toggleUnsubmittedFormTextConfirmationsDisabled:(id)arg1;
- (BOOL)validate_toggleWebClipWidgetDebugMode:(id)arg1;
- (void)toggleWebClipWidgetDebugMode:(id)arg1;
- (void)reloadAllExtensions:(id)arg1;
- (BOOL)validate_reloadAllExtensions:(id)arg1;
- (void)unloadAllExtensions:(id)arg1;
- (BOOL)validate_unloadAllExtensions:(id)arg1;
- (void)toggleEnableExtensions:(id)arg1;
- (BOOL)validate_toggleEnableExtensions:(id)arg1;
- (void)toggleLogJavaScriptExceptions:(id)arg1;
- (BOOL)validate_toggleLogJavaScriptExceptions:(id)arg1;
@end

@interface AppController (DeveloperExtras)
- (void)showSnippetEditor:(id)arg1;
- (void)toggleIncludeExtensions:(id)arg1;
- (BOOL)validate_toggleIncludeExtensions:(id)arg1;
- (void)showExtensionBuilder:(id)arg1;
- (BOOL)validate_showExtensionBuilder:(id)arg1;
- (void)toggleCachesDisabled:(id)arg1;
- (BOOL)validate_toggleCachesDisabled:(id)arg1;
- (void)toggleImagesDisabled:(id)arg1;
- (BOOL)validate_toggleImagesDisabled:(id)arg1;
- (void)toggleStylesDisabled:(id)arg1;
- (BOOL)validate_toggleStylesDisabled:(id)arg1;
- (void)toggleJavaScriptDisabled:(id)arg1;
- (BOOL)validate_toggleJavaScriptDisabled:(id)arg1;
- (void)toggleRunawayJavaScriptTimerDisabled:(id)arg1;
- (BOOL)validate_toggleRunawayJavaScriptTimerDisabled:(id)arg1;
- (void)toggleSiteSpecificHacksDisabled:(id)arg1;
- (BOOL)validate_toggleSiteSpecificHacksDisabled:(id)arg1;
@end

@interface BrowserDocument (DeveloperExtras)
- (void)openPageWithApplication:(id)arg1;
- (BOOL)validate_openPageWithApplication:(id)arg1;
- (void)setUserAgent:(id)arg1;
- (BOOL)validate_setUserAgent:(id)arg1;
- (void)resetUserAgent:(id)arg1;
- (BOOL)validate_resetUserAgent:(id)arg1;
- (void)setUserDefinedUserAgent:(id)arg1;
- (BOOL)validate_setUserDefinedUserAgent:(id)arg1;
- (void)showOtherUserAgentSheet:(id)arg1;
- (BOOL)validate_showOtherUserAgentSheet:(id)arg1;
- (void)otherUserAgentSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)showWebInspector:(id)arg1;
- (BOOL)validate_showWebInspector:(id)arg1;
- (void)showErrorConsole:(id)arg1;
- (BOOL)validate_showErrorConsole:(id)arg1;
- (void)toggleDebuggingJavaScript:(id)arg1;
- (BOOL)validate_toggleDebuggingJavaScript:(id)arg1;
- (void)toggleProfilingJavaScript:(id)arg1;
- (BOOL)validate_toggleProfilingJavaScript:(id)arg1;
@end

@interface DownloadMonitor (DownloadMonitorInternal)
- (BOOL)_shouldClearHistoryOnQuit;
- (BOOL)_needToWriteHistoryFileOnQuit;
- (void)_updateSuddenTerminationSetting;
- (void)_saveDownloadHistory;
- (void)_noteDownloadsChanged;
- (void)_insertEntry:(id)arg1 atIndex:(unsigned int)arg2 withNotification:(BOOL)arg3 removeOld:(BOOL)arg4;
- (void)_addEntry:(id)arg1 withNotification:(BOOL)arg2;
- (id)_createSecureEntryForRequest:(id)arg1 allowOverwrite:(BOOL)arg2;
- (id)_createEntryForDownload:(id)arg1 allowOverwrite:(BOOL)arg2;
- (id)_createEntryForRequest:(id)arg1 allowOverwrite:(BOOL)arg2;
- (id)_downloadHistoryFile;
- (void)_loadDownloadHistoryIfNeeded;
- (void)_removeEntries:(id)arg1 withNotification:(BOOL)arg2;
- (void)_download:(id)arg1 entry:(id)arg2 didFailWithError:(id)arg3;
@end

@interface NSString (DownloadProgressEntryStringExtras)
- (id)stringByDeletingAllPathExtensions;
@end

@interface NSWorkspace (DownloadProgressEntryNSWorkspaceExtras)
- (id)pathForApplicationWithIdentifier:(id)arg1 andMinimumVersion:(id)arg2;
- (BOOL)isFileAtPath:(id)arg1 ownedByApplicationAtPath:(id)arg2;
@end

@interface DownloadProgressEntry (DownloadProgressEntryInternal)
- (void)_startThreadWithFunction:(void *)arg1;
- (BOOL)_openDiskImageFile;
- (void)_updateDiskImageStatus:(id)arg1;
- (void)_diskImageAttachmentEnded:(id)arg1;
- (BOOL)_openGZipFile;
- (BOOL)_openBOMFile;
- (void)_setBOMCopier:(struct _BOMCopier *)arg1;
- (void)_BOMCopyEnded:(id)arg1;
- (void)_GZipDecompressionEnded:(id)arg1;
- (BOOL)_openInstallerPackage;
- (void)_observeWidgetInstallationNotification;
- (void)_dashboardDidInstallWidget:(id)arg1;
- (BOOL)_openDashboardWidget;
- (BOOL)_addCertificateToKeyChain;
- (int)_openArchive;
- (BOOL)_open;
- (BOOL)_moveFilesFromBundle;
- (int)_autoOpen;
- (id)_postDownloadFile;
- (id)_postDownloadPath;
- (void)_updatePath:(id)arg1 ofFile:(id)arg2;
- (id)_allFiles;
- (void)_postPathDidChangeNotification;
- (BOOL)_hasAnyFiles;
- (id)_downloadPath;
- (id)_bundlePath;
- (id)_downloadPathForJNLP;
- (id)_legalFilenameForDirectoryPath:(id)arg1 filename:(id)arg2;
- (void)_addPostDownloadFiles:(id)arg1;
- (void)_addUnarchivedFilesFromResults:(id)arg1;
- (void)_addPostDownloadFileWithPath:(id)arg1;
- (BOOL)_canFinishDownloadWithoutReloading;
- (id)_cancelledError;
- (void)_forgetPostDownloadFile:(id)arg1;
- (void)_forgetAllPostDownloadFiles;
- (void)_forgetAllFiles;
- (void)dealloc;
- (void)_setDownload:(id)arg1;
- (void)_setRequest:(id)arg1;
- (void)_setStartDate:(id)arg1;
- (void)_setDownloadStage:(int)arg1 shouldSendNotifications:(BOOL)arg2;
- (void)_setResumeInformation:(id)arg1;
- (BOOL)_notEnoughFreeDiskSpaceAtDirectoryPath:(id)arg1;
- (id)_createDownloadBundleInDirectory:(id)arg1 withFilename:(id)arg2;
- (void)_endWithPostDownloadError:(id)arg1;
- (BOOL)_deleteFilesAndBundle;
- (void)setDone:(BOOL)arg1;
- (void)_startPostProcessingIfDone;
- (void)_updateIcon;
@end

@interface EventSendingLKView (FileInternal)
- (struct CGPoint)_coreAnimationPointForEventPoint:(struct CGPoint)arg1 inEventWindow:(id)arg2;
- (struct CGPoint)_pointForEvent:(id)arg1;
- (void)_mouseMoved:(id)arg1;
- (void)_sendToolTipMouseEntered;
- (void)_sendToolTipMouseExited;
- (void)_setToolTip:(id)arg1;
- (void)_startTrackingMouseMovement;
- (void)_stopTrackingMouseMovement;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
@end

@interface FadingOverlayView (FileInternal)
- (id)_holes;
@end

@interface NSView (FavoriteButtonAnimation)
- (void)pauseAnimation;
- (void)resumeAnimation;
@end

@interface FavoritesBarView (FileInternal)
- (id)_addButtonForBookmark:(id)arg1;
- (id)_addButtonForTopSitesProxyBookmark:(id)arg1;
- (BOOL)_addDroppedBookmarks:(id)arg1 atIndex:(unsigned int)arg2;
- (void)_addProxyWithIdentifier:(id)arg1;
- (void)_bookmarksReloaded:(const struct SNotification *)arg1;
- (BOOL)_bookmarkWithURLString:(id)arg1 isInArray:(id)arg2;
- (id)_buttonAtMouseLocation:(struct CGPoint)arg1;
- (id)_buttonWithOpenMenu;
- (BOOL)_contentsOutOfSyncWithDefaults;
- (void)_createFolderInFavoritesBar:(id)arg1;
- (void)_deleteDraggedBookmark:(id)arg1;
- (void)_deleteFavoritesWithURLsMatchingBookmarks:(id)arg1;
- (void)_deletePendingDraggedBookmarks;
- (void)_favoritesChanged:(const struct SNotification *)arg1;
- (void)_favoritesViewFrameChanged:(id)arg1;
- (void)_layOutButtons;
- (void)_preferenceValueChanged:(id)arg1;
- (void)_queueButtonMenuForPopUp:(id)arg1;
- (void)_refreshButtonsSoon;
- (void)_resetClippedItems;
- (double)_rightEdgeOfFavoritesViewSubviews;
- (void)_setDraggedBookmarksPendingDeletion:(id)arg1;
- (unsigned int)_specialBookmarkSourcesCount;
- (void)_titleChangeSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)_undoAddProxyWithIdentifier:(id)arg1;
- (void)_undoRemoveProxyWithIdentifier:(id)arg1;
- (void)_updateFavoritesTracking;
- (void)_URLConfirmationDidEndForNewBookmark:(id)arg1 confirmed:(BOOL)arg2 contextInfo:(void *)arg3;
@end

@interface FindBanner (FileInternal)
- (id)_selectionSourceInWebView;
- (void)_animateSelectedText;
- (BOOL)_canHighlightAllMatches;
- (void)_clearHighlightedMatches;
- (void)_clearSelectionInWebView;
- (BOOL)_findWithDirection:(BOOL)arg1 caseSensitive:(BOOL)arg2 beepOnFailure:(BOOL)arg3 animateOnSuccess:(BOOL)arg4;
- (void)_highlightAllMatchesAllowingOverlay:(BOOL)arg1;
- (id)_imageForBannerControlWithBaseName:(id)arg1;
- (void)_makeSearchFieldFirstResponder;
- (void)_resetHighlightedMatches;
- (id)_searchableWebView;
- (id)_searchString;
- (void)_setStatus:(id)arg1;
- (void)_startObservingWindowAndBannerView;
- (id)_statusStringFromMatchCount;
- (void)_stopObservingWindowAndBannerView;
- (void)_updateFindPasteboardFromSearchField;
- (void)_updateHighlightedMatchesAllowingOverlay:(BOOL)arg1;
- (void)_updateNextAndPreviousButtons;
- (void)_windowDidUpdate:(id)arg1;
@end

@interface NSImage (NSImageExtras)
- (struct CGImage *)_safari_CGImage;
@end

@interface FlowView (FileInternal)
- (struct FlowRootLayer *)_flowRootLayer;
@end

@interface FormDelegate (FileInternal)
- (void)_createCompletionControllerIfNeededForDOMElement:(id)arg1 inWebFrame:(id)arg2;
- (void)_didEditFormElement:(id)arg1 inFrame:(id)arg2;
- (BOOL)_shouldIgnoreFormTextChangesInFrame:(id)arg1;
- (void)_clearEditedFormsInFrame:(id)arg1;
@end

@interface GeneralPreferences (FileInternal)
- (BOOL)_canSetHomePageToCurrentPage;
- (void)_chooseDownloadFolderFromFileBrowser:(id)arg1;
- (void)_chooseMultiplePages:(id)arg1;
- (void)_choseDownloadFolderFromPanel:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)_confirmSetHomePageToURLString:(id)arg1;
- (id)_currentPageURL;
- (void)_searchHomePageConfirmationDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)_insertTopSitesBehaviorIntoPopUp:(id)arg1;
- (void)_parentalControlsDidChange;
- (void)_readManagedPreferences;
- (void)_setUpSearchEngineViews;
- (void)_updateDefaultBrowserMenu;
- (void)_updateDefaultSearchEngineMenu;
- (void)_updateDownloadLocationMenu;
- (void)_updateHistoryAgeLimitPopUp;
- (void)_updateHomePageViews;
- (void)_updateNewTabBehaviorViews;
- (void)_updateNewWindowBehaviorViews;
- (void)_updateNewWindowTabsMenuItem;
- (void)_updateUseCurrentPageButton;
@end

@interface WebFrame (HistoryTextCache)
- (id)contentsAsString;
@end

@interface HistoryTextCache (FileInternal)
- (void)_cancelFlushTimer;
- (void)_detachFlushThread;
- (void)_flushSoon;
- (void)_flushRemovalsSoon;
- (void)_runCachingThread;
- (void)_runFlushThreadWithSuddenTerminationInitiallyDisabled:(id)arg1;
- (void)_initializeSearchIndexCreatingIfNecessary:(BOOL)arg1;
- (void)_closeSearchIndex;
- (BOOL)_needsCompaction;
- (BOOL)_removeCachedPageTextForURLStringWithoutFlushing:(id)arg1;
- (void)_setNeedsCompaction:(BOOL)arg1;
- (void)_setPendingFlushIncludesRemovals:(BOOL)arg1;
- (void)_backgroundExtractPDFDocument:(id)arg1 originalURLString:(id)arg2;
- (void)_runPDFExtractionThread;
- (void)_backgroundCachePageText:(id)arg1 originalURLString:(id)arg2;
@end

@interface HTMLSourceDocument (FileInternal)
- (BOOL)_canZoomIn;
- (BOOL)_canZoomOut;
- (BOOL)_canZoomToStandardSize;
- (id)_findBanner;
@end

@interface ImageAndTextCell (FileInternal)
- (void)_getLeftImageFrame:(struct CGRect *)arg1 rightImageFrame:(struct CGRect *)arg2 andTextFrame:(struct CGRect *)arg3 fromCellFrame:(struct CGRect)arg4;
@end

@interface NSString (LocationChangeExtras)
- (id)URLScheme;
@end

@interface LocationChangeHandler (Errors)
- (id)specializedTitleForError:(id)arg1;
- (id)failingURLFromError:(id)arg1 andDataSource:(id)arg2;
- (id)specializedMessageForError:(id)arg1 dataSource:(id)arg2;
- (id)genericTitleForError:(id)arg1;
- (id)genericMessageForError:(id)arg1 dataSource:(id)arg2;
- (int)errorPageTemplateForError:(id)arg1;
- (id)loadErrorURL;
- (void)setLoadErrorURL:(id)arg1;
- (void)displayOrRememberLocationChangeError:(id)arg1 forDataSource:(id)arg2;
@end

@interface LocationChangeHandler (FileInternal)
+ (void)_finishedLoadingFrame:(id)arg1;
+ (void)_startedLoadingFrame:(id)arg1;
- (void)_continueLoadingSite;
- (void)_warnAboutUnsafeSiteWithSecurityInfo:(id)arg1;
- (void)_cancelCheckForFraudulentWebsites;
- (void)_checkForFraudulentWebsitesWithURL:(id)arg1;
- (void)_fraudulentWebsiteCheckCompletedForURL:(id)arg1 withAssessment:(int)arg2 fromProvider:(int)arg3;
- (void)_cachePageTextNow;
- (void)_cachePageTextSoon;
- (void)_cacheSnapshotNow;
- (void)_cacheSnapshotSoon;
- (BOOL)_cancelPendingCachePageTextRequest;
- (BOOL)_cancelPendingCacheSnapshotRequest;
- (BOOL)_cancelPendingDetectReaderAvailabilityRequest;
- (void)_continueHTTPSConnectionSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)_continueHTTPSConnectionWithIdentitySheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)_detectReaderAvailabilityNow;
- (void)_detectReaderAvailabilitySoon;
- (BOOL)_handleCertificateError:(id)arg1 forDataSource:(id)arg2;
- (void)_handleError:(id)arg1 forDataSource:(id)arg2 willTryFallbackURLs:(char *)arg3;
- (id)_loadMonitor;
- (void)_locationChangeDone:(id)arg1 forDataSource:(id)arg2;
- (id)_mainFrame;
- (void)_setPreviousHistoryItem:(id)arg1;
@end

@interface LocationTextField (LocationFieldButtons)
- (void)_drawButtonWithTag:(int)arg1 clipRect:(struct CGRect)arg2;
- (struct CGRect)_frameForButtonWithTag:(int)arg1;
- (struct CGRect)_hitTestFrameForButtonWithTag:(int)arg1;
- (BOOL)_isShowingButtonWithTag:(int)arg1;
- (double)_marginBeforeLeftmostButtonWithTag:(int)arg1;
- (double)_minYOfButtonWithTag:(int)arg1;
- (void)_mouseDown:(id)arg1 inButtonWithTag:(int)arg2;
- (struct CGSize)_sizeOfButtonWithTag:(int)arg1;
- (int)_tagOfButtonContainingPoint:(struct CGPoint)arg1;
- (int)_tagOfLeftmostVisibleButton;
- (int)_tagOfRightmostVisibleButton;
- (void)_trackMenu:(id)arg1 inButtonWithTag:(int)arg2;
@end

@interface LocationTextField (Internal)
- (void)_clearOriginalStringIfItMatchesDisplay;
- (struct CGImage *)_createHorizontalFadingGradientWithMaxX:(double)arg1;
- (void)_displayIcon;
- (void)_displayIconIfNecessary;
- (void)_drawEVCertificateButtonInRect:(struct CGRect)arg1;
- (void)_drawGradientTitle:(id)arg1 withFrame:(struct CGRect)arg2;
- (void)_drawPrivateBrowsingButtonInRect:(struct CGRect)arg1;
- (void)_drawReaderButtonInRect:(struct CGRect)arg1;
- (struct CGRect)_evCertificateButtonFrame;
- (BOOL)_evCertificateButtonWillRespondToClick;
- (void)_finishInitialization;
- (BOOL)_isEditing;
- (BOOL)_isIconMouseDownEvent:(id)arg1;
- (float)_leftSideMaxX;
- (struct CGRect)_progressBarRectForValue:(double)arg1;
- (id)_proxyIconDraggingImageWithTitle:(id)arg1;
- (double)_rightButtonsWidth;
- (struct CGRect)_privateBrowsingButtonFrame;
- (struct CGRect)_readerButtonImageFrame;
- (struct CGRect)_rssButtonImageFrame;
- (void)_setAccessibilityDescriptionForEVCertificateButton:(id)arg1;
- (void)_setAccessibilityDescriptionForReaderButton:(id)arg1;
- (void)_setAccessibilityDescriptionForRSSButton:(id)arg1;
- (void)_setButtonWithTag:(int)arg1 isHighlighted:(BOOL)arg2;
- (void)_setButtonWithTag:(int)arg1 isShown:(BOOL)arg2;
- (void)_setIsShowingReaderButton:(BOOL)arg1;
- (void)_setIsShowingRSSButton:(BOOL)arg1;
- (void)_setIsShowingStopReloadButton:(BOOL)arg1;
- (void)_setReaderButtonToolTip:(id)arg1;
- (void)_setRSSButtonImage:(id)arg1;
- (void)_setRSSButtonHighlightedImage:(id)arg1;
- (void)_setRSSButtonToolTip:(id)arg1;
- (BOOL)_shouldShowEVCertificateButton;
- (struct CGRect)_spinningProgressIndicatorFrame;
- (id)_stopReloadButtonImage;
- (struct CGRect)_stopReloadButtonImageFrame;
- (id)_stopReloadButtonToolTip;
- (void)_updateEVCertificateButton;
- (void)_editorSelectionDidChange:(id)arg1;
- (void)_expandTruncatedStringIfNeeded;
- (void)_updateBoundsTrackingRect;
- (void)_updateEVCertificateButtonTrackingRect;
- (void)_updateRightButtonsReservedWidth;
- (void)_updateStringTruncationAndPlacement;
- (void)_updateToolTipRects;
- (void)_updateProgressIndicator;
@end

@interface NSWindow (MorphingDragImageControllerExtras)
- (id)_safari_displayIfNeeded;
@end

@interface MorphingDragImageController (Internal)
- (void)_scheduleRedisplay;
- (void)_redisplayWindows;
- (void)_dragImage:(id)arg1 maximumSize:(struct CGSize)arg2 fromView:(id)arg3 at:(struct CGPoint)arg4 pasteboard:(id)arg5 source:(id)arg6 inMode:(id)arg7;
- (void)_prepareForDragWithImage:(id)arg1;
- (void)_runDrag;
- (id)_runLoopMode;
- (void)_handleEvent:(id)arg1;
- (void)_handleMouseDragged;
- (void)_handleFlagsChanged;
- (void)_handleMouseUp;
- (void)_applicationDidResignActive;
- (void)_dragComplete;
- (void)_animateMorphWindow;
- (void)_animateSlideBack;
- (id)_dragInfoForTargetUnderMouse;
- (id)_dragInfoForNoTargetUnderMouse;
- (void)_findWindowUnderMouse:(id *)arg1 level:(int *)arg2 viewUnderMouse:(id *)arg3;
- (void)_setWindowUnderMouse:(id)arg1;
- (void)_setTargetUnderMouse:(id)arg1;
- (void)_sendMovedToPointOnScreenToDragSource;
- (void)_morphToDragImage:(id)arg1 force:(BOOL)arg2;
@end

@interface NewBookmarksController (FileInternal)
+ (id)_suggestedTitleForBookmark:(id)arg1;
- (id)_addBookmarkFolder:(id)arg1 toMenu:(id)arg2;
- (void)_bookmarksChanged:(const struct SNotification *)arg1;
- (void)_initializeViewsFromDefaults;
- (void)_recursivelyAddChildFoldersOf:(id)arg1 toMenu:(id)arg2 withIndentationLevel:(unsigned int)arg3;
- (void)_populateLocationPopUp;
- (void)_startObservingBookmarkChanges;
- (void)_stopObservingBookmarkChanges;
- (void)_updateViews;
@end

@interface WebBookmark (OldBookmarkCollectionsFileInternal)
+ (id)_allLeafBookmarksInStandardCollectionsMatchingSelector:(SEL)arg1;
- (BOOL)_addressOfContentItem:(id)arg1 isInSet:(id)arg2;
- (void)_collectContentItems:(id)arg1 matchingSearchStrings:(id)arg2 orWithAddressInSet:(id)arg3 fromContentItem:(id)arg4;
- (void)_collectLeafBookmarks:(id)arg1 matchingSelector:(SEL)arg2 fromContentItem:(id)arg3;
- (BOOL)_contentItem:(id)arg1 matchesString:(id)arg2 options:(int)arg3;
- (id)_contentItemIsFeedBookmark:(id)arg1;
@end

@interface WebBookmark (OldBookmarkCollections)
+ (id)allCollectionsRoot;
+ (id)builtInCollections;
+ (id)userCollections;
+ (BOOL)hasAnyUserCollections;
+ (void)initializeCollections;
+ (id)allFeedBookmarksInStandardCollections;
- (id)addressStringForContentItem:(id)arg1;
- (id)bookmarkFromContentItem:(id)arg1;
- (BOOL)canAddContentItems;
- (BOOL)canCopyContentItems;
- (BOOL)canDeleteCollection;
- (BOOL)canDeleteContentItems;
- (id)childAtIndex:(int)arg1 ofContentItem:(id)arg2;
- (void)didCollapseContentItem:(id)arg1;
- (void)didExpandContentItem:(id)arg1;
- (BOOL)contentItem:(id)arg1 matchesStrings:(id)arg2 options:(int)arg3;
- (BOOL)contentItemAutomaticallyOpensInTabs:(id)arg1;
- (BOOL)contentItemCanHaveChildren:(id)arg1;
- (BOOL)contentItemsAreFilteredFromOtherSources;
- (id)contentItemsMatchingSearchStrings:(id)arg1 orWithAddressInSet:(id)arg2;
- (BOOL)contentItemsShouldShowUnreadRSSCounts;
- (id)contentItemsToInitiallyExpand;
- (id)contentItemsToExpandOnReload;
- (BOOL)isCollection;
- (id)imageForContentItem:(id)arg1;
- (int)numberOfChildrenOfContentItem:(id)arg1;
- (id)parentOfContentItem:(id)arg1;
- (id)parentStringForContentItem:(id)arg1;
- (BOOL)shouldShowRSSLabelForContentItem:(id)arg1;
- (id)standardCollection;
- (id)titleStringForContentItem:(id)arg1 forEditing:(BOOL)arg2 suppressUnreadRSSCount:(BOOL)arg3;
@end

@interface OldGlobalHistory (FileInternal)
- (void)_addHistoryEntry:(struct GlobalHistoryItem *)arg1 toMenu:(id)arg2;
- (void)_addHistoryItemsFromHashSet:(const HashSet_07facf1c *)arg1 toSpotlightCacheArray:(id)arg2;
- (void)_addHistoryItemsFromVector:(const Vector_be06175b *)arg1 toSpotlightCacheArray:(id)arg2;
- (BOOL)_addItemsForDate:(id)arg1 toMenu:(id)arg2 skip:(unsigned int)arg3 limit:(unsigned int)arg4;
- (id)_addSubmenu:(id)arg1 withTitle:(id)arg2;
- (void)_appendHistoryToMenu;
- (void)_clearHistoryFromMenu:(id)arg1;
- (id)_displayedTitleForEntry:(id)arg1;
- (void)_entriesChanged;
- (id)_entriesFromMixedItems:(id)arg1;
- (int)_recentHistoryLimit;
- (void)_removeEntries:(id)arg1;
- (void)_removeHistoryFromMenu;
- (id)_stringForCalendarDate:(id)arg1;
- (void)_takeLocationFromHistoryEntry:(id)arg1;
- (void)_undoRemoveEntries:(id)arg1;
- (void)_updateHistoryMenu;
- (void)_updateShowTopSitesItem;
- (BOOL)validate__takeLocationFromHistoryEntry:(id)arg1;
- (BOOL)validate__clearHistoryFromMenu:(id)arg1;
@end

@interface OldSpotlightCacheController (FileInternal)
- (void)updateCache;
- (void)updateCacheSoon;
- (void)updaterThreadFinished;
- (id)cacheParentDirectory;
- (id)cacheSubdirectoryForDataType:(id)arg1;
- (id)createCacheParentDirectory;
- (id)createCacheSubdirectoryForDataType:(id)arg1;
- (BOOL)forciblyCreateDirectory:(id)arg1;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 removingItemAtPath:(id)arg3;
- (BOOL)updateCacheFilesForType:(id)arg1;
- (void)deleteAllCachedFilesForType:(id)arg1;
- (void)moveOldBookmarkCacheFiles;
- (void)updaterThreadBody:(id)arg1;
@end

@interface OutlineViewPlus (FileInternal)
- (void)_cancelDoubleClickTimerAction;
@end

@interface Overlay (FileInternal)
- (struct CGRect)_computeOverlayWindowFrame;
- (void)_repositionOverlayWindow;
@end

@interface NSWindow (PageLoadTest)
- (id)closeIfBrowserWindow;
@end

@interface PurpleButtonCell (FileInternal)
- (BOOL)_getButtonImageLeftCap:(id *)arg1 rightCap:(id *)arg2 fill:(id *)arg3 forPulsing:(BOOL)arg4;
- (BOOL)_isPulsing;
- (id)_textWithShadowAttributes;
@end

@interface ReaderOverlayWindow (FileInternal)
@end

@interface NSWindow (WindowReopener)
- (BOOL)addToControllerNames;
@end

@interface ABAddressBook (SafariExtras)
+ (id)_safari_sharedAddressBook;
@end

@interface SafariAlert (FileInternal)
- (void)_alertDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
@end

@interface NSAnimation (SafariExtras)
- (float)safari_currentValueForEaseOutCurve;
- (float)safari_currentValueForStrongerEaseOutCurve;
@end

@interface NSBezierPath (SafariExtras)
+ (id)safari_bezierPathWithRoundedRect:(struct CGRect)arg1 radius:(float)arg2;
+ (id)safari_bezierPathWithHorizontalArrowInRect:(struct CGRect)arg1 pointingLeft:(BOOL)arg2;
@end

@interface NSControl (SafariExtras)
- (double)safari_fittingHeight;
- (void)safari_growToFitAndAdjustWindowHeight;
@end

@interface NSImage (SafariExtras)
+ (id)safari_imageNamed:(id)arg1 sender:(id)arg2;
- (id)safari_initWithCGImageRef:(struct CGImage *)arg1;
@end

@interface NSThread (SafariExtras)
@end

@interface NSUserDefaults (SafariExtras)
- (void)safari_removeStringForKey:(id)arg1 ifEqualToString:(id)arg2;
@end

@interface WebView (SafariSnapshotGeneration)
- (struct CGImage *)createImageForRect:(struct CGRect)arg1 inSubview:(id)arg2;
- (struct CGImage *)generateSnapshotOfType:(int)arg1;
@end

@interface SearchableWebView (FileInternal)
- (void)_commonInitialization;
@end

@interface SecurePageIndicator (FileInternal)
- (void)_updateLockImage;
@end

@interface SecurityPreferences (FileInternal)
- (void)acceptCookiesPreferenceChanged:(id)arg1;
- (void)blockPopUpsConfirmationDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)defaultsChanged:(id)arg1;
- (void)populateDatabasesQuotaMenu;
- (void)toggleBooleanPreference:(id)arg1;
- (void)updateCookiesViews;
- (void)updateDatabaseViews;
- (void)updateGeolocationViews;
- (void)updateJavaScriptViews;
- (void)antiPhishingServiceUpdated:(const struct SNotification *)arg1;
- (id)_approximateTimeStringForDuration:(double)arg1;
- (void)updateAntiPhishingStatusImage;
- (struct SafeBrowsingLastUpdateObserver *)_lastUpdateObserver;
- (void)_lastSuccessfulUpdateTimeForService:(id)arg1 lastUpdate:(double)arg2;
- (void)updateAntiPhishingViews;
- (void)showAntiPhishingStatus;
- (void)hideAntiPhishingStatus;
- (void)updateEverything;
- (void)updateMiscellaneousSecurityViews;
@end

@interface NSView (SlidingExtras)
- (struct CGRect)slidingFrame;
- (void)setSlidingFrame:(struct CGRect)arg1;
- (void)setFrameWithRedraw:(struct CGRect)arg1;
@end

@interface SlidingAnimation (Internal)
+ (id)_runLoopModesForAnimation;
@end

@interface SlidingViewsBar (FileInternal)
- (void)_ensureButtonIsInViewHierarchy:(id)arg1;
@end

@interface NSWindow (SafariHeartbeat)
- (id)_safari_heartbeatContext;
@end

@interface NSView (BrowserExtras)
- (BOOL)superviewsNeedDisplay;
@end

@interface SplitView (FileInternal)
- (struct CGRect)_cursorRectArea;
- (id)_dividerFrames;
- (double)_scaledDividerThickness;
- (void)_setCustomDividerColor:(id)arg1;
@end

@interface SpotlightBookmarksWriter (FileInternal)
- (void)_writeCacheFileForBookmark:(id)arg1 inDirectory:(id)arg2;
- (void)_removeCacheFileForBookmark:(id)arg1 inDirectory:(id)arg2;
@end

@interface SpotlightHistoryWriter (FileInternal)
- (void)_deleteCacheFileForItem:(id)arg1;
- (id)_filenameForItem:(id)arg1;
- (void)_forgetTrackedFilenameForItem:(id)arg1;
- (id)_generateTrackedFilenameForItem:(id)arg1;
- (id)_pathForFilename:(id)arg1;
- (id)_pathForItem:(id)arg1;
- (id)_pathForMappingFile;
- (void)_setCacheFilesDirectory:(id)arg1;
- (id)_trackedFilenameForItem:(id)arg1;
- (id)_trackedFilenames;
- (void)_updateMappingFile;
- (void)_writeCacheFileForItem:(id)arg1;
@end

@interface TabBarView (Internal)
+ (void)_addURLsFromBookmark:(id)arg1 toArray:(id)arg2;
+ (unsigned long long)_draggedURLOperationForDraggingInfo:(id)arg1;
+ (id)_dragTypesForURL;
+ (id)_URLsFromPasteboard:(id)arg1;
- (BOOL)_clipIndicatorIsShowing;
- (id)_insertTabButtonWithTabViewItem:(id)arg1 atIndex:(unsigned int)arg2;
- (void)_removeTabButton:(id)arg1;
- (unsigned int)_numberOfVisibleTabViewItems;
- (double)_availableWidthForButtonsWhenUnclipped;
- (double)_availableWidthForButtonsWhenClipped;
- (id)_backgroundFillImage;
- (void)_getButtonWidth:(double *)arg1 leftover:(unsigned long long *)arg2 isClipping:(char *)arg3;
- (BOOL)_isVisible;
- (struct CGRect)_separatorBeforeSpecialButtonsRect;
- (struct CGRect)_separatorBetweenSpecialButtonsRect;
- (void)_setDirectionOfSeparatorBeforeSpecialButtons:(int)arg1;
- (void)_setModeOfSeparatorBeforeSpecialButtons:(int)arg1;
- (void)_setSeparatorBeforeSpecialButtonsUsesActiveTabColor:(BOOL)arg1;
- (void)_setSpecialSeparatorsAndClipIndicatorNeedDisplay;
- (id)_sortedVisibleButtons;
- (void)_updateSeparators;
- (void)_layOutButtons;
- (void)_updateKeyLoop;
- (unsigned long long)_visibleButtonCountForLayout;
- (void)_setSelectedTabState:(long long)arg1;
- (void)_setTabViewItemForOverflowButton:(id)arg1;
- (void)_didClickTabButton:(id)arg1;
- (void)_didClickCloseButton:(id)arg1;
- (void)_selectClippedTabViewItem:(id)arg1;
- (void)_detachTab:(id)arg1 withClickPoint:(struct CGPoint)arg2 sourceView:(id)arg3;
- (struct CGPoint)_mouseLocationForDraggingInfo:(id)arg1;
- (void)_performTabBarDragOperationForTabViewItem:(id)arg1 URL:(id)arg2;
- (void)_performTabBarDragOperationForURLs:(id)arg1 droppedAtIndex:(unsigned long long)arg2;
- (void)_performTabBarDragOperationForURLs:(id)arg1 droppedAtIndex:(unsigned long long)arg2 honorWindowPolicy:(BOOL)arg3;
- (void)_reselectTabSelectedBeforeTabDrag;
- (void)_leftTruncateButtonTitles;
- (id)_leftTruncateWordsFrom:(id)arg1 withFont:(id)arg2 width:(float)arg3 maxWordsToRemove:(unsigned int)arg4;
- (id)_leftTruncateStrings:(id)arg1 withFont:(id)arg2 width:(float)arg3;
- (void)_createTab:(id)arg1;
- (void)_updateCloseButtonsVisibility;
- (void)_setWindowBackgroundImage:(id)arg1;
- (id)_windowBackgroundImage;
- (void)_windowBackgroundDidChange;
@end

@interface TabButton (FileInternal)
+ (id)_darkSeparatorLineColor;
+ (id)_imageForEmptyWindowOfSize:(struct CGSize)arg1;
+ (id)_lightSeparatorLineColor;
+ (id)_toolTipTextAttributes;
- (id)_bottomColorForBackTabText;
- (id)_bottomColorForFrontTabText;
- (void)_considerDragFromMouseDown:(id)arg1;
- (void)_detachFadeInAnimations;
- (id)_dragImageForImage:(id)arg1;
- (void)_drawBackgroundAndSeparatorsInRect:(struct CGRect)arg1 withActiveAppearance:(BOOL)arg2;
- (void)_drawSeparatorsForUnselectedTabInRect:(struct CGRect)arg1;
- (void)_drawWindowBackgroundFromFrame:(struct CGRect)arg1 operation:(unsigned long long)arg2;
- (void)_growMiniWindow:(id)arg1;
- (void)_growMiniWindowForDetachedTabWithDragController:(id)arg1;
- (BOOL)_isShowingErrorIndicator;
- (double)_leftTextMargin;
- (double)_miniWindowDragImageWidth;
- (double)_rightTextMargin;
- (id)_selectedTab;
- (void)_setDrawsDetached:(BOOL)arg1;
- (void)_setNeedsDisplayAfterProgressChange:(struct CGRect)arg1;
- (void)_startProgressAnimation;
- (void)_stopProgressAnimation;
- (struct CGRect)_clipRectWhenSliding;
- (id)_tabBarView;
- (struct CGRect)_textRect;
- (void)_titleDidChange;
- (BOOL)_titleIsTruncated;
- (void)_titleWillChange;
- (double)_titleWidth;
- (id)_topColorForBackTabTextInMainWindow;
- (id)_topColorForFrontTabTextInMainWindow;
- (id)_topColorForBackTabTextInNonMainWindow;
- (id)_topColorForFrontTabTextInNonMainWindow;
- (void)_updateAccessibilityAttributes;
- (void)_updateControlImages;
- (BOOL)_shouldHideCloseButton;
- (void)_fadeInView:(id)arg1;
- (void)animationDidEnd:(id)arg1;
- (void)_fadableControl:(id)arg1 setHidden:(BOOL)arg2;
- (void)_updateControlsVisibility;
- (void)_updateFrames;
- (void)_updateProgressIndicatorIsSpinning;
- (void)_updateProgressIndicatorVisibility;
- (void)_updateToolTip;
- (BOOL)_useRolloverAppearance;
@end

@interface TextCell (FileInternal)
- (struct CGRect)_adjustFrameToVerticallyCenterText:(struct CGRect)arg1 inView:(id)arg2;
@end

@interface NSMenu (TextEncodingSupport)
- (void)addItemToMenuForEncoding:(unsigned int)arg1 withTarget:(id)arg2 action:(SEL)arg3;
- (void)addStandardTextEncodingMenuItemsWithTarget:(id)arg1 action:(SEL)arg2 preferredEncoding:(unsigned int)arg3;
@end

@interface NSView (BrowserToolbarExtras)
- (void)collectButtonsIntoArray:(id)arg1;
- (id)collectButtons;
- (void)validateControls;
- (void)setTargetOfControls:(id)arg1;
@end

@interface NSControl (BrowserToolbarExtras)
- (void)validateAsToolbarViewOrSubview;
@end

@interface NSButton (BrowserToolbarExtras)
- (id)menuItemForm;
@end

@interface NSToolbarView (BrowserToolbarExtras)
- (id)layoutOrderedItemViewers;
- (id)itemViewerWithIdentifier:(id)arg1;
- (id)identifierForDraggingInfo:(id)arg1;
@end

@interface NSToolbarItem (BrowserToolbarExtras)
@end

@interface TopSitesView (FileInternal)
- (struct FlowRootLayer *)_flowRootLayer;
- (struct FlowViewController *)_flowViewController;
- (struct TopSitesRootLayer *)_topSitesRootLayer;
- (struct TopSitesViewController *)_topSitesViewController;
- (struct TopSitesViewLayer *)_topSitesViewLayer;
@end

@interface WebClipBanner (FileInternal)
- (id)_browserWebView;
- (id)_croppingOverlayView;
- (void)_setCropRectForNewClip;
- (id)_documentView;
- (void)_mouseMoved:(id)arg1;
- (void)_setLastClippedNode:(PassRefPtr_b02e6e9c)arg1;
- (void)_setPromptString:(id)arg1;
- (void)_startTrackingMouseMovement;
- (void)_stopTrackingMouseMovement;
- (void)_updateBannerSubviews;
- (void)_updateCommitButtonKeyEquivalent;
- (void)_updateCropRectFromMouseMovedEvent:(id)arg1;
- (void)_updateCropRectFromClippedNode:(struct ClippedNode *)arg1 withDefaultScreenPoint:(struct CGPoint)arg2;
@end

@interface WebIconMenuItem (FileInternal)
+ (void)_receivedIconChangedNotification:(id)arg1;
+ (void)_receivedAllIconsRemovedNotification:(id)arg1;
- (void)_resetWebIcon;
- (void)_startUpdatingIcon;
- (void)_stopUpdatingIcon;
@end

@interface WebSearchField (FileInternal)
- (void)_updateToolTips;
@end

@interface WebViewPlus (FileInternal)
- (void)_queueBannerActionWithBanner:(id)arg1 actionType:(int)arg2 allowAnimation:(BOOL)arg3;
- (void)_startNextQueuedBannerAction;
@end

@interface NSWindow (ExtendedWindowDelegateSupport)
- (BOOL)willHandleEvent:(id)arg1;
- (BOOL)willHandleKeyEvent:(id)arg1;
- (BOOL)willHandleMouseDownEvent:(id)arg1;
@end

